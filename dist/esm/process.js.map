{"version":3,"file":"process.js","sources":["../../src/process.js"],"sourcesContent":["import EventEmitter from 'eventemitter2'\nimport hrtime from 'browser-process-hrtime'\nimport global from './global'\n\nclass Process extends EventEmitter {\n  constructor () {\n    super()\n\n    this.title = 'browser'\n    this.browser = true\n    this.env = {}\n    this.argv = []\n    this.version = ''\n    this.versions = {\n      http_parser: '0.0',\n      node: '12.18.4',\n      v8: '0.0',\n      uv: '0.0',\n      zlib: '0.0',\n      ares: '0.0',\n      icu: '0.0',\n      modules: '0',\n      openssl: '0.0'\n    }\n    this.hrtime = hrtime\n    this.pid = 0\n    this.exitCode = 0\n    this.connected = true\n    this._startTime = Date.now()\n    this._errorCallback = null\n  }\n\n  exit (code) {\n    this.exitCode = code\n    this.emit('exit', [code])\n    throw new Error('process.exit() called.')\n  }\n\n  setUncaughtExceptionCaptureCallback (cb) {\n    if (this._errorCallback) {\n      window.removeEventListener('error', this._errorCallback)\n    }\n    this._errorCallback = cb\n    if (cb) {\n      window.addEventListener('error', cb)\n    }\n  }\n\n  hasUncaughtExceptionCaptureCallback () {\n    return this._errorCallback !== null\n  }\n\n  cwd () {\n    return '/'\n  }\n\n  uptime () {\n    return Math.floor((Date.now() - this._startTime) / 1000)\n  }\n\n  memoryUsage () {\n    if (!performance && !performance.memory) {\n      return {\n        rss: 0,\n        heapTotal: Number.MAX_SAFE_INTEGER,\n        heapUsed: 0,\n        external: 0\n      }\n    }\n\n    const { memory } = performance\n\n    return {\n      rss: 0,\n      heapTotal: memory.totalJSHeapSize,\n      heapUsed: memory.usedJSHeapSize,\n      external: 0\n    }\n  }\n\n  nextTick (handler, ...args) {\n    queueMicrotask(() => handler(...args))\n  }\n\n  _getActiveHandles () {\n    return []\n  }\n\n  _getActiveRequests () {\n    return []\n  }\n}\n\nconst proc = new Process()\n\n//\n// We monkey patch the current process to use our updated version or we define our process as global.\n//\nconst currentProcess = (global && global.process) || process\nif (currentProcess) {\n  for (const prop in proc) {\n    if (typeof proc[prop] === 'function') {\n      currentProcess[prop] = proc[prop].bind(proc)\n      continue\n    }\n\n    currentProcess[prop] = proc[prop]\n  }\n} else {\n  global.process = proc\n}\n\nexport default proc\n"],"names":["proc","EventEmitter","[object Object]","super","this","title","browser","env","argv","version","versions","http_parser","node","v8","uv","zlib","ares","icu","modules","openssl","hrtime","pid","exitCode","connected","_startTime","Date","now","_errorCallback","code","emit","Error","cb","window","removeEventListener","addEventListener","Math","floor","performance","memory","rss","heapTotal","Number","MAX_SAFE_INTEGER","heapUsed","external","totalJSHeapSize","usedJSHeapSize","handler","args","queueMicrotask","currentProcess","global","process","prop","bind"],"mappings":"8FA6FK,MAACA,EAAO,IAzFb,cAAsBC,EACpBC,cACEC,QAEAC,KAAKC,MAAQ,UACbD,KAAKE,SAAU,EACfF,KAAKG,IAAM,GACXH,KAAKI,KAAO,GACZJ,KAAKK,QAAU,GACfL,KAAKM,SAAW,CACdC,YAAa,MACbC,KAAM,UACNC,GAAI,MACJC,GAAI,MACJC,KAAM,MACNC,KAAM,MACNC,IAAK,MACLC,QAAS,IACTC,QAAS,OAEXf,KAAKgB,OAASA,EACdhB,KAAKiB,IAAM,EACXjB,KAAKkB,SAAW,EAChBlB,KAAKmB,WAAY,EACjBnB,KAAKoB,WAAaC,KAAKC,MACvBtB,KAAKuB,eAAiB,KAGxBzB,KAAM0B,GAGJ,MAFAxB,KAAKkB,SAAWM,EAChBxB,KAAKyB,KAAK,OAAQ,CAACD,IACb,IAAIE,MAAM,0BAGlB5B,oCAAqC6B,GAC/B3B,KAAKuB,gBACPK,OAAOC,oBAAoB,QAAS7B,KAAKuB,gBAE3CvB,KAAKuB,eAAiBI,EAClBA,GACFC,OAAOE,iBAAiB,QAASH,GAIrC7B,sCACE,OAA+B,OAAxBE,KAAKuB,eAGdzB,MACE,MAAO,IAGTA,SACE,OAAOiC,KAAKC,OAAOX,KAAKC,MAAQtB,KAAKoB,YAAc,KAGrDtB,cACE,IAAKmC,cAAgBA,YAAYC,OAC/B,MAAO,CACLC,IAAK,EACLC,UAAWC,OAAOC,iBAClBC,SAAU,EACVC,SAAU,GAId,MAAMN,OAAEA,GAAWD,YAEnB,MAAO,CACLE,IAAK,EACLC,UAAWF,EAAOO,gBAClBF,SAAUL,EAAOQ,eACjBF,SAAU,GAId1C,SAAU6C,KAAYC,GACpBC,gBAAe,IAAMF,KAAWC,KAGlC9C,oBACE,MAAO,GAGTA,qBACE,MAAO,KASLgD,EAAkBC,GAAUA,EAAOC,SAAYA,QACrD,GAAIF,EACF,IAAK,MAAMG,KAAQrD,EACS,mBAAfA,EAAKqD,GAKhBH,EAAeG,GAAQrD,EAAKqD,GAJ1BH,EAAeG,GAAQrD,EAAKqD,GAAMC,KAAKtD,QAO3CmD,EAAOC,QAAUpD"}