{"version":3,"file":"cpu-usage.js","sources":["../../src/cpu-usage.js"],"sourcesContent":["import { EventEmitter } from 'events'\nimport cpus from 'cpus'\n\nclass RafPerf extends EventEmitter {\n  constructor (options) {\n    super()\n\n    this.options = { ...RafPerf.defaultOptions, ...options }\n\n    this.reset()\n\n    this.tick = this.tick.bind(this)\n    this.onVisibilityChange = this.onVisibilityChange.bind(this)\n  }\n\n  reset () {\n    this.isVisible = true\n    this.running = false\n    this.prevTime = null\n    this.startTime = null\n\n    this.frameDuration = RafPerf.fpsToMs(this.options.fps)\n\n    this.performance = undefined\n    this.perfSamples = []\n\n    if (this.requestID) cancelAnimationFrame(this.requestID)\n  }\n\n  start () {\n    // Check if loop is already running\n    if (this.running) return\n\n    // Set running state and initial time\n    this.running = true\n    this.prevTime = RafPerf.now()\n    this.startTime = this.prevTime\n    this.perfStartTime = this.prevTime\n\n    // Add visibility listener\n    document.addEventListener(\n      'visibilitychange',\n      this.onVisibilityChange,\n      false\n    )\n\n    // Start ticking\n    this.requestID = requestAnimationFrame(this.tick)\n  }\n\n  tick () {\n    // Ensure loop is running\n    if (!this.running || !this.isVisible) return\n\n    const { performances } = this.options\n\n    // Compute delta time since previous time\n    const time = RafPerf.now()\n    const deltaTime = time - this.prevTime\n\n    // Compute delta since previous frame\n    const frameDeltaTime = time - this.startTime\n\n    // Check elapsed time is more than desired frame duration\n    if (deltaTime > this.frameDuration) {\n      if (performances.enabled) {\n        // Push delta time for average computation\n        this.perfSamples.push(frameDeltaTime)\n\n        // Check if enough time has passed to sample or number of samples collected is enough\n        const perfNeedsUpdates =\n          (performances.sampleDuration &&\n            time - this.perfStartTime > performances.sampleDuration) ||\n          this.perfSamples.length > performances.samplesCount\n\n        if (perfNeedsUpdates) {\n          // Check average and update performance ratio\n          const averageDeltaTime =\n            this.perfSamples.reduce((time, sum) => time + sum) /\n            this.perfSamples.length\n          this.performance = this.frameDuration / averageDeltaTime\n          this.emit('perf', this.performance)\n\n          // Reset performances variables\n          this.perfSamples = []\n          this.perfStartTime = time\n        }\n      }\n\n      // Update prev and start time\n      // Compensate for gap between delta time and x number of frames\n      this.prevTime = time - (deltaTime % this.frameDuration)\n      this.startTime = time\n\n      // Call user callback function with delta time\n      this.emit('tick', frameDeltaTime)\n    }\n\n    this.requestID = requestAnimationFrame(this.tick)\n  }\n\n  stop () {\n    document.removeEventListener(\n      'visibilitychange',\n      this.onVisibilityChange,\n      false\n    )\n\n    this.reset()\n  }\n\n  onVisibilityChange () {\n    this.isVisible = !document.hidden\n\n    if (this.isVisible) {\n      this.reset()\n      this.start()\n    }\n  }\n}\n\n// Static\nRafPerf.defaultOptions = {\n  fps: 60,\n  performances: {\n    enabled: true,\n    samplesCount: 200,\n    // If everything runs smoothtly, samplesCount will be used over sampleDuration\n    // 1000 ms / 60 fps * 200 samplesCount = 3333 ms\n    sampleDuration: 4000\n  }\n}\n\nRafPerf.now = () => {\n  return (performance || Date).now()\n}\n\nRafPerf.fpsToMs = value => {\n  return (1 / value) * 1000\n}\n\n// Simulate https://nodejs.org/api/os.html#os_os_loadavg\nconst _osLoadAvg = [\n  // 1 minute\n  {\n    time: Math.floor(Date.now() / 1000),\n    init: false,\n    avg: 0\n  },\n\n  // 5 minutes\n  {\n    time: Math.floor(Date.now() / 1000),\n    avg: 0\n  },\n\n  // 15 minutes\n  {\n    time: Math.floor(Date.now() / 1000),\n    avg: 0\n  }\n]\n\nfunction updateLoadAvg (avg) {\n  const currentTime = Math.floor(Date.now() / 1000)\n  if (!_osLoadAvg[0].init || (currentTime - _osLoadAvg[0].time) > 60) {\n    _osLoadAvg[0].init = true\n    _osLoadAvg[0].time = currentTime\n    _osLoadAvg[0].avg = avg\n  }\n\n  if ((currentTime - _osLoadAvg[1].time) > 60 * 5) {\n    _osLoadAvg[1].time = currentTime\n    _osLoadAvg[1].avg = avg\n  }\n\n  if ((currentTime - _osLoadAvg[2].time) > 60 * 15) {\n    _osLoadAvg[2].time = currentTime\n    _osLoadAvg[2].avg = avg\n  }\n}\n\nfunction loadavg () {\n  return _osLoadAvg.map(value => value.avg)\n}\n\n/**\n * getCpuUsage\n *\n * Simulate cpuUsage of the browser based on the FPS performance.\n *\n * rate 1 (60fps) -> 0% usage\n * rate 0.5 (30fps) -> 50% usage\n * rate 0 (0fps) -> 100% usage\n *\n * @param {Boolean=100} sampleTime\n * @returns {Promise<Result>}\n */\nfunction getCpuUsage (sampleTime = 100) {\n  const engine = new RafPerf({\n    performances: {\n      enabled: true,\n      samplesCount: 3,\n      sampleDuration: sampleTime\n    }\n  })\n\n  return new Promise((resolve, reject) => {\n    engine.once('perf', ratio => {\n      engine.stop()\n\n      if (!ratio) {\n        return reject(new Error('CpuUsage: ratio perf not found.'))\n      }\n\n      const avg = 100 - (ratio * 100)\n      const avgByCpu = avg / cpus().length\n\n      updateLoadAvg(avg)\n\n      resolve({\n        avg,\n        usages: cpus().map(cpu => avgByCpu)\n      })\n    })\n\n    engine.start()\n  })\n}\n\ngetCpuUsage.loadavg = loadavg\n\nexport default getCpuUsage\n"],"names":["RafPerf","EventEmitter","[object Object]","options","super","this","defaultOptions","reset","tick","bind","onVisibilityChange","isVisible","running","prevTime","startTime","frameDuration","fpsToMs","fps","performance","undefined","perfSamples","requestID","cancelAnimationFrame","now","perfStartTime","document","addEventListener","requestAnimationFrame","performances","time","deltaTime","frameDeltaTime","enabled","push","sampleDuration","length","samplesCount","averageDeltaTime","reduce","sum","emit","removeEventListener","hidden","start","Date","value","_osLoadAvg","Math","floor","init","avg","getCpuUsage","sampleTime","engine","Promise","resolve","reject","once","ratio","stop","Error","avgByCpu","cpus","currentTime","updateLoadAvg","usages","map","cpu","loadavg"],"mappings":"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"}