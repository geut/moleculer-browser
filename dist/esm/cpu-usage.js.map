{"version":3,"file":"cpu-usage.js","sources":["../../src/cpu-usage.js"],"sourcesContent":["import { EventEmitter } from 'events'\nimport cpus from 'cpus'\n\nclass RafPerf extends EventEmitter {\n  constructor (options) {\n    super()\n\n    this.options = { ...RafPerf.defaultOptions, ...options }\n\n    this.reset()\n\n    this.tick = this.tick.bind(this)\n    this.onVisibilityChange = this.onVisibilityChange.bind(this)\n  }\n\n  reset () {\n    this.isVisible = true\n    this.running = false\n    this.prevTime = null\n    this.startTime = null\n\n    this.frameDuration = RafPerf.fpsToMs(this.options.fps)\n\n    this.performance = undefined\n    this.perfSamples = []\n\n    if (this.requestID) cancelAnimationFrame(this.requestID)\n  }\n\n  start () {\n    // Check if loop is already running\n    if (this.running) return\n\n    // Set running state and initial time\n    this.running = true\n    this.prevTime = RafPerf.now()\n    this.startTime = this.prevTime\n    this.perfStartTime = this.prevTime\n\n    // Add visibility listener\n    document.addEventListener(\n      'visibilitychange',\n      this.onVisibilityChange,\n      false\n    )\n\n    // Start ticking\n    this.requestID = requestAnimationFrame(this.tick)\n  }\n\n  tick () {\n    // Ensure loop is running\n    if (!this.running || !this.isVisible) return\n\n    const { performances } = this.options\n\n    // Compute delta time since previous time\n    const time = RafPerf.now()\n    const deltaTime = time - this.prevTime\n\n    // Compute delta since previous frame\n    const frameDeltaTime = time - this.startTime\n\n    // Check elapsed time is more than desired frame duration\n    if (deltaTime > this.frameDuration) {\n      if (performances.enabled) {\n        // Push delta time for average computation\n        this.perfSamples.push(frameDeltaTime)\n\n        // Check if enough time has passed to sample or number of samples collected is enough\n        const perfNeedsUpdates =\n          (performances.sampleDuration &&\n            time - this.perfStartTime > performances.sampleDuration) ||\n          this.perfSamples.length > performances.samplesCount\n\n        if (perfNeedsUpdates) {\n          // Check average and update performance ratio\n          const averageDeltaTime =\n            this.perfSamples.reduce((time, sum) => time + sum) /\n            this.perfSamples.length\n          this.performance = this.frameDuration / averageDeltaTime\n          this.emit('perf', this.performance)\n\n          // Reset performances variables\n          this.perfSamples = []\n          this.perfStartTime = time\n        }\n      }\n\n      // Update prev and start time\n      // Compensate for gap between delta time and x number of frames\n      this.prevTime = time - (deltaTime % this.frameDuration)\n      this.startTime = time\n\n      // Call user callback function with delta time\n      this.emit('tick', frameDeltaTime)\n    }\n\n    this.requestID = requestAnimationFrame(this.tick)\n  }\n\n  stop () {\n    document.removeEventListener(\n      'visibilitychange',\n      this.onVisibilityChange,\n      false\n    )\n\n    this.reset()\n  }\n\n  onVisibilityChange () {\n    this.isVisible = !document.hidden\n\n    if (this.isVisible) {\n      this.reset()\n      this.start()\n    }\n  }\n}\n\n// Static\nRafPerf.defaultOptions = {\n  fps: 60,\n  performances: {\n    enabled: true,\n    samplesCount: 200,\n    // If everything runs smoothtly, samplesCount will be used over sampleDuration\n    // 1000 ms / 60 fps * 200 samplesCount = 3333 ms\n    sampleDuration: 4000\n  }\n}\n\nRafPerf.now = () => {\n  return (performance || Date).now()\n}\n\nRafPerf.fpsToMs = value => {\n  return (1 / value) * 1000\n}\n\n// Simulate https://nodejs.org/api/os.html#os_os_loadavg\nconst _osLoadAvg = [\n  // 1 minute\n  {\n    time: Math.floor(Date.now() / 1000),\n    init: false,\n    avg: 0\n  },\n\n  // 5 minutes\n  {\n    time: Math.floor(Date.now() / 1000),\n    avg: 0\n  },\n\n  // 15 minutes\n  {\n    time: Math.floor(Date.now() / 1000),\n    avg: 0\n  }\n]\n\nfunction updateLoadAvg (avg) {\n  const currentTime = Math.floor(Date.now() / 1000)\n  if (!_osLoadAvg[0].init || (currentTime - _osLoadAvg[0].time) > 60) {\n    _osLoadAvg[0].init = true\n    _osLoadAvg[0].time = currentTime\n    _osLoadAvg[0].avg = avg\n  }\n\n  if ((currentTime - _osLoadAvg[1].time) > 60 * 5) {\n    _osLoadAvg[1].time = currentTime\n    _osLoadAvg[1].avg = avg\n  }\n\n  if ((currentTime - _osLoadAvg[2].time) > 60 * 15) {\n    _osLoadAvg[2].time = currentTime\n    _osLoadAvg[2].avg = avg\n  }\n}\n\nfunction loadavg () {\n  return _osLoadAvg.map(value => value.avg)\n}\n\n/**\n * getCpuUsage\n *\n * Simulate cpuUsage of the browser based on the FPS performance.\n *\n * rate 1 (60fps) -> 0% usage\n * rate 0.5 (30fps) -> 50% usage\n * rate 0 (0fps) -> 100% usage\n *\n * @param {Boolean=100} sampleTime\n * @returns {Promise<Result>}\n */\nfunction getCpuUsage (sampleTime = 100) {\n  const engine = new RafPerf({\n    performances: {\n      enabled: true,\n      samplesCount: 3,\n      sampleDuration: sampleTime\n    }\n  })\n\n  return new Promise((resolve, reject) => {\n    engine.once('perf', ratio => {\n      engine.stop()\n\n      if (!ratio) {\n        return reject(new Error('CpuUsage: ratio perf not found.'))\n      }\n\n      const avg = 100 - (ratio * 100)\n      const avgByCpu = avg / cpus().length\n\n      updateLoadAvg(avg)\n\n      resolve({\n        avg,\n        usages: cpus().map(cpu => avgByCpu)\n      })\n    })\n\n    engine.start()\n  })\n}\n\ngetCpuUsage.loadavg = loadavg\n\nexport default getCpuUsage\n"],"names":[],"mappings":"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"}