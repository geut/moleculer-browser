{"version":3,"file":"service-broker.js","sources":["../../../../src/moleculer/src/service-broker.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2020 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst EventEmitter2 \t\t= require(\"eventemitter2\").EventEmitter2;\nconst _ \t\t\t\t\t= require(\"lodash\");\nconst glob \t\t\t\t\t= require(\"glob\");\nconst path \t\t\t\t\t= require(\"path\");\n\nconst Transit \t\t\t\t= require(\"./transit\");\nconst Registry \t\t\t\t= require(\"./registry\");\nconst E \t\t\t\t\t= require(\"./errors\");\nconst utils \t\t\t\t= require(\"./utils\");\nconst LoggerFactory\t\t\t= require(\"./logger-factory\");\nconst Validators \t\t\t= require(\"./validators\");\n//const AsyncStorage \t\t\t= require(\"./async-storage\");\n\nconst Cachers \t\t\t\t= require(\"./cachers\");\nconst Transporters \t\t\t= require(\"./transporters\");\nconst Serializers \t\t\t= require(\"./serializers\");\nconst H \t\t\t\t\t= require(\"./health\");\nconst MiddlewareHandler\t\t= require(\"./middleware\");\nconst cpuUsage \t\t\t\t= require(\"./cpu-usage\");\n\nconst { MetricRegistry, METRIC }\t= require(\"./metrics\");\nconst { Tracer }\t\t\t= require(\"./tracing\");\n\n/**\n * Default broker options\n */\nconst defaultOptions = {\n\tnamespace: \"\",\n\tnodeID: null,\n\n\tlogger: true,\n\tlogLevel: null,\n\n\ttransporter: null, //\"TCP\",\n\n\trequestTimeout: 0 * 1000,\n\tretryPolicy: {\n\t\tenabled: false,\n\t\tretries: 5,\n\t\tdelay: 100,\n\t\tmaxDelay: 1000,\n\t\tfactor: 2,\n\t\tcheck: err => err && !!err.retryable\n\t},\n\n\tcontextParamsCloning: false,\n\tmaxCallLevel: 0,\n\theartbeatInterval: 10,\n\theartbeatTimeout: 30,\n\n\ttracking: {\n\t\tenabled: false,\n\t\tshutdownTimeout: 5000,\n\t},\n\n\tdisableBalancer: false,\n\n\tregistry: {\n\t\tstrategy: \"RoundRobin\",\n\t\tpreferLocal: true\n\t},\n\n\tcircuitBreaker: {\n\t\tenabled: false,\n\t\tthreshold: 0.5,\n\t\twindowTime: 60,\n\t\tminRequestCount: 20,\n\t\thalfOpenTime: 10 * 1000,\n\t\tcheck: err => err && err.code >= 500\n\t},\n\n\tbulkhead: {\n\t\tenabled: false,\n\t\tconcurrency: 10,\n\t\tmaxQueueSize: 100,\n\t},\n\n\ttransit: {\n\t\tmaxQueueSize: 50 * 1000, // 50k ~ 400MB,\n\t\tmaxChunkSize: 256*1024, // 256KB\n\t\tdisableReconnect: false,\n\t\tdisableVersionCheck: false\n\t},\n\n\tuidGenerator: null,\n\n\terrorHandler: null,\n\n\tcacher: null,\n\tserializer: null,\n\n\tvalidator: true,\n\n\tmetrics: false,\n\ttracing: false,\n\n\tinternalServices: true,\n\tinternalMiddlewares: true,\n\tdependencyInterval: 1000,\n\n\thotReload: false,\n\n\tmiddlewares: null,\n\n\treplCommands: null,\n\treplDelimiter: null,\n\n\tmetadata: {},\n\n\tskipProcessEventRegistration: false,\n\n\t/**\n\t * Maximum size of objects that can be serialized\n\t *\n\t * On serialization process, check each object property size (based on length or size property value)\n\t * and trim it, if object size bigger than maxSafeObjectSize value\n\t *\n\t * @type {(number|null)}\n\t */\n\tmaxSafeObjectSize: null,\n\t// ServiceFactory: null,\n\t// ContextFactory: null\n\t// Promise: null\n};\n\n/**\n * Service broker class\n *\n * @class ServiceBroker\n */\nclass ServiceBroker {\n\n\t/**\n\t * Creates an instance of ServiceBroker.\n\t *\n\t * @param {Object} options\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tconstructor(options) {\n\t\ttry {\n\t\t\tthis.options = _.defaultsDeep(options, defaultOptions);\n\n\t\t\t// Custom Promise lib\n\t\t\tif (this.options.Promise) {\n\t\t\t\tthis.Promise = this.options.Promise;\n\t\t\t} else {\n\t\t\t\t// Use native Promise lib\n\t\t\t\tthis.Promise = Promise;\n\t\t\t}\n\t\t\tutils.polyfillPromise(this.Promise);\n\t\t\tServiceBroker.Promise = this.Promise;\n\n\t\t\t// Broker started flag\n\t\t\tthis.started = false;\n\n\t\t\t// Class factories\n\t\t\tthis.ServiceFactory = this.options.ServiceFactory || require(\"./service\");\n\t\t\tthis.ContextFactory = this.options.ContextFactory || require(\"./context\");\n\n\t\t\t// Namespace\n\t\t\tthis.namespace = this.options.namespace || \"\";\n\n\t\t\t// Metadata\n\t\t\tthis.metadata = this.options.metadata || {};\n\n\t\t\t// Self nodeID\n\t\t\tthis.nodeID = this.options.nodeID || utils.getNodeID();\n\n\t\t\t// Instance ID\n\t\t\tthis.instanceID = utils.generateToken();\n\n\t\t\t// Internal maps\n\t\t\tthis.services = [];\n\n\t\t\t// Internal event bus\n\t\t\tthis.localBus = new EventEmitter2({\n\t\t\t\twildcard: true,\n\t\t\t\tmaxListeners: 100\n\t\t\t});\n\n\t\t\t// Log Factory\n\t\t\tthis.loggerFactory = new LoggerFactory(this);\n\t\t\tthis.loggerFactory.init(this.options.logger);\n\n\t\t\t// Logger\n\t\t\tthis.logger = this.getLogger(\"broker\");\n\n\t\t\tthis.logger.info(`Moleculer v${this.MOLECULER_VERSION} is starting...`);\n\t\t\tthis.logger.info(`Namespace: ${this.namespace || \"<not defined>\"}`);\n\t\t\tthis.logger.info(`Node ID: ${this.nodeID}`);\n\n\t\t\t// Async storage for Contexts\n\t\t\t//this.scope = new AsyncStorage(this);\n\n\t\t\t// Metrics Registry\n\t\t\tthis.metrics = new MetricRegistry(this, this.options.metrics);\n\t\t\tthis.metrics.init();\n\t\t\tthis.registerMoleculerMetrics();\n\n\t\t\t// Middleware handler\n\t\t\tthis.middlewares = new MiddlewareHandler(this);\n\n\t\t\t// Service registry\n\t\t\tthis.registry = new Registry(this);\n\n\t\t\t// Cacher\n\t\t\tthis.cacher = Cachers.resolve(this.options.cacher);\n\t\t\tif (this.cacher) {\n\t\t\t\tthis.cacher.init(this);\n\n\t\t\t\tconst name = this.getConstructorName(this.cacher);\n\t\t\t\tthis.logger.info(`Cacher: ${name}`);\n\t\t\t}\n\n\t\t\t// Serializer\n\t\t\tthis.serializer = Serializers.resolve(this.options.serializer);\n\t\t\tthis.serializer.init(this);\n\n\t\t\tconst serializerName = this.getConstructorName(this.serializer);\n\t\t\tthis.logger.info(`Serializer: ${serializerName}`);\n\n\t\t\t// Validator\n\t\t\tif (this.options.validator) {\n\t\t\t\tthis.validator = Validators.resolve(this.options.validator);\n\t\t\t\tif (this.validator) {\n\t\t\t\t\tconst validatorName = this.getConstructorName(this.validator);\n\t\t\t\t\tthis.logger.info(`Validator: ${validatorName}`);\n\t\t\t\t\tthis.validator.init(this);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Tracing\n\t\t\tthis.tracer = new Tracer(this, this.options.tracing);\n\t\t\tthis.tracer.init();\n\n\t\t\t// Register middlewares\n\t\t\tthis.registerMiddlewares(this.options.middlewares);\n\n\t\t\t// Transit & Transporter\n\t\t\tif (this.options.transporter) {\n\t\t\t\tconst tx = Transporters.resolve(this.options.transporter);\n\t\t\t\tthis.transit = new Transit(this, tx, this.options.transit);\n\n\t\t\t\tconst txName = this.getConstructorName(tx);\n\t\t\t\tthis.logger.info(`Transporter: ${txName}`);\n\n\t\t\t\tif (this.options.disableBalancer) {\n\t\t\t\t\tif (tx.hasBuiltInBalancer) {\n\t\t\t\t\t\tthis.logger.info(\"The broker built-in balancer is DISABLED.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.logger.warn(`The ${txName} has no built-in balancer. Broker balancer is ENABLED.`);\n\t\t\t\t\t\tthis.options.disableBalancer = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Change the call method if balancer is disabled\n\t\t\tif (this.options.disableBalancer) {\n\t\t\t\tthis.call = this.callWithoutBalancer;\n\t\t\t}\n\n\t\t\tthis.registry.init(this);\n\n\t\t\t// Register internal actions\n\t\t\tif (this.options.internalServices)\n\t\t\t\tthis.registerInternalServices(this.options.internalServices);\n\n\t\t\t// Call `created` event handler in middlewares\n\t\t\tthis.callMiddlewareHookSync(\"created\", [this]);\n\n\t\t\t// Call `created` event handler from options\n\t\t\tif (utils.isFunction(this.options.created))\n\t\t\t\tthis.options.created(this);\n\n\t\t\t// Graceful exit\n\t\t\tthis._closeFn = () => {\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tthis.stop()\n\t\t\t\t\t.catch(err => this.logger.error(err))\n\t\t\t\t\t.then(() => process.exit(0));\n\t\t\t};\n\n\t\t\tprocess.setMaxListeners(0);\n\t\t\tif (this.options.skipProcessEventRegistration === false) {\n\t\t\t\tprocess.on(\"beforeExit\", this._closeFn);\n\t\t\t\tprocess.on(\"exit\", this._closeFn);\n\t\t\t\tprocess.on(\"SIGINT\", this._closeFn);\n\t\t\t\tprocess.on(\"SIGTERM\", this._closeFn);\n\t\t\t}\n\n\t\t} catch(err) {\n\t\t\tif (this.logger)\n\t\t\t\tthis.fatal(\"Unable to create ServiceBroker.\", err, true);\n\t\t\telse {\n\t\t\t\t/* eslint-disable-next-line no-console */\n\t\t\t\tconsole.error(\"Unable to create ServiceBroker.\", err);\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Register middlewares (user & internal)\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tregisterMiddlewares(userMiddlewares) {\n\t\t// Register user middlewares\n\t\tif (Array.isArray(userMiddlewares) && userMiddlewares.length > 0) {\n\t\t\t_.compact(userMiddlewares).forEach(mw => this.middlewares.add(mw));\n\n\t\t\tthis.logger.info(`Registered ${this.middlewares.count()} custom middleware(s).`);\n\t\t}\n\n\t\tif (this.options.internalMiddlewares) {\n\t\t\t// Register internal middlewares\n\n\t\t\tconst prevCount = this.middlewares.count();\n\n\t\t\t// 0. ActionHook\n\t\t\tthis.middlewares.add(\"ActionHook\");\n\n\t\t\t// 1. Validator\n\t\t\tif (this.validator && utils.isFunction(this.validator.middleware)) {\n\t\t\t\tconst mw = this.validator.middleware(this);\n\t\t\t\tif (utils.isPlainObject(mw))\n\t\t\t\t\tthis.middlewares.add(mw);\n\t\t\t\telse\n\t\t\t\t\tthis.middlewares.add({ localAction: mw });\n\t\t\t}\n\n\t\t\t// 2. Bulkhead\n\t\t\tthis.middlewares.add(\"Bulkhead\");\n\n\t\t\t// 3. Cacher\n\t\t\tif (this.cacher && utils.isFunction(this.cacher.middleware)) {\n\t\t\t\tconst mw = this.cacher.middleware();\n\t\t\t\tif (utils.isPlainObject(mw))\n\t\t\t\t\tthis.middlewares.add(mw);\n\t\t\t\telse\n\t\t\t\t\tthis.middlewares.add({ localAction: mw });\n\t\t\t}\n\n\t\t\t// 4. Context tracker\n\t\t\tthis.middlewares.add(\"ContextTracker\");\n\n\t\t\t// 5. CircuitBreaker\n\t\t\tthis.middlewares.add(\"CircuitBreaker\");\n\n\t\t\t// 6. Timeout\n\t\t\tthis.middlewares.add(\"Timeout\");\n\n\t\t\t// 7. Retry\n\t\t\tthis.middlewares.add(\"Retry\");\n\n\t\t\t// 8. Fallback\n\t\t\tthis.middlewares.add(\"Fallback\");\n\n\t\t\t// 9. Error handler\n\t\t\tthis.middlewares.add(\"ErrorHandler\");\n\n\t\t\t// 10. Tracing\n\t\t\tthis.middlewares.add(\"Tracing\");\n\n\t\t\t// 11. Metrics\n\t\t\tthis.middlewares.add(\"Metrics\");\n\n\t\t\t// 12. Debounce\n\t\t\tthis.middlewares.add(\"Debounce\");\n\n\t\t\t// 13. Throttle\n\t\t\tthis.middlewares.add(\"Throttle\");\n\n\t\t\tif (this.options.hotReload) {\n\t\t\t\t// 14. Hot Reload\n\t\t\t\tthis.middlewares.add(\"HotReload\");\n\t\t\t}\n\n\t\t\tthis.logger.info(`Registered ${this.middlewares.count() - prevCount} internal middleware(s).`);\n\t\t}\n\n\t\tthis.createService = this.wrapMethod(\"createService\", this.createService);\n\t\tthis.registerLocalService = this.wrapMethod(\"registerLocalService\", this.registerLocalService);\n\t\tthis.destroyService = this.wrapMethod(\"destroyService\", this.destroyService);\n\t\tthis.call = this.wrapMethod(\"call\", this.call);\n\t\tthis.callWithoutBalancer = this.wrapMethod(\"call\", this.callWithoutBalancer);\n\t\tthis.mcall = this.wrapMethod(\"mcall\", this.mcall);\n\t\tthis.emit = this.wrapMethod(\"emit\", this.emit);\n\t\tthis.broadcast = this.wrapMethod(\"broadcast\", this.broadcast);\n\t\tthis.broadcastLocal = this.wrapMethod(\"broadcastLocal\", this.broadcastLocal);\n\n\t\tthis.metrics.set(METRIC.MOLECULER_BROKER_MIDDLEWARES_TOTAL,this.middlewares.count());\n\t}\n\n\t/**\n\t * Register Moleculer Core metrics.\n\t */\n\tregisterMoleculerMetrics() {\n\t\tif (!this.isMetricsEnabled()) return;\n\n\t\t// --- MOLECULER NODE METRICS ---\n\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_NODE_TYPE, type: METRIC.TYPE_INFO, description: \"Moleculer implementation type\" }).set(\"nodejs\");\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_NODE_VERSIONS_MOLECULER, type: METRIC.TYPE_INFO, description: \"Moleculer version number\" }).set(ServiceBroker.MOLECULER_VERSION);\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_NODE_VERSIONS_PROTOCOL, type: METRIC.TYPE_INFO, description: \"Moleculer protocol version\" }).set(ServiceBroker.PROTOCOL_VERSION);\n\n\t\t// --- MOLECULER BROKER METRICS ---\n\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_BROKER_NAMESPACE, type: METRIC.TYPE_INFO, description: \"Moleculer namespace\" }).set(this.namespace);\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_BROKER_STARTED, type: METRIC.TYPE_GAUGE, description: \"ServiceBroker started\" }).set(0);\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_BROKER_LOCAL_SERVICES_TOTAL, type: METRIC.TYPE_GAUGE, description: \"Number of local services\" }).set(0);\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_BROKER_MIDDLEWARES_TOTAL, type: METRIC.TYPE_GAUGE, description: \"Number of local middlewares\" }).set(0);\n\t}\n\n\t/**\n\t * Start broker. If has transporter, transporter.connect will be called.\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tstart() {\n\t\tconst startTime = Date.now();\n\n\t\treturn this.Promise.resolve()\n\t\t\t.then(() => {\n\t\t\t\t//this.tracer.restartScope();\n\t\t\t\t//this.scope.enable();\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\treturn this.callMiddlewareHook(\"starting\", [this]);\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tif (this.transit)\n\t\t\t\t\treturn this.transit.connect();\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// Call service `started` handlers\n\t\t\t\treturn this.Promise.all(this.services.map(svc => svc._start.call(svc)))\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tthis.logger.error(\"Unable to start all services.\", err);\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tthis.started = true;\n\t\t\t\tthis.metrics.set(METRIC.MOLECULER_BROKER_STARTED, 1);\n\t\t\t\tthis.broadcastLocal(\"$broker.started\");\n\t\t\t\tthis.registry.regenerateLocalRawInfo(true);\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tif (this.transit)\n\t\t\t\t\treturn this.transit.ready();\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\treturn this.callMiddlewareHook(\"started\", [this]);\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tif (utils.isFunction(this.options.started))\n\t\t\t\t\treturn this.options.started(this);\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tconst duration = Date.now() - startTime;\n\t\t\t\tthis.logger.info(`✔ ServiceBroker with ${this.services.length} service(s) is started successfully in ${utils.humanize(duration)}.`);\n\t\t\t});\n\t}\n\n\t/**\n\t * Stop broker. If has transporter, transporter.disconnect will be called.\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tstop() {\n\t\tthis.started = false;\n\t\treturn this.Promise.resolve()\n\t\t\t.then(() => {\n\t\t\t\tif (this.transit) {\n\t\t\t\t\tthis.registry.regenerateLocalRawInfo(true);\n\t\t\t\t\t// Send empty node info in order to block incoming requests\n\t\t\t\t\treturn this.registry.discoverer.sendLocalNodeInfo();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\treturn this.callMiddlewareHook(\"stopping\", [this], { reverse: true });\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// Call service `stopped` handlers\n\t\t\t\treturn this.Promise.all(this.services.map(svc => svc._stop.call(svc)))\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tthis.logger.error(\"Unable to stop all services.\", err);\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tif (this.transit) {\n\t\t\t\t\treturn this.transit.disconnect();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tif (this.cacher) {\n\t\t\t\t\treturn this.cacher.close();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tif (this.metrics) {\n\t\t\t\t\treturn this.metrics.stop();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tif (this.tracer) {\n\t\t\t\t\treturn this.tracer.stop();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\treturn this.registry.stop();\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\treturn this.callMiddlewareHook(\"stopped\", [this], { reverse: true });\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tif (utils.isFunction(this.options.stopped))\n\t\t\t\t\treturn this.options.stopped(this);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tthis.logger.error(err);\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tthis.logger.info(\"ServiceBroker is stopped. Good bye.\");\n\t\t\t\tthis.metrics.set(METRIC.MOLECULER_BROKER_STARTED, 0);\n\n\t\t\t\tthis.broadcastLocal(\"$broker.stopped\");\n\n\t\t\t\tif (this.options.skipProcessEventRegistration === false) {\n\t\t\t\t\tprocess.removeListener(\"beforeExit\", this._closeFn);\n\t\t\t\t\tprocess.removeListener(\"exit\", this._closeFn);\n\t\t\t\t\tprocess.removeListener(\"SIGINT\", this._closeFn);\n\t\t\t\t\tprocess.removeListener(\"SIGTERM\", this._closeFn);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\treturn this.loggerFactory.stop();\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\t// Silent\n\t\t\t});\n\t}\n\n\t/**\n\t * Switch the console to REPL mode.\n\t *\n\t * @example\n\t * broker.start().then(() => broker.repl());\n\t * @returns {object}\n\t */\n\trepl() {\n\t\tlet repl;\n\t\ttry {\n\t\t\trepl = require(\"moleculer-repl\");\n\t\t}\n\t\tcatch (error) {\n\t\t\tconsole.error(\"The 'moleculer-repl' package is missing. Please install it with 'npm install moleculer-repl' command.\"); // eslint-disable-line no-console\n\t\t\tthis.logger.error(\"The 'moleculer-repl' package is missing. Please install it with 'npm install moleculer-repl' command.\");\n\t\t\tthis.logger.debug(\"ERROR\", error);\n\t\t\treturn;\n\t\t}\n\n\t\tif (repl)\n\t\t{\n\t\t\tlet opts = null;\n\t\t\tconst delimiter = this.options.replDelimiter;\n\t\t\tconst customCommands = this.options.replCommands;\n\t\t\tdelimiter && (opts = { delimiter });\n\t\t\tcustomCommands && (opts = { ...opts,customCommands });\n\t\t\treturn repl(this, opts);\n\t\t}\n\t}\n\n\t/**\n\t * Global error handler.\n\t *\n\t * @param {Error} err\n\t * @param {object} info\n\t * @returns\n\t * @memberof ServiceBroker\n\t */\n\terrorHandler(err, info) {\n\t\tif (this.options.errorHandler) {\n\t\t\treturn this.options.errorHandler.call(this, err, info);\n\t\t}\n\n\t\tthrow err;\n\t}\n\n\t/**\n\t * Wrap a method with middlewares\n\t *\n\t * @param {string} method\n\t * @param {Function} handler\n\t * @param {any} bindTo\n\t * @param {Object} opts\n\t * @returns {Function}\n\t *\n\t * @memberof ServiceBroker\n\t */\n\twrapMethod(name, handler, bindTo, opts) {\n\t\treturn this.middlewares.wrapMethod(name, handler, bindTo, opts);\n\t}\n\n\t/**\n\t * Call a handler asynchronously in all middlewares\n\t *\n\t * @param {String} method\n\t * @param {Array<any>} args\n\t * @param {Object} opts\n\t * @returns {Promise}\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tcallMiddlewareHook(name, args, opts) {\n\t\treturn this.middlewares.callHandlers(name, args, opts);\n\t}\n\n\t/**\n\t * Call a handler synchronously in all middlewares\n\t *\n\t * @param {String} method\n\t * @param {Array<any>} args\n\t * @param {Object} opts\n\t * @returns\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tcallMiddlewareHookSync(name, args, opts) {\n\t\treturn this.middlewares.callSyncHandlers(name, args, opts);\n\t}\n\n\t/**\n\t * Check metrics are enabled.\n\t *\n\t * @returns {boolean}\n\t * @memberof ServiceBroker\n\t */\n\tisMetricsEnabled() {\n\t\treturn this.metrics.isEnabled();\n\t}\n\n\t/**\n\t * Check tracing is enabled.\n\t *\n\t * @returns {boolean}\n\t * @memberof ServiceBroker\n\t */\n\tisTracingEnabled() {\n\t\treturn this.tracer.isEnabled();\n\t}\n\n\t/**\n\t * Get a custom logger for sub-modules (service, transporter, cacher, context...etc)\n\t *\n\t * @param {String} mod\tName of module\n\t * @param {Object} props\tModule properties (service name, version, ...etc\n\t * @returns {ModuleLogger}\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tgetLogger(mod, props) {\n\t\tlet bindings = Object.assign({\n\t\t\tnodeID: this.nodeID,\n\t\t\tns: this.namespace,\n\t\t\tmod\n\t\t}, props);\n\n\t\treturn this.loggerFactory.getLogger(bindings);\n\t}\n\n\t/**\n\t * Fatal error. Print the message to console and exit the process (if need)\n\t *\n\t * @param {String} message\n\t * @param {Error?} err\n\t * @param {boolean} [needExit=true]\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tfatal(message, err, needExit = true) {\n\t\tif (this.logger)\n\t\t\tthis.logger.fatal(message, err);\n\t\telse\n\t\t\tconsole.error(message, err); // eslint-disable-line no-console\n\n\t\tif (needExit)\n\t\t\tprocess.exit(1);\n\t}\n\n\t/**\n\t * Load services from a folder\n\t *\n\t * @param {string} [folder=\"./services\"]\t\tFolder of services\n\t * @param {string} [fileMask=\"**\\/*.service.js\"]\tService filename mask\n\t * @returns\t{Number}\t\t\t\t\t\t\tNumber of found services\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tloadServices(folder = \"./services\", fileMask = \"**/*.service.js\") {\n\t\tthis.logger.debug(`Search services in '${folder}/${fileMask}'...`);\n\n\t\tlet serviceFiles;\n\n\t\tif (Array.isArray(fileMask))\n\t\t\tserviceFiles = fileMask.map(f => path.join(folder, f));\n\t\telse\n\t\t\tserviceFiles = glob.sync(path.join(folder, fileMask));\n\n\t\tif (serviceFiles)\n\t\t\tserviceFiles.forEach(filename => this.loadService(filename));\n\n\t\treturn serviceFiles.length;\n\t}\n\n\t/**\n\t * Load a service from file\n\t *\n\t * @param {string} \t\tPath of service\n\t * @returns\t{Service}\tLoaded service\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tloadService(filePath) {\n\t\tlet fName, schema;\n\n\t\ttry {\n\t\t\tfName = require.resolve(path.resolve(filePath));\n\t\t\tthis.logger.debug(`Load service '${path.basename(fName)}'...`);\n\n\t\t\tconst r = require(fName);\n\t\t\tschema = r.default != null ? r.default : r;\n\n\t\t\tlet svc;\n\t\t\tschema = this.normalizeSchemaConstructor(schema);\n\t\t\tif (Object.prototype.isPrototypeOf.call(this.ServiceFactory, schema)) {\n\t\t\t\t// Service implementation\n\t\t\t\tsvc = new schema(this);\n\n\t\t\t\t// If broker is started, call the started lifecycle event of service\n\t\t\t\tif (this.started)\n\t\t\t\t\tthis._restartService(svc);\n\n\t\t\t} else if (utils.isFunction(schema)) {\n\t\t\t\t// Function\n\t\t\t\tsvc = schema(this);\n\t\t\t\tif (!(svc instanceof this.ServiceFactory)) {\n\t\t\t\t\tsvc = this.createService(svc);\n\t\t\t\t} else {\n\t\t\t\t\t// If broker is started, call the started lifecycle event of service\n\t\t\t\t\tif (this.started)\n\t\t\t\t\t\tthis._restartService(svc);\n\t\t\t\t}\n\n\t\t\t} else if (schema) {\n\t\t\t\t// Schema object\n\t\t\t\tsvc = this.createService(schema);\n\t\t\t}\n\n\t\t\tif (svc) {\n\t\t\t\tsvc.__filename = fName;\n\t\t\t}\n\n\t\t\treturn svc;\n\n\t\t} catch (e) {\n\t\t\tthis.logger.error(`Failed to load service '${filePath}'`, e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Create a new service by schema\n\t *\n\t * @param {any} schema\tSchema of service or a Service class\n\t * @param {any=} schemaMods\tModified schema\n\t * @returns {Service}\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tcreateService(schema, schemaMods) {\n\t\tlet service;\n\n\t\tschema = this.normalizeSchemaConstructor(schema);\n\t\tif (Object.prototype.isPrototypeOf.call(this.ServiceFactory, schema)) {\n\t\t\tservice = new schema(this, schemaMods);\n\t\t} else {\n\t\t\tlet s = schema;\n\t\t\tif (schemaMods)\n\t\t\t\ts = this.ServiceFactory.mergeSchemas(schema, schemaMods);\n\n\t\t\tservice = new this.ServiceFactory(this, s);\n\t\t}\n\n\t\t// If broker has started yet, call the started lifecycle event of service\n\t\tif (this.started)\n\t\t\tthis._restartService(service);\n\n\t\treturn service;\n\t}\n\n\t/**\n\t * Restart a hot-reloaded service after creation.\n\t *\n\t * @param {Service} service\n\t * @returns {Promise}\n\t * @memberof ServiceBroker\n\t * @private\n\t */\n\t_restartService(service) {\n\t\treturn service._start.call(service)\n\t\t\t.catch(err => this.logger.error(\"Unable to start service.\", err));\n\t}\n\n\t/**\n\t * Add a local service instance\n\t *\n\t * @param {Service} service\n\t * @memberof ServiceBroker\n\t */\n\taddLocalService(service) {\n\t\tthis.services.push(service);\n\t\tthis.metrics.set(METRIC.MOLECULER_BROKER_LOCAL_SERVICES_TOTAL, this.services.length);\n\t}\n\n\t/**\n\t * Register a local service to Service Registry\n\t *\n\t * @param {Object} registryItem\n\t * @memberof ServiceBroker\n\t */\n\tregisterLocalService(registryItem) {\n\t\tthis.registry.registerLocalService(registryItem);\n\t}\n\n\t/**\n\t * Destroy a local service\n\t *\n\t * @param {Service|string|object} service\n\t * @returns Promise<void>\n\t * @memberof ServiceBroker\n\t */\n\tdestroyService(service) {\n\t\tlet serviceName;\n\t\tlet serviceVersion;\n\t\tif (utils.isString(service)) {\n\t\t\tserviceName = service;\n\t\t\tservice = this.getLocalService(service);\n\t\t} else if (utils.isPlainObject(service)) {\n\t\t\tserviceName = service.name;\n\t\t\tserviceVersion  = service.version;\n\t\t\tservice = this.getLocalService(service.name, service.version);\n\t\t}\n\n\t\tif (!service) {\n\t\t\treturn this.Promise.reject(new E.ServiceNotFoundError({ service: serviceName, version: serviceVersion }));\n\t\t}\n\n\t\treturn this.Promise.resolve()\n\t\t\t.then(() => service._stop())\n\t\t\t.catch(err => {\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tthis.logger.error(`Unable to stop '${service.fullName}' service.`, err);\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tutils.removeFromArray(this.services, service);\n\t\t\t\tthis.registry.unregisterService(service.fullName, this.nodeID);\n\n\t\t\t\tthis.logger.info(`Service '${service.fullName}' is stopped.`);\n\t\t\t\tthis.servicesChanged(true);\n\n\t\t\t\tthis.metrics.set(METRIC.MOLECULER_BROKER_LOCAL_SERVICES_TOTAL, this.services.length);\n\t\t\t});\n\t}\n\n\t/**\n\t * It will be called when a new local or remote service\n\t * is registered or unregistered.\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tservicesChanged(localService = false) {\n\t\tthis.broadcastLocal(\"$services.changed\", { localService });\n\n\t\t// Should notify remote nodes, because our service list is changed.\n\t\tif (this.started && localService && this.transit) {\n\t\t\tthis.registry.discoverer.sendLocalNodeInfo();\n\t\t}\n\t}\n\n\t/**\n\t * Register internal services\n\t * @param {Object?} opts\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tregisterInternalServices(opts) {\n\t\topts = utils.isObject(opts) ? opts : {};\n\t\tthis.createService(require(\"./internals\")(this), opts[\"$node\"]);\n\t}\n\n\t/**\n\t * Get a local service by name\n\t *\n\t * Example:\n\t * \tgetLocalService(\"v2.posts\");\n\t * \tgetLocalService({ name: \"posts\", version: 2 });\n\t *\n\t * @param {String|ServiceSearchObj} name\n\t * @param {String|Number?} version\n\t * @returns {Service}\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tgetLocalService(name, version) {\n\t\tif (arguments.length == 1) {\n\t\t\tif (utils.isString(name))\n\t\t\t\treturn this.services.find(service => service.fullName == name);\n\t\t\telse if (utils.isPlainObject(name))\n\t\t\t\treturn this.services.find(service => service.name == name.name && service.version == name.version);\n\t\t}\n\t\t// Deprecated\n\t\treturn this.services.find(service => service.name == name && service.version == version);\n\t}\n\n\t/**\n\t * Wait for other services\n\t *\n\t * @param {String|Array<String>} serviceNames\n\t * @param {Number} timeout Timeout in milliseconds\n\t * @param {Number} interval Check interval in milliseconds\n\t * @returns {Promise}\n\t *\n\t * @memberof ServiceBroker\n\t */\n\twaitForServices(serviceNames, timeout, interval, logger = this.logger) {\n\t\tif (!Array.isArray(serviceNames))\n\t\t\tserviceNames = [serviceNames];\n\n\t\tserviceNames = _.uniq(_.compact(serviceNames.map(x => {\n\t\t\tif (utils.isPlainObject(x) && x.name)\n\t\t\t\treturn this.ServiceFactory.getVersionedFullName(x.name, x.version);\n\n\t\t\tif (utils.isString(x))\n\t\t\t\treturn x;\n\t\t})));\n\n\t\tif (serviceNames.length == 0)\n\t\t\treturn this.Promise.resolve();\n\n\t\tlogger.info(`Waiting for service(s) '${serviceNames.join(\", \")}'...`);\n\n\t\tconst startTime = Date.now();\n\t\treturn new this.Promise((resolve, reject) => {\n\t\t\tconst check = () => {\n\t\t\t\tconst count = serviceNames.filter(fullName => {\n\t\t\t\t\treturn this.registry.hasService(fullName);\n\t\t\t\t});\n\n\t\t\t\tif (count.length == serviceNames.length) {\n\t\t\t\t\tlogger.info(`Service(s) '${serviceNames.join(\", \")}' are available.`);\n\t\t\t\t\treturn resolve();\n\t\t\t\t}\n\n\t\t\t\tlogger.debug(`${count.length} of ${serviceNames.length} services are available. Waiting further...`);\n\n\t\t\t\tif (timeout && Date.now() - startTime > timeout)\n\t\t\t\t\treturn reject(new E.MoleculerServerError(\"Services waiting is timed out.\", 500, \"WAITFOR_SERVICES\", { services: serviceNames }));\n\n\t\t\t\tsetTimeout(check, interval || this.options.dependencyInterval || 1000);\n\t\t\t};\n\n\t\t\tcheck();\n\t\t});\n\t}\n\n\t/**\n\t * Find the next available endpoint for action\n\t *\n\t * @param {String} actionName\n\t * @param {Object?} opts\n\t * @param {Context?} ctx\n\t * @returns {Endpoint|Error}\n\t *\n\t * @performance-critical\n\t * @memberof ServiceBroker\n\t */\n\tfindNextActionEndpoint(actionName, opts, ctx) {\n\t\tif (typeof actionName !== \"string\") {\n\t\t\treturn actionName;\n\t\t} else {\n\t\t\tif (opts && opts.nodeID) {\n\t\t\t\tconst nodeID = opts.nodeID;\n\t\t\t\t// Direct call\n\t\t\t\tconst endpoint = this.registry.getActionEndpointByNodeId(actionName, nodeID);\n\t\t\t\tif (!endpoint) {\n\t\t\t\t\tthis.logger.warn(`Service '${actionName}' is not found on '${nodeID}' node.`);\n\t\t\t\t\treturn new E.ServiceNotFoundError({ action: actionName, nodeID });\n\t\t\t\t}\n\t\t\t\treturn endpoint;\n\n\t\t\t} else {\n\t\t\t\t// Get endpoint list by action name\n\t\t\t\tconst epList = this.registry.getActionEndpoints(actionName);\n\t\t\t\tif (!epList) {\n\t\t\t\t\tthis.logger.warn(`Service '${actionName}' is not registered.`);\n\t\t\t\t\treturn new E.ServiceNotFoundError({ action: actionName });\n\t\t\t\t}\n\n\t\t\t\t// Get the next available endpoint\n\t\t\t\tconst endpoint = epList.next(ctx);\n\t\t\t\tif (!endpoint) {\n\t\t\t\t\tconst errMsg = `Service '${actionName}' is not available.`;\n\t\t\t\t\tthis.logger.warn(errMsg);\n\t\t\t\t\treturn new E.ServiceNotAvailableError({ action: actionName });\n\t\t\t\t}\n\t\t\t\treturn endpoint;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Call an action\n\t *\n\t * @param {String} actionName\tname of action\n\t * @param {Object?} params\t\tparams of action\n\t * @param {Object?} opts\t\toptions of call (optional)\n\t * @returns {Promise}\n\t *\n\t * @performance-critical\n\t * @memberof ServiceBroker\n\t */\n\tcall(actionName, params, opts = {}) {\n\t\tif (params === undefined)\n\t\t\tparams = {}; // Backward compatibility\n\n\t\t// Create context\n\t\tlet ctx;\n\t\tif (opts.ctx != null) {\n\n\t\t\tconst endpoint = this.findNextActionEndpoint(actionName, opts, opts.ctx);\n\t\t\tif (endpoint instanceof Error) {\n\t\t\t\treturn this.Promise.reject(endpoint).catch(err => this.errorHandler(err, { actionName, params, opts }));\n\t\t\t}\n\n\t\t\t// Reused context\n\t\t\tctx = opts.ctx;\n\t\t\tctx.endpoint = endpoint;\n\t\t\tctx.nodeID = endpoint.id;\n\t\t\tctx.action = endpoint.action;\n\t\t\tctx.service = endpoint.action.service;\n\t\t} else {\n\t\t\t// New root context\n\t\t\tctx = this.ContextFactory.create(this, null, params, opts);\n\n\t\t\tconst endpoint = this.findNextActionEndpoint(actionName, opts, ctx);\n\t\t\tif (endpoint instanceof Error) {\n\t\t\t\treturn this.Promise.reject(endpoint).catch(err => this.errorHandler(err, { actionName, params, opts }));\n\t\t\t}\n\n\t\t\tctx.setEndpoint(endpoint);\n\t\t}\n\n\t\tif (ctx.endpoint.local)\n\t\t\tthis.logger.debug(\"Call action locally.\", { action: ctx.action.name, requestID: ctx.requestID });\n\t\telse\n\t\t\tthis.logger.debug(\"Call action on remote node.\", { action: ctx.action.name, nodeID: ctx.nodeID, requestID: ctx.requestID });\n\n\t\t//this.setCurrentContext(ctx);\n\n\t\tlet p = ctx.endpoint.action.handler(ctx);\n\n\t\t// Pointer to Context\n\t\tp.ctx = ctx;\n\n\t\treturn p;\n\t}\n\n\t/**\n\t * Call an action without built-in balancer.\n\t * You don't call it directly. Broker will replace the\n\t * original 'call' method to this if you disable the\n\t * built-in balancer with the \"disableBalancer\" option.\n\t *\n\t * @param {String} actionName\tname of action\n\t * @param {Object?} params\t\tparams of action\n\t * @param {Object?} opts \t\toptions of call (optional)\n\t * @returns {Promise}\n\t *\n\t * @private\n\t * @memberof ServiceBroker\n\t */\n\tcallWithoutBalancer(actionName, params, opts = {}) {\n\t\tif (params === undefined)\n\t\t\tparams = {}; // Backward compatibility\n\n\t\tlet nodeID = null;\n\t\tlet endpoint = null;\n\t\tif (typeof actionName !== \"string\") {\n\t\t\tendpoint = actionName;\n\t\t\tactionName = endpoint.action.name;\n\t\t\tnodeID = endpoint.id;\n\t\t} else {\n\t\t\tif (opts.nodeID) {\n\t\t\t\tnodeID = opts.nodeID;\n\t\t\t\tendpoint = this.registry.getActionEndpointByNodeId(actionName, nodeID);\n\t\t\t\tif (!endpoint) {\n\t\t\t\t\tthis.logger.warn(`Service '${actionName}' is not found on '${nodeID}' node.`);\n\t\t\t\t\treturn this.Promise.reject(new E.ServiceNotFoundError({ action: actionName, nodeID })).catch(err => this.errorHandler(err, { nodeID, actionName, params, opts }));\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Get endpoint list by action name\n\t\t\t\tconst epList = this.registry.getActionEndpoints(actionName);\n\t\t\t\tif (epList == null) {\n\t\t\t\t\tthis.logger.warn(`Service '${actionName}' is not registered.`);\n\t\t\t\t\treturn this.Promise.reject(new E.ServiceNotFoundError({ action: actionName })).catch(err => this.errorHandler(err, { actionName, params, opts }));\n\n\t\t\t\t}\n\n\t\t\t\tendpoint = epList.getFirst();\n\t\t\t\tif (endpoint == null) {\n\t\t\t\t\tconst errMsg = `Service '${actionName}' is not available.`;\n\t\t\t\t\tthis.logger.warn(errMsg);\n\t\t\t\t\treturn this.Promise.reject(new E.ServiceNotAvailableError({ action: actionName })).catch(err => this.errorHandler(err, { actionName, params, opts }));\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Create context\n\t\tlet ctx;\n\t\tif (opts.ctx != null) {\n\t\t\t// Reused context\n\t\t\tctx = opts.ctx;\n\t\t\tif (endpoint) {\n\t\t\t\tctx.endpoint = endpoint;\n\t\t\t\tctx.action = endpoint.action;\n\t\t\t}\n\t\t} else {\n\t\t\t// New root context\n\t\t\tctx = this.ContextFactory.create(this, endpoint, params, opts);\n\t\t}\n\t\tctx.nodeID = nodeID;\n\n\t\tthis.logger.debug(\"Call action on a node.\", { action: ctx.action.name, nodeID: ctx.nodeID, requestID: ctx.requestID });\n\n\t\tlet p = endpoint.action.remoteHandler(ctx);\n\n\t\t// Pointer to Context\n\t\tp.ctx = ctx;\n\n\t\treturn p;\n\t}\n\n\t_getLocalActionEndpoint(actionName, ctx) {\n\t\t// Find action by name\n\t\tlet epList = this.registry.getActionEndpoints(actionName);\n\t\tif (epList == null || !epList.hasLocal()) {\n\t\t\tthis.logger.warn(`Service '${actionName}' is not registered locally.`);\n\t\t\tthrow new E.ServiceNotFoundError({ action: actionName, nodeID: this.nodeID });\n\t\t}\n\n\t\t// Get local endpoint\n\t\tlet endpoint = epList.nextLocal(ctx);\n\t\tif (!endpoint) {\n\t\t\tthis.logger.warn(`Service '${actionName}' is not available locally.`);\n\t\t\tthrow new E.ServiceNotAvailableError({ action: actionName, nodeID: this.nodeID });\n\t\t}\n\n\t\treturn endpoint;\n\t}\n\n\t/**\n\t * Multiple action calls.\n\t *\n\t * @param {Array<Object>|Object} def Calling definitions.\n\t * @returns {Promise<Array<Object>|Object>}\n\t *\n\t * @example\n\t * Call `mcall` with an array:\n\t * ```js\n\t * broker.mcall([\n\t * \t{ action: \"posts.find\", params: { limit: 5, offset: 0 } },\n\t * \t{ action: \"users.find\", params: { limit: 5, sort: \"username\" }, opts: { timeout: 500 } }\n\t * ]).then(results => {\n\t * \tlet posts = results[0];\n\t * \tlet users = results[1];\n\t * })\n\t * ```\n\t *\n\t * @example\n\t * Call `mcall` with an Object:\n\t * ```js\n\t * broker.mcall({\n\t * \tposts: { action: \"posts.find\", params: { limit: 5, offset: 0 } },\n\t * \tusers: { action: \"users.find\", params: { limit: 5, sort: \"username\" }, opts: { timeout: 500 } }\n\t * }).then(results => {\n\t * \tlet posts = results.posts;\n\t * \tlet users = results.users;\n\t * })\n\t * ```\n\t * @throws MoleculerServerError - If the `def` is not an `Array` and not an `Object`.\n\t * @memberof ServiceBroker\n\t */\n\tmcall(def, opts) {\n\t\tif (Array.isArray(def)) {\n\t\t\treturn this.Promise.all(def.map(item => this.call(item.action, item.params, item.options || opts)));\n\n\t\t} else if (utils.isObject(def)) {\n\t\t\tlet results = {};\n\t\t\tlet promises = Object.keys(def).map(name => {\n\t\t\t\tconst item = def[name];\n\t\t\t\tconst options = item.options || opts;\n\t\t\t\treturn this.call(item.action, item.params, options).then(res => results[name] = res);\n\t\t\t});\n\n\t\t\tlet p = this.Promise.all(promises);\n\n\t\t\t// Pointer to Context\n\t\t\tp.ctx = promises.map(promise => promise.ctx);\n\n\t\t\treturn p.then(() => results);\n\t\t} else {\n\t\t\treturn this.Promise.reject(new E.MoleculerServerError(\"Invalid calling definition.\", 500, \"INVALID_PARAMETERS\"));\n\t\t}\n\t}\n\n\n\t/**\n\t * Emit an event (grouped & balanced global event)\n\t *\n\t * @param {string} eventName\n\t * @param {any?} payload\n\t * @param {Object?} opts\n\t * @returns {Promise<any>}\n\t *\n\t * @memberof ServiceBroker\n\t */\n\temit(eventName, payload, opts) {\n\t\tif (Array.isArray(opts) || utils.isString(opts))\n\t\t\topts = { groups: opts };\n\t\telse if (opts == null)\n\t\t\topts = {};\n\n\t\tif (opts.groups && !Array.isArray(opts.groups))\n\t\t\topts.groups = [opts.groups];\n\n\t\tconst promises = [];\n\n\t\tconst ctx = this.ContextFactory.create(this, null, payload, opts);\n\t\tctx.eventName = eventName;\n\t\tctx.eventType = \"emit\";\n\t\tctx.eventGroups = opts.groups;\n\n\t\tthis.logger.debug(`Emit '${eventName}' event`+ (opts.groups ? ` to '${opts.groups.join(\", \")}' group(s)` : \"\") + \".\");\n\n\t\t// Call local/internal subscribers\n\t\tif (/^\\$/.test(eventName))\n\t\t\tthis.localBus.emit(eventName, payload);\n\n\t\tif (!this.options.disableBalancer) {\n\n\t\t\tconst endpoints = this.registry.events.getBalancedEndpoints(eventName, opts.groups);\n\n\t\t\t// Grouping remote events (reduce the network traffic)\n\t\t\tconst groupedEP = {};\n\n\t\t\tendpoints.forEach(([ep, group]) => {\n\t\t\t\tif (ep.id == this.nodeID) {\n\t\t\t\t\t// Local service, call handler\n\t\t\t\t\tconst newCtx = ctx.copy(ep);\n\t\t\t\t\tpromises.push(this.registry.events.callEventHandler(newCtx));\n\t\t\t\t} else {\n\t\t\t\t\t// Remote service\n\t\t\t\t\tconst e = groupedEP[ep.id];\n\t\t\t\t\tif (e)\n\t\t\t\t\t\te.groups.push(group);\n\t\t\t\t\telse\n\t\t\t\t\t\tgroupedEP[ep.id] = {\n\t\t\t\t\t\t\tep,\n\t\t\t\t\t\t\tgroups: [group]\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (this.transit) {\n\t\t\t\t// Remote service\n\t\t\t\t_.forIn(groupedEP, item => {\n\t\t\t\t\tconst newCtx = ctx.copy(item.ep);\n\t\t\t\t\tnewCtx.eventGroups = item.groups;\n\t\t\t\t\tpromises.push(this.transit.sendEvent(newCtx));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.Promise.all(promises);\n\n\t\t} else if (this.transit) {\n\t\t\t// Disabled balancer case\n\t\t\tlet groups = opts.groups;\n\n\t\t\tif (!groups || groups.length == 0) {\n\t\t\t\t// Apply to all groups\n\t\t\t\tgroups = this.getEventGroups(eventName);\n\t\t\t}\n\n\t\t\tif (groups.length == 0)\n\t\t\t\treturn this.Promise.resolve();\n\n\t\t\tctx.eventGroups = groups;\n\t\t\treturn this.transit.sendEvent(ctx);\n\t\t}\n\t}\n\n\t/**\n\t * Broadcast an event for all local & remote services\n\t *\n\t * @param {string} eventName\n\t * @param {any?} payload\n\t * @param {Object?} opts\n\t * @returns {Promise}\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tbroadcast(eventName, payload, opts) {\n\t\tif (Array.isArray(opts) || utils.isString(opts))\n\t\t\topts = { groups: opts };\n\t\telse if (opts == null)\n\t\t\topts = {};\n\n\t\tif (opts.groups && !Array.isArray(opts.groups))\n\t\t\topts.groups = [opts.groups];\n\n\t\tconst promises = [];\n\n\t\tthis.logger.debug(`Broadcast '${eventName}' event`+ (opts.groups ? ` to '${opts.groups.join(\", \")}' group(s)` : \"\") + \".\");\n\n\t\tif (this.transit) {\n\t\t\tconst ctx = this.ContextFactory.create(this, null, payload, opts);\n\t\t\tctx.eventName = eventName;\n\t\t\tctx.eventType = \"broadcast\";\n\t\t\tctx.eventGroups = opts.groups;\n\n\t\t\tif (!this.options.disableBalancer) {\n\t\t\t\tconst endpoints = this.registry.events.getAllEndpoints(eventName, opts.groups);\n\n\t\t\t\t// Send to remote services\n\t\t\t\tendpoints.forEach(ep => {\n\t\t\t\t\tif (ep.id != this.nodeID) {\n\t\t\t\t\t\tconst newCtx = ctx.copy(ep);\n\t\t\t\t\t\tpromises.push(this.transit.sendEvent(newCtx));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Disabled balancer case\n\t\t\t\tlet groups = opts.groups;\n\n\t\t\t\tif (!groups || groups.length == 0) {\n\t\t\t\t\t// Apply to all groups\n\t\t\t\t\tgroups = this.getEventGroups(eventName);\n\t\t\t\t}\n\n\t\t\t\tif (groups.length == 0)\n\t\t\t\t\treturn; // Return here because balancer disabled, so we can't call the local services.\n\n\t\t\t\tconst endpoints = this.registry.events.getAllEndpoints(eventName, groups);\n\n\t\t\t\t// Return here because balancer disabled, so we can't call the local services.\n\t\t\t\treturn this.Promise.all(endpoints.map(ep => {\n\t\t\t\t\tconst newCtx = ctx.copy(ep);\n\t\t\t\t\tnewCtx.eventGroups = groups;\n\t\t\t\t\treturn this.transit.sendEvent(newCtx);\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\t// Send to local services\n\t\tpromises.push(this.broadcastLocal(eventName, payload, opts));\n\n\t\treturn this.Promise.all(promises);\n\t}\n\n\t/**\n\t * Broadcast an event for all local services\n\t *\n\t * @param {string} eventName\n\t * @param {any?} payload\n\t * @param {Object?} groups\n\t * @returns\n\t *\n\t * @memberof ServiceBroker\n\t */\n\tbroadcastLocal(eventName, payload, opts) {\n\t\tif (Array.isArray(opts) || utils.isString(opts))\n\t\t\topts = { groups: opts };\n\t\telse if (opts == null)\n\t\t\topts = {};\n\n\t\tif (opts.groups && !Array.isArray(opts.groups))\n\t\t\topts.groups = [opts.groups];\n\n\t\tthis.logger.debug(`Broadcast '${eventName}' local event`+ (opts.groups ? ` to '${opts.groups.join(\", \")}' group(s)` : \"\") + \".\");\n\n\t\t// Call internal subscribers\n\t\tif (/^\\$/.test(eventName))\n\t\t\tthis.localBus.emit(eventName, payload);\n\n\t\tconst ctx = this.ContextFactory.create(this, null, payload, opts);\n\t\tctx.eventName = eventName;\n\t\tctx.eventType = \"broadcastLocal\";\n\t\tctx.eventGroups = opts.groups;\n\n\t\treturn this.emitLocalServices(ctx);\n\t}\n\n\t/**\n\t * Send ping to a node (or all nodes if nodeID is null)\n\t *\n\t * @param {String|Array<String>?} nodeID\n\t * @param {Number?} timeout\n\t * @returns {Promise}\n\t * @memberof ServiceBroker\n\t */\n\tping(nodeID, timeout = 2000) {\n\t\tif (this.transit && this.transit.connected) {\n\t\t\tif (utils.isString(nodeID)) {\n\t\t\t\t// Ping a single node\n\t\t\t\treturn new this.Promise(resolve => {\n\n\t\t\t\t\tconst timer = setTimeout(() => {\n\t\t\t\t\t\tthis.localBus.off(\"$node.pong\", handler);\n\t\t\t\t\t\tresolve(null);\n\t\t\t\t\t}, timeout);\n\n\t\t\t\t\tconst handler = pong => {\n\t\t\t\t\t\tif (pong.nodeID == nodeID) {\n\t\t\t\t\t\t\tclearTimeout(timer);\n\t\t\t\t\t\t\tthis.localBus.off(\"$node.pong\", handler);\n\t\t\t\t\t\t\tresolve(pong);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.localBus.on(\"$node.pong\", handler);\n\n\t\t\t\t\tthis.transit.sendPing(nodeID);\n\t\t\t\t});\n\n\t\t\t} else {\n\t\t\t\tconst pongs = {};\n\t\t\t\tlet nodes = nodeID;\n\t\t\t\tif (!nodes) {\n\t\t\t\t\tnodes = this.registry.getNodeList({ onlyAvailable: true })\n\t\t\t\t\t\t.filter(node => node.id != this.nodeID)\n\t\t\t\t\t\t.map(node => node.id);\n\t\t\t\t}\n\n\t\t\t\tnodes.forEach(id => pongs[id] = null);\n\t\t\t\tconst processing = new Set(nodes);\n\n\t\t\t\t// Ping multiple nodes\n\t\t\t\treturn new this.Promise(resolve => {\n\n\t\t\t\t\tconst timer = setTimeout(() => {\n\t\t\t\t\t\tthis.localBus.off(\"$node.pong\", handler);\n\t\t\t\t\t\tresolve(pongs);\n\t\t\t\t\t}, timeout);\n\n\t\t\t\t\tconst handler = pong => {\n\t\t\t\t\t\tpongs[pong.nodeID] = pong;\n\t\t\t\t\t\tprocessing.delete(pong.nodeID);\n\n\t\t\t\t\t\tif (processing.size == 0) {\n\t\t\t\t\t\t\tclearTimeout(timer);\n\t\t\t\t\t\t\tthis.localBus.off(\"$node.pong\", handler);\n\t\t\t\t\t\t\tresolve(pongs);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.localBus.on(\"$node.pong\", handler);\n\n\t\t\t\t\tnodes.forEach(id => this.transit.sendPing(id));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn this.Promise.resolve(nodeID ? null : []);\n\t}\n\n\t/**\n\t * Get local node health status\n\t *\n\t * @returns {Promise}\n\t * @memberof ServiceBroker\n\t */\n\tgetHealthStatus() {\n\t\treturn H.getHealthStatus(this);\n\t}\n\n\t/**\n\t * Get local node info.\n\t *\n\t * @returns\n\t * @memberof ServiceBroker\n\t */\n\tgetLocalNodeInfo() {\n\t\treturn this.registry.getLocalNodeInfo();\n\t}\n\n\t/**\n\t * Get event groups by event name\n\t *\n\t * @param {String} eventName\n\t * @returns\n\t * @memberof ServiceBroker\n\t */\n\tgetEventGroups(eventName) {\n\t\treturn this.registry.events.getGroups(eventName);\n\t}\n\n\t/**\n\t * Has registered event listener for an event name?\n\t *\n\t * @param {String} eventName\n\t * @returns {boolean}\n\t */\n\thasEventListener(eventName) {\n\t\treturn this.registry.events.getAllEndpoints(eventName).length > 0;\n\t}\n\n\t/**\n\t * Get all registered event listener for an event name.\n\t *\n\t * @param {String} eventName\n\t * @returns {Array<Object>}\n\t */\n\tgetEventListeners(eventName) {\n\t\treturn this.registry.events.getAllEndpoints(eventName);\n\t}\n\n\t/**\n\t * Emit event to local nodes. It is called from transit when a remote event received\n\t * or from `broadcastLocal`\n\t *\n\t * @param {Context} ctx\n\t * @returns\n\t * @memberof ServiceBroker\n\t */\n\temitLocalServices(ctx) {\n\t\treturn this.registry.events.emitLocalServices(ctx);\n\t}\n\n\t/**\n\t * Set the current Context to the async storage.\n\t *\n\t * @param {Context} ctx\n\t * @memberof ServiceBroker\n\t *\n\tsetCurrentContext(ctx) {\n\t\tthis.scope.setSessionData(ctx);\n\t}*/\n\n\t/**\n\t * Get the current Context from the async storage.\n\t *\n\t * @returns {Context?}\n\t * @memberof ServiceBroker\n\t *\n\tgetCurrentContext() {\n\t\treturn this.scope.getSessionData();\n\t}*/\n\n\t/**\n\t * Get node overall CPU usage\n\t *\n\t * @returns {Promise<object>}\n\t * @memberof ServiceBroker\n\t */\n\tgetCpuUsage() {\n\t\treturn cpuUsage();\n\t}\n\n\t/**\n\t * Generate an UUID.\n\t *\n\t * @returns {String} uuid\n\t */\n\tgenerateUid() {\n\t\tif (this.options.uidGenerator)\n\t\t\treturn this.options.uidGenerator.call(this, this);\n\n\t\treturn utils.generateToken();\n\t}\n\n\n\t/**\n\t * Get the Constructor name of any object if it exists\n\t * @param {any} obj\n\t * @returns {string}\n\t *\n\t */\n\tgetConstructorName(obj) {\n\t\tlet target = obj.prototype;\n\t\tif (target && target.constructor && target.constructor.name){\n\t\t\treturn target.constructor.name;\n\t\t}\n\t\tif (obj.constructor && obj.constructor.name){\n\t\t\treturn obj.constructor.name;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Ensure the service schema will be prototype of ServiceFactory;\n\t *\n\t * @param {any} schema\n\t * @returns {string}\n\t *\n\t */\n\tnormalizeSchemaConstructor(schema) {\n\t\tif (Object.prototype.isPrototypeOf.call(this.ServiceFactory, schema)) {\n\t\t\treturn schema;\n\t\t}\n\t\t// Sometimes the schame was loaded from another node_module or is a object copy.\n\t\t// Then we will check if the constructor name is the same, asume that is a derivate object\n\t\t// and adjust the prototype of the schema.\n\t\tlet serviceName = this.getConstructorName(this.ServiceFactory);\n\t\tlet target = this.getConstructorName(schema);\n\t\tif (serviceName === target){\n\t\t\tObject.setPrototypeOf(schema, this.ServiceFactory);\n\t\t\treturn schema;\n\t\t}\n\t\t// Depending how the schema was create the correct constructor name (from base class) will be locate on __proto__.\n\t\ttarget = this.getConstructorName(schema.__proto__);\n\t\tif (serviceName === target){\n\t\t\tObject.setPrototypeOf(schema.__proto__, this.ServiceFactory);\n\t\t\treturn schema;\n\t\t}\n\t\t// This is just to handle some idiosyncrasies from Jest.\n\t\tif (schema._isMockFunction){\n\t\t\ttarget = this.getConstructorName(schema.prototype.__proto__);\n\t\t\tif (serviceName === target){\n\t\t\t\tObject.setPrototypeOf(schema, this.ServiceFactory);\n\t\t\t\treturn schema;\n\t\t\t}\n\t\t}\n\t\treturn schema;\n\t}\n}\n\n/**\n * Version of Moleculer\n */\nServiceBroker.MOLECULER_VERSION = require(\"../package.json\").version;\nServiceBroker.prototype.MOLECULER_VERSION = ServiceBroker.MOLECULER_VERSION;\n\n/**\n * Version of Protocol\n */\nServiceBroker.PROTOCOL_VERSION = \"4\";\nServiceBroker.prototype.PROTOCOL_VERSION = ServiceBroker.PROTOCOL_VERSION;\n\n/**\n * Default configuration\n */\nServiceBroker.defaultOptions = defaultOptions;\n\nmodule.exports = ServiceBroker;\n"],"names":["EventEmitter2","require$$0","MetricRegistry","METRIC","require$$1","Tracer","require$$2","defaultOptions","namespace","nodeID","logger","logLevel","transporter","requestTimeout","retryPolicy","enabled","retries","delay","maxDelay","factor","check","err","retryable","contextParamsCloning","maxCallLevel","heartbeatInterval","heartbeatTimeout","tracking","shutdownTimeout","disableBalancer","registry","strategy","preferLocal","circuitBreaker","threshold","windowTime","minRequestCount","halfOpenTime","code","bulkhead","concurrency","maxQueueSize","transit","maxChunkSize","disableReconnect","disableVersionCheck","uidGenerator","errorHandler","cacher","serializer","validator","metrics","tracing","internalServices","internalMiddlewares","dependencyInterval","hotReload","middlewares","replCommands","replDelimiter","metadata","skipProcessEventRegistration","maxSafeObjectSize","ServiceBroker","[object Object]","options","this","_","defaultsDeep","Promise","utils","polyfillPromise","started","ServiceFactory","require$$3","ContextFactory","require$$4","getNodeID","instanceID","generateToken","services","localBus","wildcard","maxListeners","loggerFactory","LoggerFactory","init","getLogger","info","MOLECULER_VERSION","registerMoleculerMetrics","MiddlewareHandler","Registry","Cachers","resolve","name","getConstructorName","Serializers","serializerName","Validators","validatorName","tracer","registerMiddlewares","tx","Transporters","Transit","txName","hasBuiltInBalancer","warn","call","callWithoutBalancer","registerInternalServices","callMiddlewareHookSync","isFunction","created","_closeFn","stop","catch","error","then","process","exit","setMaxListeners","on","fatal","console","userMiddlewares","Array","isArray","length","compact","forEach","mw","add","count","prevCount","middleware","isPlainObject","localAction","createService","wrapMethod","registerLocalService","destroyService","mcall","emit","broadcast","broadcastLocal","set","MOLECULER_BROKER_MIDDLEWARES_TOTAL","isMetricsEnabled","register","MOLECULER_NODE_TYPE","type","TYPE_INFO","description","MOLECULER_NODE_VERSIONS_MOLECULER","MOLECULER_NODE_VERSIONS_PROTOCOL","PROTOCOL_VERSION","MOLECULER_BROKER_NAMESPACE","MOLECULER_BROKER_STARTED","TYPE_GAUGE","MOLECULER_BROKER_LOCAL_SERVICES_TOTAL","startTime","Date","now","callMiddlewareHook","connect","all","map","svc","_start","regenerateLocalRawInfo","ready","duration","humanize","discoverer","sendLocalNodeInfo","reverse","_stop","disconnect","close","stopped","removeListener","repl","require$$5","debug","opts","delimiter","customCommands","handler","bindTo","args","callHandlers","callSyncHandlers","isEnabled","mod","props","bindings","Object","assign","ns","message","needExit","folder","fileMask","serviceFiles","f","path","join","glob","sync","filename","loadService","filePath","fName","schema","require","basename","r","default","normalizeSchemaConstructor","prototype","isPrototypeOf","_restartService","__filename","e","schemaMods","service","s","mergeSchemas","push","registryItem","serviceName","serviceVersion","isString","getLocalService","version","fullName","removeFromArray","unregisterService","servicesChanged","reject","E","ServiceNotFoundError","localService","isObject","require$$6","arguments","find","serviceNames","timeout","interval","uniq","x","getVersionedFullName","filter","hasService","MoleculerServerError","setTimeout","actionName","ctx","endpoint","getActionEndpointByNodeId","action","epList","getActionEndpoints","next","errMsg","ServiceNotAvailableError","params","undefined","findNextActionEndpoint","Error","id","create","setEndpoint","local","requestID","p","getFirst","remoteHandler","hasLocal","nextLocal","def","item","results","promises","keys","res","promise","eventName","payload","groups","eventType","eventGroups","test","endpoints","events","getBalancedEndpoints","groupedEP","ep","group","newCtx","copy","callEventHandler","forIn","sendEvent","getEventGroups","getAllEndpoints","emitLocalServices","connected","timer","off","pong","clearTimeout","sendPing","pongs","nodes","getNodeList","onlyAvailable","node","processing","Set","delete","size","H","getHealthStatus","getLocalNodeInfo","getGroups","cpuUsage","obj","target","constructor","setPrototypeOf","__proto__","_isMockFunction","require$$7"],"mappings":"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"}