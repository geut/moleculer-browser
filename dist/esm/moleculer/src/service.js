import e from"lodash";import t from"./errors.js";import r from"./utils.js";import i from"fn-args";const{ServiceSchemaError:s,MoleculerError:n}=t,{isObject:a,isFunction:c,flatten:o}=r;function h(e){return c(e)?{handler:e}:e}function m(e){return Array.isArray(e)?e:[e]}function l(e){return e.length>0&&-1!==["ctx","context"].indexOf(e[0].toLowerCase())}class d{constructor(e,t){if(!a(e))throw new s("Must set a ServiceBroker instance!");this.broker=e,e&&(this.Promise=e.Promise),t&&this.parseServiceSchema(t)}parseServiceSchema(t){if(!a(t))throw new s("The service schema can't be null. Maybe is it not a service schema?");if(this.originalSchema=e.cloneDeep(t),t.mixins&&(t=d.applyMixins(t)),c(t.merged)?t.merged.call(this,t):Array.isArray(t.merged)&&t.merged.forEach((e=>e.call(this,t))),this.broker.callMiddlewareHookSync("serviceCreating",[this,t]),!t.name)throw console.error("Service name can't be empty! Maybe it is not a valid Service schema. Maybe is it not a service schema?",{schema:t}),new s("Service name can't be empty! Maybe it is not a valid Service schema. Maybe is it not a service schema?",{schema:t});this.name=t.name,this.version=t.version,this.settings=t.settings||{},this.metadata=t.metadata||{},this.schema=t,this.fullName=d.getVersionedFullName(this.name,!0!==this.settings.$noVersionPrefix?this.version:void 0),this.logger=this.broker.getLogger(this.fullName,{svc:this.name,ver:this.version}),this.actions={},this.events={};const r={name:this.name,version:this.version,fullName:this.fullName,settings:this._getPublicSettings(this.settings),metadata:this.metadata,actions:{},events:{}};a(t.methods)&&e.forIn(t.methods,((e,t)=>{if(-1!=["name","version","settings","metadata","dependencies","schema","broker","actions","logger","created","started","stopped","_start","_stop","_init"].indexOf(t))throw new s(`Invalid method name '${t}' in '${this.name}' service!`);this._createMethod(e,t)})),a(t.actions)&&e.forIn(t.actions,((e,t)=>{if(!1===e)return;let i=this._createAction(e,t);r.actions[i.name]=i;const s=this.broker.middlewares.wrapHandler("localAction",i.handler,i),n=this.broker.registry.createPrivateActionEndpoint(i);this.actions[t]=(e,t)=>{let r;return r=t&&t.ctx?t.ctx:this.broker.ContextFactory.create(this.broker,n,e,t||{}),s(r)}})),a(t.events)&&e.forIn(t.events,((e,t)=>{const i=this._createEvent(e,t);r.events[i.name]=i,this.events[i.name]=(e,r)=>{let s;if(r&&r.ctx)s=r.ctx;else{const t={id:this.broker.nodeID,event:i};s=this.broker.ContextFactory.create(this.broker,t,e,r||{})}return s.eventName=t,s.eventType="emit",s.eventGroups=[i.group||this.name],i.handler(s)}})),this._serviceSpecification=r,this._init()}_getPublicSettings(t){return t&&Array.isArray(t.$secureSettings)?e.omit(t,[].concat(t.$secureSettings,["$secureSettings"])):t}_init(){this.logger.debug(`Service '${this.fullName}' is creating...`),c(this.schema.created)?this.schema.created.call(this):Array.isArray(this.schema.created)&&this.schema.created.forEach((e=>e.call(this))),this.broker.addLocalService(this),this.broker.callMiddlewareHookSync("serviceCreated",[this]),this.logger.debug(`Service '${this.fullName}' created.`)}_start(){return this.logger.debug(`Service '${this.fullName}' is starting...`),this.Promise.resolve().then((()=>this.broker.callMiddlewareHook("serviceStarting",[this]))).then((()=>{if(this.schema.dependencies)return this.waitForServices(this.schema.dependencies,this.settings.$dependencyTimeout||0,this.settings.$dependencyInterval||this.broker.options.dependencyInterval)})).then((()=>c(this.schema.started)?this.Promise.method(this.schema.started).call(this):Array.isArray(this.schema.started)?this.schema.started.map((e=>this.Promise.method(e.bind(this)))).reduce(((e,t)=>e.then((()=>t()))),this.Promise.resolve()):void 0)).then((()=>(this.broker.registerLocalService(this._serviceSpecification),null))).then((()=>this.broker.callMiddlewareHook("serviceStarted",[this]))).then((()=>this.logger.info(`Service '${this.fullName}' started.`)))}_stop(){return this.logger.debug(`Service '${this.fullName}' is stopping...`),this.Promise.resolve().then((()=>this.broker.callMiddlewareHook("serviceStopping",[this],{reverse:!0}))).then((()=>{if(c(this.schema.stopped))return this.Promise.method(this.schema.stopped).call(this);if(Array.isArray(this.schema.stopped)){return Array.from(this.schema.stopped).reverse().map((e=>this.Promise.method(e.bind(this)))).reduce(((e,t)=>e.then((()=>t()))),this.Promise.resolve())}return this.Promise.resolve()})).then((()=>this.broker.callMiddlewareHook("serviceStopped",[this],{reverse:!0}))).then((()=>this.logger.info(`Service '${this.fullName}' stopped.`)))}_createAction(t,r){let i;if(c(t))i={handler:t};else{if(!a(t))throw new s(`Invalid action definition in '${r}' action in '${this.fullName}' service!`);i=e.cloneDeep(t)}let n=i.handler;if(!c(n))throw new s(`Missing action handler on '${r}' action in '${this.fullName}' service!`);return i.rawName=i.name||r,!0!==this.settings.$noServiceNamePrefix?i.name=this.fullName+"."+i.rawName:i.name=i.rawName,void 0===i.cache&&void 0!==this.settings.$cache&&(i.cache=this.settings.$cache),i.service=this,i.handler=this.Promise.method(n.bind(this)),i}_createMethod(e,t){let r;if(c(e))r={handler:e};else{if(!a(e))throw new s(`Invalid method definition in '${t}' method in '${this.fullName}' service!`);r=e}if(!c(r.handler))throw new s(`Missing method handler on '${t}' method in '${this.fullName}' service!`);return r.name=t,r.service=this,r.handler=r.handler.bind(this),this[t]=this.broker.middlewares.wrapHandler("localMethod",r.handler,r),r}_createEvent(t,r){let n,o;if(c(t)||Array.isArray(t))n={handler:t};else{if(!a(t))throw new s(`Invalid event definition in '${r}' event in '${this.fullName}' service!`);n=e.cloneDeep(t)}if(!c(n.handler)&&!Array.isArray(n.handler))throw new s(`Missing event handler on '${r}' event in '${this.fullName}' service!`);if(c(n.handler)){const e=i(n.handler);o=this.Promise.method(n.handler),o.__newSignature=!0===n.context||l(e)}else Array.isArray(n.handler)&&(o=n.handler.map((e=>{const t=i(e);return(e=this.Promise.method(e)).__newSignature=!0===n.context||l(t),e})));n.name||(n.name=r),n.service=this;const h=this;return c(o)?n.handler=function(e){return o.apply(h,o.__newSignature?[e]:[e.params,e.nodeID,e.eventName,e])}:Array.isArray(o)&&(n.handler=function(e){return h.Promise.all(o.map((t=>t.apply(h,t.__newSignature?[e]:[e.params,e.nodeID,e.eventName,e]))))}),n}emitLocalEventHandler(e,t,r){return this.events[e]?this.events[e](t,r):Promise.reject(new n(`No '${e}' registered local event handler`,500,"NOT_FOUND_EVENT",{eventName:e}))}waitForServices(e,t,r){return this.broker.waitForServices(e,t,r,this.logger)}static applyMixins(e){if(e.mixins){const t=Array.isArray(e.mixins)?e.mixins:[e.mixins];if(t.length>0){const r=Array.from(t).reverse().reduce(((e,t)=>(t.mixins&&(t=d.applyMixins(t)),e?d.mergeSchemas(e,t):t)),null);return d.mergeSchemas(r,e)}}return e}static mergeSchemas(t,r){const i=e.cloneDeep(t),s=e.cloneDeep(r);return Object.keys(s).forEach((e=>{if(-1!==["name","version"].indexOf(e)&&void 0!==s[e])i[e]=s[e];else if("settings"==e)i[e]=d.mergeSchemaSettings(s[e],i[e]);else if("metadata"==e)i[e]=d.mergeSchemaMetadata(s[e],i[e]);else if("hooks"==e)i[e]=d.mergeSchemaHooks(s[e],i[e]||{});else if("actions"==e)i[e]=d.mergeSchemaActions(s[e],i[e]||{});else if("methods"==e)i[e]=d.mergeSchemaMethods(s[e],i[e]);else if("events"==e)i[e]=d.mergeSchemaEvents(s[e],i[e]||{});else if(-1!==["merged","created","started","stopped"].indexOf(e))i[e]=d.mergeSchemaLifecycleHandlers(s[e],i[e]);else if("mixins"==e)i[e]=d.mergeSchemaUniqArray(s[e],i[e]);else if("dependencies"==e)i[e]=d.mergeSchemaUniqArray(s[e],i[e]);else{const t="mergeSchema"+e.replace(/./,e[0].toUpperCase());c(d[t])?i[e]=d[t](s[e],i[e]):i[e]=d.mergeSchemaUnknown(s[e],i[e])}})),i}static mergeSchemaSettings(t,r){if(r&&r.$secureSettings||t&&t.$secureSettings){const i=t&&t.$secureSettings?t.$secureSettings:[],s=r&&r.$secureSettings?r.$secureSettings:[];r||(r={}),r.$secureSettings=e.uniq([].concat(i,s))}return e.defaultsDeep(t,r)}static mergeSchemaMetadata(t,r){return e.defaultsDeep(t,r)}static mergeSchemaUniqArray(t,r){return e.uniqWith(e.compact(o([t,r])),e.isEqual)}static mergeSchemaDependencies(e,t){return d.mergeSchemaUniqArray(e,t)}static mergeSchemaHooks(t,r){return Object.keys(t).forEach((i=>{null==r[i]&&(r[i]={}),Object.keys(t[i]).forEach((s=>{const n=m(t[i][s]),a=m(r[i][s]);r[i][s]=e.compact(o("before"==i?[a,n]:[n,a]))}))})),r}static mergeSchemaActions(t,r){return Object.keys(t).forEach((i=>{if(!1===t[i]&&r[i])return void delete r[i];const s=h(t[i]),n=h(r[i]);s&&s.hooks&&n&&n.hooks&&Object.keys(s.hooks).forEach((t=>{const r=m(s.hooks[t]),i=m(n.hooks[t]);s.hooks[t]=e.compact(o("before"==t?[i,r]:[r,i]))})),r[i]=e.defaultsDeep(s,n)})),r}static mergeSchemaMethods(e,t){return Object.assign(t||{},e||{})}static mergeSchemaEvents(t,r){return Object.keys(t).forEach((i=>{const s=h(t[i]),n=h(r[i]);let a=e.compact(o([n?n.handler:null,s?s.handler:null]));1==a.length&&(a=a[0]),r[i]=e.defaultsDeep(s,n),r[i].handler=a})),r}static mergeSchemaLifecycleHandlers(t,r){return e.compact(o([r,t]))}static mergeSchemaUnknown(e,t){return void 0!==e?e:t}static getVersionedFullName(e,t){return null!=t?("number"==typeof t?"v"+t:t)+"."+e:e}}var g=d;export default g;
//# sourceMappingURL=service.js.map
