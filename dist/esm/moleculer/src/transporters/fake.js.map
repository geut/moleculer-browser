{"version":3,"file":"fake.js","sources":["../../../../../src/moleculer/src/transporters/fake.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst Transporter \t= require(\"./base\");\n\nconst EventEmitter2 = require(\"eventemitter2\").EventEmitter2;\n\n// Put to global to transfer messages between brokers in the same process\nglobal.bus = new EventEmitter2({\n\twildcard: true,\n\tmaxListeners: 100\n});\n\n/**\n * Fake Transporter\n *\n * @class FakeTransporter\n * @extends {Transporter}\n */\nclass FakeTransporter extends Transporter {\n\n\t/**\n\t * Creates an instance of FakeTransporter.\n\t *\n\t * @param {any} opts\n\t *\n\t * @memberof FakeTransporter\n\t */\n\tconstructor(opts) {\n\t\tsuper(opts);\n\n\t\t// Local event bus\n\t\tthis.bus = global.bus;\n\t\tthis.hasBuiltInBalancer = true;\n\n\t\tthis.subscriptions = [];\n\t}\n\n\t/**\n\t * Connect to a NATS server\n\t *\n\t * @memberof FakeTransporter\n\t */\n\tconnect() {\n\t\treturn this.onConnected();\n\t}\n\n\t/**\n\t * Disconnect from a NATS server\n\t *\n\t * @memberof FakeTransporter\n\t */\n\tdisconnect() {\n\t\tthis.connected = false;\n\t\tthis.subscriptions.forEach(({ topic, handler }) => this.bus.off(topic, handler));\n\t\tthis.subscriptions = [];\n\n\t\treturn this.broker.Promise.resolve();\n\t}\n\n\t/**\n\t * Subscribe to a command\n\t *\n\t * @param {String} cmd\n\t * @param {String} nodeID\n\t *\n\t * @memberof FakeTransporter\n\t */\n\tsubscribe(cmd, nodeID) {\n\t\tconst t = this.getTopicName(cmd, nodeID);\n\t\tconst handler = msg => this.receive(cmd, msg);\n\t\tthis.subscriptions.push({ topic: t, handler });\n\n\t\tthis.bus.on(t, handler);\n\t\treturn this.broker.Promise.resolve();\n\t}\n\n\t/**\n\t * Subscribe to balanced action commands\n\t *\n\t * @param {String} action\n\t * @memberof AmqpTransporter\n\t */\n\tsubscribeBalancedRequest(/*action*/) {\n\t\treturn this.broker.Promise.resolve();\n\t}\n\n\t/**\n\t * Subscribe to balanced event command\n\t *\n\t * @param {String} event\n\t * @param {String} group\n\t * @memberof AmqpTransporter\n\t */\n\tsubscribeBalancedEvent(/*event, group*/) {\n\t\treturn this.broker.Promise.resolve();\n\t}\n\n\t/**\n\t * Send data buffer.\n\t *\n\t * @param {String} topic\n\t * @param {Buffer} data\n\t * @param {Object} meta\n\t *\n\t * @returns {Promise}\n\t */\n\tsend(topic, data) {\n\t\tthis.bus.emit(topic, data);\n\t\treturn this.broker.Promise.resolve();\n\t}\n}\n\nmodule.exports = FakeTransporter;\n"],"names":["EventEmitter2","require$$0","global","bus","wildcard","maxListeners","Transporter","[object Object]","opts","super","this","hasBuiltInBalancer","subscriptions","onConnected","connected","forEach","topic","handler","off","broker","Promise","resolve","cmd","nodeID","t","getTopicName","msg","receive","push","on","data","emit"],"mappings":"6HAUA,MAAMA,EAAgBC,EAAyBD,cAG/CE,EAAOC,IAAM,IAAIH,EAAc,CAC9BI,UAAU,EACVC,aAAc,YASf,cAA8BC,EAS7BC,YAAYC,GACXC,MAAMD,GAGNE,KAAKP,IAAMD,EAAOC,IAClBO,KAAKC,oBAAqB,EAE1BD,KAAKE,cAAgB,GAQtBL,UACC,OAAOG,KAAKG,cAQbN,aAKC,OAJAG,KAAKI,WAAY,EACjBJ,KAAKE,cAAcG,SAAQ,EAAGC,MAAAA,EAAOC,QAAAA,KAAcP,KAAKP,IAAIe,IAAIF,EAAOC,KACvEP,KAAKE,cAAgB,GAEdF,KAAKS,OAAOC,QAAQC,UAW5Bd,UAAUe,EAAKC,GACd,MAAMC,EAAId,KAAKe,aAAaH,EAAKC,GAC3BN,EAAUS,GAAOhB,KAAKiB,QAAQL,EAAKI,GAIzC,OAHAhB,KAAKE,cAAcgB,KAAK,CAAEZ,MAAOQ,EAAGP,QAAAA,IAEpCP,KAAKP,IAAI0B,GAAGL,EAAGP,GACRP,KAAKS,OAAOC,QAAQC,UAS5Bd,2BACC,OAAOG,KAAKS,OAAOC,QAAQC,UAU5Bd,yBACC,OAAOG,KAAKS,OAAOC,QAAQC,UAY5Bd,KAAKS,EAAOc,GAEX,OADApB,KAAKP,IAAI4B,KAAKf,EAAOc,GACdpB,KAAKS,OAAOC,QAAQC"}