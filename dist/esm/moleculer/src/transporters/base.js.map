{"version":3,"file":"base.js","sources":["../../../../../src/moleculer/src/transporters/base.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst _\t= require(\"lodash\");\nconst P = require(\"../packets\");\nconst { flatten } = require(\"../utils\");\nconst { BrokerDisconnectedError } = require(\"../errors\");\n\n/**\n * Base Transporter class\n *\n * @class BaseTransporter\n */\nclass BaseTransporter {\n\n\t/**\n\t * Creates an instance of BaseTransporter.\n\t *\n\t * @param {any} opts\n\t *\n\t * @memberof BaseTransporter\n\t */\n\tconstructor(opts) {\n\t\tthis.opts = opts;\n\t\tthis.connected = false;\n\t\tthis.hasBuiltInBalancer = false;\n\t}\n\n\t/**\n\t * Init transporter\n\t *\n\t * @param {Transit} transit\n\t * @param {Function} messageHandler\n\t * @param {Function} afterConnect\n\t *\n\t * @memberof BaseTransporter\n\t */\n\tinit(transit, messageHandler, afterConnect) {\n\t\tif (transit) {\n\t\t\tthis.transit = transit;\n\t\t\tthis.broker = transit.broker;\n\t\t\tthis.nodeID = transit.nodeID;\n\t\t\tthis.logger = this.broker.getLogger(\"transporter\");\n\n\t\t\tthis.prefix = \"MOL\";\n\t\t\tif (this.broker.namespace)\n\t\t\t\tthis.prefix += \"-\" + this.broker.namespace;\n\n\t\t}\n\t\tthis.messageHandler = messageHandler;\n\t\tthis.afterConnect = afterConnect;\n\t}\n\n\t/**\n\t * Connect to the transporter server\n\t *\n\t * @memberof BaseTransporter\n\t */\n\tconnect() {\n\t\t/* istanbul ignore next */\n\t\tthrow new Error(\"Not implemented!\");\n\t}\n\n\t/**\n\t * Event handler for connected.\n\t *\n\t * @param {any} wasReconnect\n\t * @returns {Promise}\n\t *\n\t * @memberof BaseTransporter\n\t */\n\tonConnected(wasReconnect) {\n\t\tthis.connected = true;\n\t\tif (this.afterConnect) {\n\t\t\treturn this.afterConnect(wasReconnect);\n\t\t}\n\n\t\treturn this.broker.Promise.resolve();\n\t}\n\n\t/**\n\t * Disconnect from the transporter server\n\t *\n\t * @memberof BaseTransporter\n\t */\n\tdisconnect() {\n\t\t/* istanbul ignore next */\n\t\tthrow new Error(\"Not implemented!\");\n\t}\n\n\t/**\n\t * Subscribe to all topics\n\t *\n\t * @param {Array<Object>} topics\n\t *\n\t * @memberof BaseTransporter\n\t */\n\tmakeSubscriptions(topics) {\n\t\treturn this.broker.Promise.all(topics.map(({ cmd, nodeID }) => this.subscribe(cmd, nodeID)));\n\t}\n\n\t/**\n\t * Process incoming messages\n\t *\n\t * @param {String} cmd\n\t * @param {Buffer} msg\n\t * @returns\n\t * @memberof BaseTransporter\n\t */\n\tincomingMessage(cmd, msg) {\n\t\tif (!msg) return;\n\t\ttry {\n\t\t\tconst packet = this.deserialize(cmd, msg);\n\t\t\treturn this.messageHandler(cmd, packet);\n\t\t} catch(err) {\n\t\t\tthis.logger.warn(\"Invalid incoming packet. Type:\", cmd, err);\n\t\t\tthis.logger.debug(\"Content:\", msg.toString ? msg.toString() : msg);\n\t\t}\n\t}\n\n\t/**\n\t * Received data. It's a wrapper for middlewares.\n\t * @param {String} cmd\n\t * @param {Buffer} data\n\t */\n\treceive(cmd, data) {\n\t\treturn this.incomingMessage(cmd, data);\n\t}\n\n\t/**\n\t * Subscribe to a command\n\t *\n\t * @param {String} cmd\n\t * @param {String} nodeID\n\t *\n\t * @memberof BaseTransporter\n\t */\n\tsubscribe(/*cmd, nodeID*/) {\n\t\t/* istanbul ignore next */\n\t\tthrow new Error(\"Not implemented!\");\n\t}\n\n\t/**\n\t * Subscribe to balanced action commands\n\t *\n\t * @param {String} action\n\t * @memberof AmqpTransporter\n\t */\n\tsubscribeBalancedRequest(/*action*/) {\n\t\t/* istanbul ignore next */\n\t\tthrow new Error(\"Not implemented!\");\n\t}\n\n\t/**\n\t * Subscribe to balanced event command\n\t *\n\t * @param {String} event\n\t * @param {String} group\n\t * @memberof AmqpTransporter\n\t */\n\tsubscribeBalancedEvent(/*event, group*/) {\n\t\t/* istanbul ignore next */\n\t\tthrow new Error(\"Not implemented!\");\n\t}\n\n\t/**\n\t * Unsubscribe all balanced request and event commands\n\t *\n\t * @memberof BaseTransporter\n\t */\n\tunsubscribeFromBalancedCommands() {\n\t\t/* istanbul ignore next */\n\t\treturn this.broker.Promise.resolve();\n\t}\n\n\t/**\n\t * Publish a normal not balanced packet\n\t *\n\t * @param {Packet} packet\n\t * @returns {Promise}\n\t *\n\t * @memberof BaseTransporter\n\t */\n\tpublish(packet) {\n\t\tconst topic = this.getTopicName(packet.type, packet.target);\n\t\tconst data = this.serialize(packet);\n\n\t\treturn this.send(topic, data, { packet });\n\t}\n\n\t/**\n\t * Publish a balanced EVENT packet to a balanced queue\n\t *\n\t * @param {Packet} packet\n\t * @param {String} group\n\t * @returns {Promise}\n\t *\n\t * @memberof BaseTransporter\n\t */\n\tpublishBalancedEvent(packet, group) {\n\t\tconst topic = `${this.prefix}.${P.PACKET_EVENT}B.${group}.${packet.payload.event}`;\n\t\tconst data = this.serialize(packet);\n\n\t\treturn this.send(topic, data, { packet, balanced: true });\n\t}\n\n\t/**\n\t * Publish a balanced REQ packet to a balanced queue\n\t *\n\t * @param {Packet} packet\n\t * @returns {Promise}\n\t *\n\t * @memberof BaseTransporter\n\t */\n\tpublishBalancedRequest(packet) {\n\t\tconst topic = `${this.prefix}.${P.PACKET_REQUEST}B.${packet.payload.action}`;\n\t\tconst data = this.serialize(packet);\n\n\t\treturn this.send(topic, data, { packet, balanced: true });\n\t}\n\n\t/**\n\t * Send data buffer.\n\t *\n\t * @param {String} topic\n\t * @param {Buffer} data\n\t * @param {Object} meta\n\t *\n\t * @returns {Promise}\n\t */\n\tsend(/*topic, data, meta*/) {\n\t\tthrow new Error(\"Not implemented!\");\n\t}\n\n\t/**\n\t * Get topic name from command & target nodeID\n\t *\n\t * @param {any} cmd\n\t * @param {any} nodeID\n\t *\n\t * @memberof BaseTransporter\n\t */\n\tgetTopicName(cmd, nodeID) {\n\t\treturn this.prefix + \".\" + cmd + (nodeID ? \".\" + nodeID : \"\");\n\t}\n\n\t/**\n\t * Initialize queues for REQUEST & EVENT packets.\n\t *\n\t * @memberof AmqpTransporter\n\t */\n\tmakeBalancedSubscriptions() {\n\t\tif (!this.hasBuiltInBalancer) return this.broker.Promise.resolve();\n\n\t\treturn this.unsubscribeFromBalancedCommands().then(() => {\n\t\t\tconst services = this.broker.getLocalNodeInfo().services;\n\t\t\treturn this.broker.Promise.all(services.map(service => {\n\t\t\t\tconst p = [];\n\n\t\t\t\t// Service actions queues\n\t\t\t\tif (service.actions && typeof(service.actions) == \"object\") {\n\t\t\t\t\tp.push(Object.keys(service.actions).map(action => this.subscribeBalancedRequest(action)));\n\t\t\t\t}\n\n\t\t\t\t// Load-balanced/grouped events queues\n\t\t\t\tif (service.events && typeof(service.events) == \"object\") {\n\t\t\t\t\tp.push(Object.keys(service.events).map(event => {\n\t\t\t\t\t\tconst group = service.events[event].group || service.name;\n\t\t\t\t\t\tthis.subscribeBalancedEvent(event, group);\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t\treturn this.broker.Promise.all(_.compact(flatten(p, true)));\n\t\t\t}));\n\t\t});\n\t}\n\n\t/**\n\t * Prepublish a packet. Handle balancing.\n\t *\n\t * @param {Packet} packet\n\t * @returns {Promise}\n\t * @memberof BaseTransporter\n\t */\n\tprepublish(packet) {\n\t\t// Safely handle disconnected state\n\t\tif (!this.connected) {\n\t\t\t// For packets that are triggered intentionally by users, throw a retryable error.\n\t\t\tif ([P.PACKET_REQUEST, P.PACKET_EVENT, P.PACKET_PING].includes(packet.type)) {\n\t\t\t\treturn this.broker.Promise.reject(new BrokerDisconnectedError());\n\t\t\t}\n\n\t\t\t// For internal packets like INFO and HEARTBEATS, skip sending and don't throw\n\t\t\telse {\n\t\t\t\treturn this.broker.Promise.resolve();\n\t\t\t}\n\t\t}\n\n\t\tif (packet.type === P.PACKET_EVENT && packet.target == null && packet.payload.groups) {\n\t\t\tconst groups = packet.payload.groups;\n\t\t\t// If the packet contains groups, we don't send the packet to\n\t\t\t// the targetted node, but we push them to the event group queues\n\t\t\t// and AMQP will load-balanced it.\n\t\t\tif (groups.length > 0) {\n\t\t\t\tgroups.forEach(group => {\n\t\t\t\t\t// Change the groups to this group to avoid multi handling in consumers.\n\t\t\t\t\tpacket.payload.groups = [group];\n\t\t\t\t\tthis.publishBalancedEvent(packet, group);\n\t\t\t\t});\n\t\t\t\treturn this.broker.Promise.resolve();\n\t\t\t}\n\t\t\t// If it's not contain, then it is a broadcasted event,\n\t\t\t// we sent it in the normal way (exchange)\n\n\t\t} else if (packet.type === P.PACKET_REQUEST && packet.target == null) {\n\t\t\treturn this.publishBalancedRequest(packet);\n\t\t}\n\n\t\t// Normal packet publishing...\n\t\treturn this.publish(packet);\n\t}\n\n\t/**\n\t * Serialize the Packet to Buffer\n\t *\n\t * @param {Packet} packet\n\t * @returns {Buffer}\n\t *\n\t * @memberof Transit\n\t */\n\tserialize(packet) {\n\t\tpacket.payload.ver = this.broker.PROTOCOL_VERSION;\n\t\tpacket.payload.sender = this.nodeID;\n\t\treturn this.broker.serializer.serialize(packet.payload, packet.type);\n\t}\n\n\t/**\n\t * Deserialize the incoming Buffer to Packet\n\t *\n\t * @param {String} type\n\t * @param {Buffer} buf\n\t * @returns {Packet}\n\t *\n\t * @memberof Transit\n\t */\n\tdeserialize(type, buf) {\n\t\tif (buf == null) return null;\n\n\t\tconst msg = this.broker.serializer.deserialize(buf, type);\n\t\treturn new P.Packet(type, null, msg);\n\n\t}\n}\n\nmodule.exports = BaseTransporter;\n"],"names":["flatten","require$$0","BrokerDisconnectedError","require$$1","[object Object]","opts","this","connected","hasBuiltInBalancer","transit","messageHandler","afterConnect","broker","nodeID","logger","getLogger","prefix","namespace","Error","wasReconnect","Promise","resolve","topics","all","map","cmd","subscribe","msg","packet","deserialize","err","warn","debug","toString","data","incomingMessage","topic","getTopicName","type","target","serialize","send","group","P","PACKET_EVENT","payload","event","balanced","PACKET_REQUEST","action","unsubscribeFromBalancedCommands","then","services","getLocalNodeInfo","service","p","actions","push","Object","keys","subscribeBalancedRequest","events","name","subscribeBalancedEvent","_","compact","PACKET_PING","includes","reject","groups","length","forEach","publishBalancedEvent","publishBalancedRequest","publish","ver","PROTOCOL_VERSION","sender","serializer","buf","Packet"],"mappings":"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"}