import t from"lodash";import e from"../utils.js";import s from"./base.js";import i from"crypto";import h from"lru-cache";const{isFunction:r}=e;var n=class extends s{constructor(e,s,i){super(e,s,i),this.opts=t.defaultsDeep(i,{shardKey:null,vnodes:10,ringSize:null,cacheSize:1e3}),this.cache=new h({max:this.opts.cacheSize,maxAge:null}),this.needRebuild=!0,this.ring=[],s.localBus.on("$node.**",(()=>this.needRebuild=!0))}getKeyFromContext(e){return this.opts.shardKey?r(this.opts.shardKey)?this.opts.shardKey.call(this,e):this.opts.shardKey.startsWith("#")?t.get(e.meta,this.opts.shardKey.slice(1)):t.get(e.params,this.opts.shardKey):null}select(e,s){let i=this.getKeyFromContext(s);if(null!=i){this.needRebuild&&this.rebuild(e);const t=this.getNodeIDByKey(i);if(t)return e.find((e=>e.id==t))}return e[t.random(0,e.length-1)]}getNodeIDByKey(t){if(this.cache){const e=this.cache.get(t);if(e)return e}const e=this.getHash(t.toString());let s;const i=this.ring.length;for(let t=0;t<i;t++)if(e<=this.ring[t].key){s=this.ring[t];break}return s?(this.cache&&this.cache.set(t,s.nodeID),s.nodeID):null}getHash(t){const e=i.createHash("md5").update(t).digest("hex"),s=parseInt(e.substring(0,8),16);return this.opts.ringSize?s%this.opts.ringSize:s}rebuild(t){this.cache.reset(),this.ring=[];const e=t.map((t=>t.id)).sort(),s=e.length*this.opts.vnodes,i=this.opts.ringSize?this.opts.ringSize:Math.pow(2,32),h=i/s;for(let t=0;t<this.opts.vnodes;t++)for(let t=0;t<e.length;t++){const s=e[t];this.ring.push({key:Math.floor(h*(this.ring.length+1)),nodeID:s})}this.ring[this.ring.length-1].key=i,this.needRebuild=!1}};export default n;
//# sourceMappingURL=shard.js.map
