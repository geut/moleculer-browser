{"version":3,"file":"latency.js","sources":["../../../../../src/moleculer/src/strategies/latency.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst { random } = require(\"lodash\");\nconst BaseStrategy = require(\"./base\");\n\n/**\n * Lowest latency invocation strategy\n *\n * Since Strategy can be instantiated multiple times, therefore,\n * we need to have a \"master\" instance to send ping, and each\n * individual \"slave\" instance will update their list dynamically\n *\n * These options can be configured in broker registry options:\n *\n * const broker = new ServiceBroker({\n * \tlogger: true,\n * \tregistry: {\n * \t\tstrategy: \"LatencyStrategy\",\n * \t\tstrategyOptions: {\n * \t\t\tsampleCount: 5,\n * \t\t\tlowLatency: 10,\n * \t\t\tcollectCount: 5,\n * \t\t\tpingInterval: 10\n * \t\t}\n * \t}\n * });\n *\n * @class LatencyStrategy\n */\nclass LatencyStrategy extends BaseStrategy {\n\n\tconstructor(registry, broker, opts) {\n\t\tsuper(registry, broker, opts);\n\n\t\tthis.opts = _.defaultsDeep(opts, {\n\t\t\tsampleCount: 5,\n\t\t\tlowLatency: 10,\n\t\t\tcollectCount: 5,\n\t\t\tpingInterval: 10\n\t\t});\n\n\t\tthis.brokerStopped = false;\n\n\t\tthis.hostAvgLatency = new Map();\n\n\t\t/* hostMap contains:\n\t\t\thostname => {\n\t\t\t\thistoricLatency: [],\n\t\t\t\tnodeList: []\n\t\t\t}\n\t\t*/\n\t\tthis.hostMap = new Map();\n\n\t\t// short circuit\n\t\tif (!this.broker.transit) return;\n\n\t\tif (this.broker.localBus.listenerCount(\"$node.latencyMaster\") === 0) {\n\t\t\t// claim as master\n\t\t\tthis.broker.localBus.on(\"$node.latencyMaster\", function() {});\n\t\t\t// respond to PONG\n\t\t\tthis.broker.localBus.on(\"$node.pong\", this.processPong.bind(this));\n\t\t\t// dynamically add new node\n\t\t\tthis.broker.localBus.on(\"$node.connected\", this.addNode.bind(this));\n\t\t\t// dynamically remove node\n\t\t\tthis.broker.localBus.on(\"$node.disconnected\", this.removeHostMap.bind(this));\n\t\t\t// try to discovery all nodes on start up\n\t\t\tthis.broker.localBus.on(\"$broker.started\", this.discovery.bind(this));\n\t\t\t// clean up ourselves\n\t\t\tthis.broker.localBus.on(\"$broker.stopped\", () => this.brokerStopped = true);\n\t\t} else {\n\t\t\t// remove node if we are told by master\n\t\t\tthis.broker.localBus.on(\"$node.latencySlave.removeHost\", this.removeHostLatency.bind(this));\n\t\t}\n\n\t\tthis.broker.localBus.on(\"$node.latencySlave\", this.updateLatency.bind(this));\n\t}\n\n\t// Master\n\tdiscovery() {\n\t\treturn this.broker.transit.sendPing().then(() => {\n\t\t\tconst timer = setTimeout(() => this.pingHosts(), 1000 * this.opts.pingInterval);\n\t\t\ttimer.unref();\n\t\t});\n\t}\n\n\t// Master\n\tpingHosts() {\n\n\t\t/* istanbul ignore next */\n\t\tif (this.brokerStopped) return;\n\t\t/*\n\t\t\tSmart Ping: only ping the host, not the nodes (which may be many)\n\n\t\t\tAlthough, if that particular node on the host is overloaded,\n\t\t\tthe measurement may be skewed.\n\t\t*/\n\t\tconst hosts = Array.from(this.hostMap.values());\n\n\t\treturn this.broker.Promise.all(hosts.map(host => { // TODO: missing concurency: 5, here was bluebird Promise.map\n\t\t\t// Select a nodeID randomly\n\t\t\tconst nodeID = host.nodeList[random(0, host.nodeList.length - 1)];\n\t\t\treturn this.broker.transit.sendPing(nodeID);\n\t\t})).then(() => {\n\t\t\tconst timer = setTimeout(() => this.pingHosts(), 1000 * this.opts.pingInterval);\n\t\t\ttimer.unref();\n\t\t});\n\t}\n\n\t// Master\n\tprocessPong(payload) {\n\t\tlet node = this.registry.nodes.get(payload.nodeID);\n\n\t\t/* istanbul ignore next */\n\t\tif (!node) return;\n\n\t\tlet info = this.getHostLatency(node);\n\n\t\tif (info.historicLatency.length > (this.opts.collectCount - 1))\n\t\t\tinfo.historicLatency.shift();\n\n\t\tinfo.historicLatency.push(payload.elapsedTime);\n\n\t\tconst avgLatency = info.historicLatency.reduce((sum, latency) => sum + latency, 0) / info.historicLatency.length;\n\n\t\tthis.broker.localBus.emit(\"$node.latencySlave\", {\n\t\t\thostname: node.hostname,\n\t\t\tavgLatency: avgLatency\n\t\t});\n\t}\n\n\t// Master\n\tgetHostLatency(node) {\n\t\tlet info = this.hostMap.get(node.hostname);\n\t\tif (typeof info === \"undefined\") {\n\t\t\tinfo = {\n\t\t\t\thistoricLatency: [],\n\t\t\t\tnodeList: [ node.id ]\n\t\t\t};\n\t\t\tthis.hostMap.set(node.hostname, info);\n\t\t}\n\t\treturn info;\n\t}\n\n\t// Master\n\taddNode(payload) {\n\t\tlet node = payload.node;\n\n\t\t// each host may have multiple nodes\n\t\tlet info = this.getHostLatency(node);\n\t\tif (info.nodeList.indexOf(node.id) === -1) {\n\t\t\tinfo.nodeList.push(node.id);\n\t\t}\n\t}\n\n\t// Master\n\tremoveHostMap(payload) {\n\t\tlet node = payload.node;\n\n\t\tlet info = this.hostMap.get(node.hostname);\n\t\t// This exists to make sure that we don't get an \"undefined\",\n\t\t// \ttherefore the test coverage here is unnecessary.\n\t\t/* istanbul ignore next */\n\t\tif (typeof info === \"undefined\") return;\n\n\t\tinfo.nodeList = info.nodeList.filter(id => id !== node.id);\n\n\t\tif (info.nodeList.length == 0) {\n\t\t\t// only remove the host if the last node disconnected\n\t\t\tthis.broker.localBus.emit(\"$node.latencySlave.removeHost\", node.hostname);\n\t\t\tthis.hostMap.delete(node.hostname);\n\t\t}\n\t}\n\n\t// Master + Slave\n\tupdateLatency(payload) {\n\t\tthis.hostAvgLatency.set(payload.hostname, payload.avgLatency);\n\t}\n\n\t// Slave\n\tremoveHostLatency(hostname) {\n\t\tthis.hostAvgLatency.delete(hostname);\n\t}\n\n\t/**\n\t * Select an endpoint by network latency\n\t *\n\t * @param {Array<Endpoint>} list\n\t * @returns {Endpoint}\n\t * @memberof LatencyStrategy\n\t */\n\tselect(list) {\n\t\tlet minEp = null;\n\t\tlet minLatency = null;\n\n\t\tconst sampleCount = this.opts.sampleCount;\n\t\tconst count = sampleCount <= 0 || sampleCount > list.length ? list.length : sampleCount;\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tlet ep;\n\t\t\t// Get random endpoint\n\t\t\tif (count == list.length) {\n\t\t\t\tep = list[i];\n\t\t\t} else {\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tep = list[random(0, list.length - 1)];\n\t\t\t}\n\t\t\tconst epLatency = this.hostAvgLatency.get(ep.node.hostname);\n\n\t\t\t// Check latency of endpoint\n\t\t\tif (typeof epLatency !== \"undefined\") {\n\n\t\t\t\tif (epLatency < this.opts.lowLatency)\n\t\t\t\t\treturn ep;\n\n\t\t\t\tif (!minEp || !minLatency || epLatency < minLatency) {\n\t\t\t\t\tminLatency = epLatency;\n\t\t\t\t\tminEp = ep;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return the lowest latency\n\t\tif (minEp) {\n\t\t\treturn minEp;\n\t\t}\n\n\t\t// Return a random item (no latency data)\n\t\treturn list[random(0, list.length - 1)];\n\t}\n}\n\nmodule.exports = LatencyStrategy;\n"],"names":["BaseStrategy"],"mappings":"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"}