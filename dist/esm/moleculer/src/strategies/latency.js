import{setTimeout as t}from"timers-browserify";import e from"lodash";import s from"./base.js";const{random:o}=e;var n=class extends s{constructor(t,s,o){super(t,s,o),this.opts=e.defaultsDeep(o,{sampleCount:5,lowLatency:10,collectCount:5,pingInterval:10}),this.brokerStopped=!1,this.hostAvgLatency=new Map,this.hostMap=new Map,this.broker.transit&&(0===this.broker.localBus.listenerCount("$node.latencyMaster")?(this.broker.localBus.on("$node.latencyMaster",(function(){})),this.broker.localBus.on("$node.pong",this.processPong.bind(this)),this.broker.localBus.on("$node.connected",this.addNode.bind(this)),this.broker.localBus.on("$node.disconnected",this.removeHostMap.bind(this)),this.broker.localBus.on("$broker.started",this.discovery.bind(this)),this.broker.localBus.on("$broker.stopped",(()=>this.brokerStopped=!0))):this.broker.localBus.on("$node.latencySlave.removeHost",this.removeHostLatency.bind(this)),this.broker.localBus.on("$node.latencySlave",this.updateLatency.bind(this)))}discovery(){return this.broker.transit.sendPing().then((()=>{t((()=>this.pingHosts()),1e3*this.opts.pingInterval).unref()}))}pingHosts(){if(this.brokerStopped)return;const e=Array.from(this.hostMap.values());return this.broker.Promise.all(e.map((t=>{const e=t.nodeList[o(0,t.nodeList.length-1)];return this.broker.transit.sendPing(e)}))).then((()=>{t((()=>this.pingHosts()),1e3*this.opts.pingInterval).unref()}))}processPong(t){let e=this.registry.nodes.get(t.nodeID);if(!e)return;let s=this.getHostLatency(e);s.historicLatency.length>this.opts.collectCount-1&&s.historicLatency.shift(),s.historicLatency.push(t.elapsedTime);const o=s.historicLatency.reduce(((t,e)=>t+e),0)/s.historicLatency.length;this.broker.localBus.emit("$node.latencySlave",{hostname:e.hostname,avgLatency:o})}getHostLatency(t){let e=this.hostMap.get(t.hostname);return void 0===e&&(e={historicLatency:[],nodeList:[t.id]},this.hostMap.set(t.hostname,e)),e}addNode(t){let e=t.node,s=this.getHostLatency(e);-1===s.nodeList.indexOf(e.id)&&s.nodeList.push(e.id)}removeHostMap(t){let e=t.node,s=this.hostMap.get(e.hostname);void 0!==s&&(s.nodeList=s.nodeList.filter((t=>t!==e.id)),0==s.nodeList.length&&(this.broker.localBus.emit("$node.latencySlave.removeHost",e.hostname),this.hostMap.delete(e.hostname)))}updateLatency(t){this.hostAvgLatency.set(t.hostname,t.avgLatency)}removeHostLatency(t){this.hostAvgLatency.delete(t)}select(t){let e=null,s=null;const n=this.opts.sampleCount,i=n<=0||n>t.length?t.length:n;for(let n=0;n<i;n++){let r;r=i==t.length?t[n]:t[o(0,t.length-1)];const h=this.hostAvgLatency.get(r.node.hostname);if(void 0!==h){if(h<this.opts.lowLatency)return r;(!e||!s||h<s)&&(s=h,e=r)}}return e||t[o(0,t.length-1)]}};export default n;
//# sourceMappingURL=latency.js.map
