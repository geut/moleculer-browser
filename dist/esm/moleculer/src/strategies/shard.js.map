{"version":3,"file":"shard.js","sources":["../../../../../src/moleculer/src/strategies/shard.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst _ = require(\"lodash\");\nconst BaseStrategy = require(\"./base\");\nconst crypto = require(\"crypto\");\nconst LRU = require(\"lru-cache\");\nconst { isFunction } = require(\"../utils\");\n\n/**\n * Sharding invocation strategy\n *\n * Using consistent-hashing. More info: https://www.toptal.com/big-data/consistent-hashing\n *\n * @class ShardStrategy\n */\nclass ShardStrategy extends BaseStrategy {\n\n\tconstructor(registry, broker, opts) {\n\t\tsuper(registry, broker, opts);\n\n\t\tthis.opts = _.defaultsDeep(opts, {\n\t\t\tshardKey: null,\n\t\t\tvnodes: 10,\n\t\t\tringSize: null,\n\t\t\tcacheSize: 1000\n\t\t});\n\n\t\tthis.cache = new LRU({\n\t\t\tmax: this.opts.cacheSize,\n\t\t\tmaxAge: null\n\t\t});\n\n\t\tthis.needRebuild = true;\n\t\tthis.ring = [];\n\n\t\tbroker.localBus.on(\"$node.**\", () => this.needRebuild = true);\n\t}\n\n\t/**\n\t * Get key field value from Context.\n\t *\n\t * @param {Context} ctx\n\t * @returns {any}\n\t * @memberof ShardStrategy\n\t */\n\tgetKeyFromContext(ctx) {\n\t\tif (!this.opts.shardKey)  return null;\n\n\t\tif (isFunction(this.opts.shardKey))\n\t\t\treturn this.opts.shardKey.call(this, ctx);\n\n\t\tif (this.opts.shardKey.startsWith(\"#\"))\n\t\t\treturn _.get(ctx.meta, this.opts.shardKey.slice(1));\n\n\t\treturn _.get(ctx.params, this.opts.shardKey);\n\t}\n\n\t/**\n\t * Select an endpoint by sharding.\n\t *\n\t * @param {Array<Endpoint>} list\n\t * @param {Context} ctx\n\t * @returns {Endpoint}\n\t * @memberof ShardStrategy\n\t */\n\tselect(list, ctx) {\n\t\tlet key = this.getKeyFromContext(ctx);\n\t\tif (key != null) {\n\t\t\tif (this.needRebuild)\n\t\t\t\tthis.rebuild(list);\n\n\t\t\tconst nodeID = this.getNodeIDByKey(key);\n\t\t\tif (nodeID)\n\t\t\t\treturn list.find(ep => ep.id == nodeID);\n\t\t}\n\n\t\t// Return a random item (no key)\n\t\treturn list[_.random(0, list.length - 1)];\n\t}\n\n\t/**\n\t * Get nodeID by a hashed numeric key.\n\t *\n\t * @param {Number} key\n\t * @returns {String}\n\t * @memberof ShardStrategy\n\t */\n\tgetNodeIDByKey(key) {\n\t\tif (this.cache) {\n\t\t\tconst cached = this.cache.get(key);\n\t\t\tif (cached) return cached;\n\t\t}\n\n\t\tconst hashNum = this.getHash(key.toString());\n\n\t\tlet found;\n\t\tconst ringLen = this.ring.length;\n\t\tfor(let i = 0; i < ringLen; i++) {\n\t\t\tif (hashNum <= this.ring[i].key) {\n\t\t\t\tfound = this.ring[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (found) {\n\t\t\tif (this.cache)\n\t\t\t\tthis.cache.set(key, found.nodeID);\n\t\t\treturn found.nodeID;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Calculate 8 bit integer hash from string key based on MD5 hash.\n\t *\n\t * @param {String} key\n\t * @returns {Number}\n\t * @memberof ShardStrategy\n\t */\n\tgetHash(key) {\n\t\tconst hash = crypto.createHash(\"md5\").update(key).digest(\"hex\");\n\t\tconst hashNum = parseInt(hash.substring(0,8), 16);\n\t\treturn this.opts.ringSize ? hashNum % this.opts.ringSize : hashNum;\n\t}\n\n\t/**\n\t * Rebuild the node hashring.\n\t *\n\t * @param {Array<Endpoint>} list\n\t * @memberof ShardStrategy\n\t */\n\trebuild(list) {\n\t\tthis.cache.reset();\n\t\tthis.ring = [];\n\n\t\tconst arr = list\n\t\t\t.map(ep => ep.id)\n\t\t\t.sort();\n\n\t\tconst total = arr.length * this.opts.vnodes;\n\t\tconst ringSize = this.opts.ringSize ? this.opts.ringSize : Math.pow(2, 32);\n\t\tconst slice = ringSize / total;\n\n\t\tfor (let j = 0; j < this.opts.vnodes; j++) {\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tconst nodeID = arr[i];\n\t\t\t\tthis.ring.push({\n\t\t\t\t\tkey: Math.floor(slice * (this.ring.length + 1)),\n\t\t\t\t\tnodeID: nodeID\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Set the latest value to the last slice.\n\t\tthis.ring[this.ring.length - 1].key = ringSize;\n\n\t\tthis.needRebuild = false;\n\t}\n\n}\n\nmodule.exports = ShardStrategy;\n"],"names":["isFunction","require$$0","BaseStrategy","[object Object]","registry","broker","opts","super","this","_","defaultsDeep","shardKey","vnodes","ringSize","cacheSize","cache","LRU","max","maxAge","needRebuild","ring","localBus","on","ctx","call","startsWith","get","meta","slice","params","list","key","getKeyFromContext","rebuild","nodeID","getNodeIDByKey","find","ep","id","random","length","cached","hashNum","getHash","toString","found","ringLen","i","set","hash","crypto","createHash","update","digest","parseInt","substring","reset","arr","map","sort","total","Math","pow","j","push","floor"],"mappings":"yHAYA,MAAMA,WAAEA,GAAeC,QASvB,cAA4BC,EAE3BC,YAAYC,EAAUC,EAAQC,GAC7BC,MAAMH,EAAUC,EAAQC,GAExBE,KAAKF,KAAOG,EAAEC,aAAaJ,EAAM,CAChCK,SAAU,KACVC,OAAQ,GACRC,SAAU,KACVC,UAAW,MAGZN,KAAKO,MAAQ,IAAIC,EAAI,CACpBC,IAAKT,KAAKF,KAAKQ,UACfI,OAAQ,OAGTV,KAAKW,aAAc,EACnBX,KAAKY,KAAO,GAEZf,EAAOgB,SAASC,GAAG,YAAY,IAAMd,KAAKW,aAAc,IAUzDhB,kBAAkBoB,GACjB,OAAKf,KAAKF,KAAKK,SAEXX,EAAWQ,KAAKF,KAAKK,UACjBH,KAAKF,KAAKK,SAASa,KAAKhB,KAAMe,GAElCf,KAAKF,KAAKK,SAASc,WAAW,KAC1BhB,EAAEiB,IAAIH,EAAII,KAAMnB,KAAKF,KAAKK,SAASiB,MAAM,IAE1CnB,EAAEiB,IAAIH,EAAIM,OAAQrB,KAAKF,KAAKK,UARF,KAmBlCR,OAAO2B,EAAMP,GACZ,IAAIQ,EAAMvB,KAAKwB,kBAAkBT,GACjC,GAAW,MAAPQ,EAAa,CACZvB,KAAKW,aACRX,KAAKyB,QAAQH,GAEd,MAAMI,EAAS1B,KAAK2B,eAAeJ,GACnC,GAAIG,EACH,OAAOJ,EAAKM,MAAKC,GAAMA,EAAGC,IAAMJ,IAIlC,OAAOJ,EAAKrB,EAAE8B,OAAO,EAAGT,EAAKU,OAAS,IAUvCrC,eAAe4B,GACd,GAAIvB,KAAKO,MAAO,CACf,MAAM0B,EAASjC,KAAKO,MAAMW,IAAIK,GAC9B,GAAIU,EAAQ,OAAOA,EAGpB,MAAMC,EAAUlC,KAAKmC,QAAQZ,EAAIa,YAEjC,IAAIC,EACJ,MAAMC,EAAUtC,KAAKY,KAAKoB,OAC1B,IAAI,IAAIO,EAAI,EAAGA,EAAID,EAASC,IAC3B,GAAIL,GAAWlC,KAAKY,KAAK2B,GAAGhB,IAAK,CAChCc,EAAQrC,KAAKY,KAAK2B,GAClB,MAIF,OAAIF,GACCrC,KAAKO,OACRP,KAAKO,MAAMiC,IAAIjB,EAAKc,EAAMX,QACpBW,EAAMX,QAEP,KAUR/B,QAAQ4B,GACP,MAAMkB,EAAOC,EAAOC,WAAW,OAAOC,OAAOrB,GAAKsB,OAAO,OACnDX,EAAUY,SAASL,EAAKM,UAAU,EAAE,GAAI,IAC9C,OAAO/C,KAAKF,KAAKO,SAAW6B,EAAUlC,KAAKF,KAAKO,SAAW6B,EAS5DvC,QAAQ2B,GACPtB,KAAKO,MAAMyC,QACXhD,KAAKY,KAAO,GAEZ,MAAMqC,EAAM3B,EACV4B,KAAIrB,GAAMA,EAAGC,KACbqB,OAEIC,EAAQH,EAAIjB,OAAShC,KAAKF,KAAKM,OAC/BC,EAAWL,KAAKF,KAAKO,SAAWL,KAAKF,KAAKO,SAAWgD,KAAKC,IAAI,EAAG,IACjElC,EAAQf,EAAW+C,EAEzB,IAAK,IAAIG,EAAI,EAAGA,EAAIvD,KAAKF,KAAKM,OAAQmD,IACrC,IAAK,IAAIhB,EAAI,EAAGA,EAAIU,EAAIjB,OAAQO,IAAK,CACpC,MAAMb,EAASuB,EAAIV,GACnBvC,KAAKY,KAAK4C,KAAK,CACdjC,IAAK8B,KAAKI,MAAMrC,GAASpB,KAAKY,KAAKoB,OAAS,IAC5CN,OAAQA,IAMX1B,KAAKY,KAAKZ,KAAKY,KAAKoB,OAAS,GAAGT,IAAMlB,EAEtCL,KAAKW,aAAc"}