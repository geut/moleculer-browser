{"version":3,"file":"shard.js","sources":["../../../../../src/moleculer/src/strategies/shard.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst _ = require(\"lodash\");\nconst BaseStrategy = require(\"./base\");\nconst crypto = require(\"crypto\");\nconst LRU = require(\"lru-cache\");\nconst { isFunction } = require(\"../utils\");\n\n/**\n * Sharding invocation strategy\n *\n * Using consistent-hashing. More info: https://www.toptal.com/big-data/consistent-hashing\n *\n * @class ShardStrategy\n */\nclass ShardStrategy extends BaseStrategy {\n\n\tconstructor(registry, broker, opts) {\n\t\tsuper(registry, broker, opts);\n\n\t\tthis.opts = _.defaultsDeep(opts, {\n\t\t\tshardKey: null,\n\t\t\tvnodes: 10,\n\t\t\tringSize: null,\n\t\t\tcacheSize: 1000\n\t\t});\n\n\t\tthis.cache = new LRU({\n\t\t\tmax: this.opts.cacheSize,\n\t\t\tmaxAge: null\n\t\t});\n\n\t\tthis.needRebuild = true;\n\t\tthis.ring = [];\n\n\t\tbroker.localBus.on(\"$node.**\", () => this.needRebuild = true);\n\t}\n\n\t/**\n\t * Get key field value from Context.\n\t *\n\t * @param {Context} ctx\n\t * @returns {any}\n\t * @memberof ShardStrategy\n\t */\n\tgetKeyFromContext(ctx) {\n\t\tif (!this.opts.shardKey)  return null;\n\n\t\tif (isFunction(this.opts.shardKey))\n\t\t\treturn this.opts.shardKey.call(this, ctx);\n\n\t\tif (this.opts.shardKey.startsWith(\"#\"))\n\t\t\treturn _.get(ctx.meta, this.opts.shardKey.slice(1));\n\n\t\treturn _.get(ctx.params, this.opts.shardKey);\n\t}\n\n\t/**\n\t * Select an endpoint by sharding.\n\t *\n\t * @param {Array<Endpoint>} list\n\t * @param {Context} ctx\n\t * @returns {Endpoint}\n\t * @memberof ShardStrategy\n\t */\n\tselect(list, ctx) {\n\t\tlet key = this.getKeyFromContext(ctx);\n\t\tif (key != null) {\n\t\t\tif (this.needRebuild)\n\t\t\t\tthis.rebuild(list);\n\n\t\t\tconst nodeID = this.getNodeIDByKey(key);\n\t\t\tif (nodeID)\n\t\t\t\treturn list.find(ep => ep.id == nodeID);\n\t\t}\n\n\t\t// Return a random item (no key)\n\t\treturn list[_.random(0, list.length - 1)];\n\t}\n\n\t/**\n\t * Get nodeID by a hashed numeric key.\n\t *\n\t * @param {Number} key\n\t * @returns {String}\n\t * @memberof ShardStrategy\n\t */\n\tgetNodeIDByKey(key) {\n\t\tif (this.cache) {\n\t\t\tconst cached = this.cache.get(key);\n\t\t\tif (cached) return cached;\n\t\t}\n\n\t\tconst hashNum = this.getHash(key.toString());\n\n\t\tlet found;\n\t\tconst ringLen = this.ring.length;\n\t\tfor(let i = 0; i < ringLen; i++) {\n\t\t\tif (hashNum <= this.ring[i].key) {\n\t\t\t\tfound = this.ring[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (found) {\n\t\t\tif (this.cache)\n\t\t\t\tthis.cache.set(key, found.nodeID);\n\t\t\treturn found.nodeID;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Calculate 8 bit integer hash from string key based on MD5 hash.\n\t *\n\t * @param {String} key\n\t * @returns {Number}\n\t * @memberof ShardStrategy\n\t */\n\tgetHash(key) {\n\t\tconst hash = crypto.createHash(\"md5\").update(key).digest(\"hex\");\n\t\tconst hashNum = parseInt(hash.substring(0,8), 16);\n\t\treturn this.opts.ringSize ? hashNum % this.opts.ringSize : hashNum;\n\t}\n\n\t/**\n\t * Rebuild the node hashring.\n\t *\n\t * @param {Array<Endpoint>} list\n\t * @memberof ShardStrategy\n\t */\n\trebuild(list) {\n\t\tthis.cache.reset();\n\t\tthis.ring = [];\n\n\t\tconst arr = list\n\t\t\t.map(ep => ep.id)\n\t\t\t.sort();\n\n\t\tconst total = arr.length * this.opts.vnodes;\n\t\tconst ringSize = this.opts.ringSize ? this.opts.ringSize : Math.pow(2, 32);\n\t\tconst slice = ringSize / total;\n\n\t\tfor (let j = 0; j < this.opts.vnodes; j++) {\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tconst nodeID = arr[i];\n\t\t\t\tthis.ring.push({\n\t\t\t\t\tkey: Math.floor(slice * (this.ring.length + 1)),\n\t\t\t\t\tnodeID: nodeID\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Set the latest value to the last slice.\n\t\tthis.ring[this.ring.length - 1].key = ringSize;\n\n\t\tthis.needRebuild = false;\n\t}\n\n}\n\nmodule.exports = ShardStrategy;\n"],"names":["require$$0","BaseStrategy"],"mappings":"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"}