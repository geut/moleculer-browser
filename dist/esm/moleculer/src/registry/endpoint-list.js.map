{"version":3,"file":"endpoint-list.js","sources":["../../../../../src/moleculer/src/registry/endpoint-list.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2018 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst _ = require(\"lodash\");\nconst { MoleculerServerError } = require(\"../errors\");\n\n/**\n * Endpoint list class\n *\n * @class EndpointList\n */\nclass EndpointList {\n\n\t/**\n\t * Creates an instance of EndpointList.\n\t * @param {Registry} registry\n\t * @param {ServiceBroker} broker\n\t * @param {String} name\n\t * @param {String} group\n\t * @param {EndPointClass} EndPointFactory\n\t * @param {StrategyClass} StrategyFactory\n\t * @param {Object?} strategyOptions\n\t * @memberof EndpointList\n\t */\n\tconstructor(registry, broker, name, group, EndPointFactory, StrategyFactory, strategyOptions) {\n\t\tthis.registry = registry;\n\t\tthis.broker = broker;\n\t\tthis.logger = registry.logger;\n\t\tthis.strategy = new StrategyFactory(registry, broker, strategyOptions);\n\t\tthis.name = name;\n\t\tthis.group = group;\n\t\tthis.internal = name.startsWith(\"$\");\n\n\t\tthis.EndPointFactory = EndPointFactory;\n\n\t\tthis.endpoints = [];\n\n\t\tthis.localEndpoints = [];\n\t}\n\n\t/**\n\t * Add a new endpoint\n\t *\n\t * @param {Node} node\n\t * @param {Service} service\n\t * @param {any} data\n\t * @returns\n\t * @memberof EndpointList\n\t */\n\tadd(node, service, data) {\n\t\tconst found = this.endpoints.find(ep => ep.node == node && ep.service.name == service.name);\n\t\tif (found) {\n\t\t\tfound.update(data);\n\t\t\treturn found;\n\t\t}\n\n\t\tconst ep = new this.EndPointFactory(this.registry, this.broker, node, service, data);\n\t\tthis.endpoints.push(ep);\n\n\t\tthis.setLocalEndpoints();\n\n\t\treturn ep;\n\t}\n\n\t/**\n\t * Get first endpoint\n\t *\n\t * @returns {Endpoint}\n\t * @memberof EndpointList\n\t */\n\tgetFirst() {\n\t\tif (this.endpoints.length > 0)\n\t\t\treturn this.endpoints[0];\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Select next endpoint with balancer strategy\n\t *\n\t * @param {Array<Endpoint>} list\n\t * @param {Context} ctx\n\t * @returns {Endpoint}\n\t * @memberof EndpointList\n\t */\n\tselect(list, ctx) {\n\t\tconst ret = this.strategy.select(list, ctx);\n\t\tif (!ret) {\n\t\t\t/* istanbul ignore next */\n\t\t\tthrow new MoleculerServerError(\"Strategy returned an invalid endpoint.\", 500, \"INVALID_ENDPOINT\", { strategy: typeof(this.strategy) });\n\t\t}\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Get next endpoint\n\t *\n\t * @param {Context} ctx\n\t * @returns\n\t * @memberof EndpointList\n\t */\n\tnext(ctx) {\n\t\t// No items\n\t\tif (this.endpoints.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If internal (service), return the local always\n\t\tif (this.internal && this.hasLocal()) {\n\t\t\treturn this.nextLocal();\n\t\t}\n\n\t\t// Only 1 item\n\t\tif (this.endpoints.length === 1) {\n\t\t\t// No need to select a node, return the only one\n\t\t\tconst item = this.endpoints[0];\n\t\t\tif (item.isAvailable)\n\t\t\t\treturn item;\n\n\t\t\treturn null;\n\t\t}\n\n\t\t// Search local item\n\t\tif (this.registry.opts.preferLocal === true && this.hasLocal()) {\n\t\t\tconst ep = this.nextLocal(ctx);\n\t\t\tif (ep && ep.isAvailable)\n\t\t\t\treturn ep;\n\t\t}\n\n\t\tconst epList = this.endpoints.filter(ep => ep.isAvailable);\n\t\tif (epList.length == 0)\n\t\t\treturn null;\n\n\t\treturn this.select(epList, ctx);\n\t}\n\n\t/**\n\t * Get next local endpoint\n\t *\n\t * @param {Context} ctx\n\t * @returns\n\t * @memberof EndpointList\n\t */\n\tnextLocal(ctx) {\n\t\t// No items\n\t\tif (this.localEndpoints.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Only 1 item\n\t\tif (this.localEndpoints.length === 1) {\n\t\t\t// No need to select a node, return the only one\n\t\t\tconst item = this.localEndpoints[0];\n\t\t\tif (item.isAvailable)\n\t\t\t\treturn item;\n\n\t\t\treturn null;\n\t\t}\n\n\t\tconst epList = this.localEndpoints.filter(ep => ep.isAvailable);\n\t\tif (epList.length == 0)\n\t\t\treturn null;\n\n\t\treturn this.select(epList, ctx);\n\t}\n\n\t/**\n\t * Check there is available endpoint\n\t *\n\t * @returns\n\t * @memberof EndpointList\n\t */\n\thasAvailable() {\n\t\treturn this.endpoints.find(ep => ep.isAvailable) != null;\n\t}\n\n\t/**\n\t * Check there is local endpoint\n\t *\n\t * @returns\n\t * @memberof EndpointList\n\t */\n\thasLocal() {\n\t\treturn this.localEndpoints.length > 0;\n\t}\n\n\t/**\n\t * Set local endpoint\n\t *\n\t * @memberof EndpointList\n\t */\n\tsetLocalEndpoints() {\n\t\tthis.localEndpoints = this.endpoints.filter(ep => ep.local);\n\t}\n\n\t/**\n\t * Get count of endpoints\n\t *\n\t * @returns\n\t * @memberof EndpointList\n\t */\n\tcount() {\n\t\treturn this.endpoints.length;\n\t}\n\n\t/**\n\t * Get endpoint on a specified node\n\t *\n\t * @param {String} nodeID\n\t * @returns\n\t * @memberof EndpointList\n\t */\n\tgetEndpointByNodeID(nodeID) {\n\t\tconst ep = this.endpoints.find(ep => ep.id == nodeID);\n\t\tif (ep && ep.isAvailable)\n\t\t\treturn ep;\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Check nodeID in the endpoint list\n\t *\n\t * @param {String} nodeID\n\t * @returns\n\t * @memberof EndpointList\n\t */\n\thasNodeID(nodeID) {\n\t\treturn this.endpoints.find(ep => ep.id == nodeID) != null;\n\t}\n\n\t/**\n\t * Remove all endpoints by service\n\t *\n\t * @param {ServiceItem} service\n\t * @memberof EndpointList\n\t */\n\tremoveByService(service) {\n\t\t_.remove(this.endpoints, ep => {\n\t\t\tif (ep.service == service) {\n\t\t\t\tep.destroy();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\tthis.setLocalEndpoints();\n\t}\n\n\t/**\n\t * Remove endpoints by node ID\n\t *\n\t * @param {String} nodeID\n\t * @memberof EndpointList\n\t */\n\tremoveByNodeID(nodeID) {\n\t\t_.remove(this.endpoints, ep => {\n\t\t\tif (ep.id == nodeID) {\n\t\t\t\tep.destroy();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\tthis.setLocalEndpoints();\n\t}\n}\n\nmodule.exports = EndpointList;\n"],"names":["MoleculerServerError","require$$0","[object Object]","registry","broker","name","group","EndPointFactory","StrategyFactory","strategyOptions","this","logger","strategy","internal","startsWith","endpoints","localEndpoints","node","service","data","found","find","ep","update","push","setLocalEndpoints","length","list","ctx","ret","select","hasLocal","nextLocal","item","isAvailable","opts","preferLocal","epList","filter","local","nodeID","id","_","remove","destroy"],"mappings":"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"}