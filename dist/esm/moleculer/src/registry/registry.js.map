{"version":3,"file":"registry.js","sources":["../../../../../src/moleculer/src/registry/registry.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2020 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst utils = require(\"../utils\");\nconst Strategies = require(\"../strategies\");\nconst Discoverers = require(\"./discoverers\");\nconst NodeCatalog = require(\"./node-catalog\");\nconst ServiceCatalog = require(\"./service-catalog\");\nconst EventCatalog = require(\"./event-catalog\");\nconst ActionCatalog = require(\"./action-catalog\");\nconst ActionEndpoint = require(\"./endpoint-action\");\nconst { METRIC }\t\t= require(\"../metrics\");\n\n/**\n * Service Registry\n *\n * @class Registry\n */\nclass Registry {\n\n\t/**\n\t * Creates an instance of Registry.\n\t *\n\t * @param {any} broker\n\t * @memberof Registry\n\t */\n\tconstructor(broker) {\n\t\tthis.broker = broker;\n\t\tthis.metrics = broker.metrics;\n\t\tthis.logger = broker.getLogger(\"registry\");\n\n\t\tthis.opts = Object.assign({}, broker.options.registry);\n\n\t\tthis.StrategyFactory = Strategies.resolve(this.opts.strategy);\n\t\tthis.logger.info(`Strategy: ${this.StrategyFactory.name}`);\n\n\t\tthis.discoverer = Discoverers.resolve(this.opts.discoverer);\n\t\tthis.logger.info(`Discoverer: ${this.broker.getConstructorName(this.discoverer)}`);\n\n\t\tthis.nodes = new NodeCatalog(this, broker);\n\t\tthis.services = new ServiceCatalog(this, broker);\n\t\tthis.actions = new ActionCatalog(this, broker, this.StrategyFactory);\n\t\tthis.events = new EventCatalog(this, broker, this.StrategyFactory);\n\n\t\tthis.registerMoleculerMetrics();\n\t\tthis.updateMetrics();\n\t}\n\n\tinit(broker) {\n\t\tthis.discoverer.init(this);\n\t}\n\n\tstop() {\n\t\treturn this.discoverer.stop();\n\t}\n\n\t/**\n\t * Register Moleculer Core metrics.\n\t */\n\tregisterMoleculerMetrics() {\n\t\tif (!this.broker.isMetricsEnabled()) return;\n\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_REGISTRY_NODES_TOTAL, type: METRIC.TYPE_GAUGE, description: \"Number of registered nodes\" });\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_REGISTRY_NODES_ONLINE_TOTAL, type: METRIC.TYPE_GAUGE, description: \"Number of online nodes\" });\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_REGISTRY_SERVICES_TOTAL, type: METRIC.TYPE_GAUGE, description: \"Number of registered services\" });\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_REGISTRY_SERVICE_ENDPOINTS_TOTAL, type: METRIC.TYPE_GAUGE, labelNames: [\"service\"], description: \"Number of service endpoints\" });\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_REGISTRY_ACTIONS_TOTAL, type: METRIC.TYPE_GAUGE, description: \"Number of registered actions\" });\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_REGISTRY_ACTION_ENDPOINTS_TOTAL, type: METRIC.TYPE_GAUGE, labelNames: [\"action\"], description: \"Number of action endpoints\" });\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_REGISTRY_EVENTS_TOTAL, type: METRIC.TYPE_GAUGE, description: \"Number of registered events\" });\n\t\tthis.metrics.register({ name: METRIC.MOLECULER_REGISTRY_EVENT_ENDPOINTS_TOTAL, type: METRIC.TYPE_GAUGE, labelNames: [\"event\"], description: \"Number of event endpoints\" });\n\t}\n\n\t/**\n\t * Update metrics.\n\t */\n\tupdateMetrics() {\n\t\tif (!this.broker.isMetricsEnabled()) return;\n\n\t\tthis.metrics.set(METRIC.MOLECULER_REGISTRY_NODES_TOTAL, this.nodes.count());\n\t\tthis.metrics.set(METRIC.MOLECULER_REGISTRY_NODES_ONLINE_TOTAL, this.nodes.onlineCount());\n\n\t\tconst services = this.services.list({ grouping: true, onlyLocal: false, onlyAvailable: false, skipInternal: false, withActions: false, withEvents: false });\n\t\tthis.metrics.set(METRIC.MOLECULER_REGISTRY_SERVICES_TOTAL, services.length);\n\t\tservices.forEach(svc => this.metrics.set(METRIC.MOLECULER_REGISTRY_SERVICE_ENDPOINTS_TOTAL, svc.nodes ? svc.nodes.length : 0, { service: svc.fullName }));\n\n\t\tconst actions = this.actions.list({ withEndpoints: true });\n\t\tthis.metrics.set(METRIC.MOLECULER_REGISTRY_ACTIONS_TOTAL, actions.length);\n\t\tactions.forEach(item => this.metrics.set(METRIC.MOLECULER_REGISTRY_ACTION_ENDPOINTS_TOTAL, item.endpoints ? item.endpoints.length : 0, { action: item.name }));\n\n\t\tconst events = this.events.list({ withEndpoints: true });\n\t\tthis.metrics.set(METRIC.MOLECULER_REGISTRY_EVENTS_TOTAL, events.length);\n\t\tevents.forEach(item => this.metrics.set(METRIC.MOLECULER_REGISTRY_EVENT_ENDPOINTS_TOTAL, item.endpoints ? item.endpoints.length : 0, { event: item.name }));\n\t}\n\n\t/**\n\t * Register local service\n\t *\n\t * @param {Service} svc\n\t * @memberof Registry\n\t */\n\tregisterLocalService(svc) {\n\t\tif (!this.services.has(svc.fullName, this.broker.nodeID)) {\n\t\t\tconst service = this.services.add(this.nodes.localNode, svc, true);\n\n\t\t\tif (svc.actions)\n\t\t\t\tthis.registerActions(this.nodes.localNode, service, svc.actions);\n\n\t\t\tif (svc.events)\n\t\t\t\tthis.registerEvents(this.nodes.localNode, service, svc.events);\n\n\t\t\tthis.nodes.localNode.services.push(service);\n\n\t\t\tthis.regenerateLocalRawInfo(this.broker.started);\n\n\t\t\tthis.logger.info(`'${svc.name}' service is registered.`);\n\n\t\t\tthis.broker.servicesChanged(true);\n\t\t\tthis.updateMetrics();\n\t\t}\n\t}\n\n\t/**\n\t * Register remote services\n\t *\n\t * @param {Nodeany} node\n\t * @param {Array} serviceList\n\t * @memberof Registry\n\t */\n\tregisterServices(node, serviceList) {\n\t\tserviceList.forEach(svc => {\n\t\t\tif (!svc.fullName)\n\t\t\t\tsvc.fullName = this.broker.ServiceFactory.getVersionedFullName(svc.name, svc.version);\n\n\t\t\tlet prevActions, prevEvents;\n\t\t\tlet service = this.services.get(svc.fullName, node.id);\n\t\t\tif (!service) {\n\t\t\t\tservice = this.services.add(node, svc, false);\n\t\t\t} else {\n\t\t\t\tprevActions = Object.assign({}, service.actions);\n\t\t\t\tprevEvents = Object.assign({}, service.events);\n\t\t\t\tservice.update(svc);\n\t\t\t}\n\n\t\t\t//Register actions\n\t\t\tif (svc.actions) {\n\t\t\t\tthis.registerActions(node, service, svc.actions);\n\t\t\t}\n\n\t\t\t// remove old actions which is not exist\n\t\t\tif (prevActions) {\n\t\t\t\t_.forIn(prevActions, (action, name) => {\n\t\t\t\t\tif (!svc.actions || !svc.actions[name]) {\n\t\t\t\t\t\tthis.unregisterAction(node, name);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//Register events\n\t\t\tif (svc.events) {\n\t\t\t\tthis.registerEvents(node, service, svc.events);\n\t\t\t}\n\n\t\t\t// remove old events which is not exist\n\t\t\tif (prevEvents) {\n\t\t\t\t_.forIn(prevEvents, (event, name) => {\n\t\t\t\t\tif (!svc.events || !svc.events[name]) {\n\t\t\t\t\t\tthis.unregisterEvent(node, name);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// remove old services which is not exist in new serviceList\n\t\t// Please note! At first, copy the array because you can't remove items inside forEach\n\t\tconst prevServices = Array.from(this.services.services);\n\t\tprevServices.forEach(service => {\n\t\t\tif (service.node != node) return;\n\n\t\t\tlet exist = false;\n\t\t\tserviceList.forEach(svc => {\n\t\t\t\tif (service.equals(svc.fullName))\n\t\t\t\t\texist = true;\n\t\t\t});\n\n\t\t\t// This service is removed on remote node!\n\t\t\tif (!exist) {\n\t\t\t\tthis.unregisterService(service.fullName, node.id);\n\t\t\t}\n\t\t});\n\n\t\tthis.broker.servicesChanged(false);\n\t\tthis.updateMetrics();\n\t}\n\n\t/**\n\t * Check the action visiblity.\n\t *\n\t * \tAvailable values:\n\t * \t\t- \"published\" or `null`: public action and can be published via API Gateway\n\t * \t\t- \"public\": public action, can be called remotely but not published via API GW\n\t * \t\t- \"protected\": can be called from local services\n\t * \t\t- \"private\": can be called from internally via `this.actions.xy()` inside Service\n\t *\n\t * @param {*} action\n\t * @param {*} node\n\t * @returns\n\t * @memberof Registry\n\t */\n\tcheckActionVisibility(action, node) {\n\t\tif (action.visibility == null || action.visibility == \"published\" || action.visibility == \"public\")\n\t\t\treturn true;\n\n\t\tif (action.visibility == \"protected\" && node.local)\n\t\t\treturn true;\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Register service actions\n\t *\n\t * @param {Node} node\n\t * @param {Service} service\n\t * @param {Object} actions\n\t * @memberof Registry\n\t */\n\tregisterActions(node, service, actions) {\n\t\t_.forIn(actions, action => {\n\n\t\t\tif (!this.checkActionVisibility(action, node))\n\t\t\t\treturn;\n\n\t\t\tif (node.local) {\n\t\t\t\taction.handler = this.broker.middlewares.wrapHandler(\"localAction\", action.handler, action);\n\t\t\t} else if (this.broker.transit) {\n\t\t\t\taction.handler = this.broker.middlewares.wrapHandler(\"remoteAction\", this.broker.transit.request.bind(this.broker.transit), { ...action, service });\n\t\t\t}\n\t\t\tif (this.broker.options.disableBalancer && this.broker.transit)\n\t\t\t\taction.remoteHandler = this.broker.middlewares.wrapHandler(\"remoteAction\", this.broker.transit.request.bind(this.broker.transit), { ...action, service });\n\n\t\t\tthis.actions.add(node, service, action);\n\t\t\tservice.addAction(action);\n\t\t});\n\t}\n\n\t/**\n\t * Create a local Endpoint for private actions\n\t *\n\t * @param {Action} action\n\t * @returns {ActionEndpoint}\n\t * @memberof Registry\n\t */\n\tcreatePrivateActionEndpoint(action) {\n\t\treturn new ActionEndpoint(this, this.broker, this.nodes.localNode, action.service, action);\n\t}\n\n\t/**\n\t * Check the service is exist\n\t *\n\t * @param {String} fullName\n\t * @param {String} nodeID\n\t * @returns {Boolean}\n\t * @memberof Registry\n\t */\n\thasService(fullName, nodeID) {\n\t\treturn this.services.has(fullName, nodeID);\n\t}\n\n\t/**\n\t * Get endpoint list of action by name\n\t *\n\t * @param {String} actionName\n\t * @returns {EndpointList}\n\t * @memberof Registry\n\t */\n\tgetActionEndpoints(actionName) {\n\t\treturn this.actions.get(actionName);\n\t}\n\n\t/**\n\t * Get an endpoint of action on a specified node\n\t *\n\t * @param {String} actionName\n\t * @param {String} nodeID\n\t * @returns {Endpoint}\n\t * @memberof Registry\n\t */\n\tgetActionEndpointByNodeId(actionName, nodeID) {\n\t\tconst list = this.actions.get(actionName);\n\t\tif (list)\n\t\t\treturn list.getEndpointByNodeID(nodeID);\n\t}\n\n\t/**\n\t * Unregister service\n\t *\n\t * @param {String} fullName\n\t * @param {String?} nodeID\n\t * @memberof Registry\n\t */\n\tunregisterService(fullName, nodeID) {\n\t\tthis.services.remove(fullName, nodeID || this.broker.nodeID);\n\n\t\tif (!nodeID || nodeID == this.broker.nodeID) {\n\t\t\tthis.regenerateLocalRawInfo(true);\n\t\t}\n\t}\n\n\t/**\n\t * Unregister all services by nodeID\n\t *\n\t * @param {String} nodeID\n\t * @memberof Registry\n\t */\n\tunregisterServicesByNode(nodeID) {\n\t\tthis.services.removeAllByNodeID(nodeID);\n\t}\n\n\t/**\n\t * Unregister an action by node & name\n\t *\n\t * @param {Node} node\n\t * @param {String} actionName\n\t * @memberof Registry\n\t */\n\tunregisterAction(node, actionName) {\n\t\tthis.actions.remove(actionName, node.id);\n\t}\n\n\t/**\n\t * Register service events\n\t *\n\t * @param {Node} node\n\t * @param {ServiceItem} service\n\t * @param {Object} events\n\t * @memberof Registry\n\t */\n\tregisterEvents(node, service, events) {\n\t\t_.forIn(events, event => {\n\n\t\t\tif (node.local)\n\t\t\t\tevent.handler = this.broker.middlewares.wrapHandler(\"localEvent\", event.handler, event);\n\n\t\t\tthis.events.add(node, service, event);\n\t\t\tservice.addEvent(event);\n\t\t});\n\t}\n\n\t/**\n\t * Unregister event by name & node\n\t *\n\t * @param {Node} node\n\t * @param {String} eventName\n\t * @memberof Registry\n\t */\n\tunregisterEvent(node, eventName) {\n\t\tthis.events.remove(eventName, node.id);\n\t}\n\n\t/**\n\t * Generate local raw info for INFO packet\n\t *\n\t * @memberof Registry\n\t */\n\tregenerateLocalRawInfo(incSeq) {\n\t\tlet node = this.nodes.localNode;\n\t\tif (incSeq)\n\t\t\tnode.seq++;\n\n\t\tconst rawInfo = _.pick(node, [\"ipList\", \"hostname\", \"instanceID\", \"client\", \"config\", \"port\", \"seq\", \"metadata\"]);\n\t\tif (this.broker.started)\n\t\t\trawInfo.services = this.services.getLocalNodeServices();\n\t\telse\n\t\t\trawInfo.services = [];\n\n\t\t// Make to be safety\n\t\tnode.rawInfo = utils.safetyObject(rawInfo, this.broker.options);\n\n\t\treturn node.rawInfo;\n\t}\n\n\t/**\n\t * Generate local node info for INFO packets\n\t *\n\t * @returns\n\t * @memberof Registry\n\t */\n\tgetLocalNodeInfo(force) {\n\t\tif (force || !this.nodes.localNode.rawInfo)\n\t\t\treturn this.regenerateLocalRawInfo();\n\n\t\treturn this.nodes.localNode.rawInfo;\n\t}\n\n\t/**\n\t * Generate node info for INFO packets\n\t *\n\t * @returns\n\t * @memberof Registry\n\t */\n\tgetNodeInfo(nodeID) {\n\t\tconst node = this.nodes.get(nodeID);\n\t\tif (!node)\n\t\t\treturn null;\n\n\t\tif (node.local)\n\t\t\treturn this.getLocalNodeInfo();\n\n\t\treturn node.rawInfo;\n\t}\n\n\t/**\n\t * Process an incoming node INFO packet\n\t *\n\t * @param {any} payload\n\t * @returns\n\t * @memberof Registry\n\t */\n\tprocessNodeInfo(payload) {\n\t\treturn this.nodes.processNodeInfo(payload);\n\t}\n\n\t/**\n\t * Get list of registered nodes\n\t *\n\t * @param {object} opts\n\t * @returns\n\t * @memberof Registry\n\t */\n\tgetNodeList(opts) {\n\t\treturn this.nodes.list(opts);\n\t}\n\n\t/**\n\t * Get list of registered services\n\t *\n\t * @param {object} opts\n\t * @returns\n\t * @memberof Registry\n\t */\n\tgetServiceList(opts) {\n\t\treturn this.services.list(opts);\n\t}\n\n\t/**\n\t * Get list of registered actions\n\t *\n\t * @param {object} opts\n\t * @returns\n\t * @memberof Registry\n\t */\n\tgetActionList(opts) {\n\t\treturn this.actions.list(opts);\n\t}\n\n\t/**\n\t * Get list of registered events\n\t *\n\t * @param {object} opts\n\t * @returns\n\t * @memberof Registry\n\t */\n\tgetEventList(opts) {\n\t\treturn this.events.list(opts);\n\t}\n\n\t/**\n\t * Get a raw info list from nodes\n\t *\n\t * @returns {Array<Object>}\n\t * @memberof Registry\n\t */\n\tgetNodeRawList() {\n\t\treturn this.nodes.toArray().map(node => node.rawInfo);\n\t}\n}\n\nmodule.exports = Registry;\n"],"names":["METRIC","require$$0","[object Object]","broker","this","metrics","logger","getLogger","opts","Object","assign","options","registry","StrategyFactory","Strategies","resolve","strategy","info","name","discoverer","Discoverers","getConstructorName","nodes","NodeCatalog","services","ServiceCatalog","actions","ActionCatalog","events","EventCatalog","registerMoleculerMetrics","updateMetrics","init","stop","isMetricsEnabled","register","MOLECULER_REGISTRY_NODES_TOTAL","type","TYPE_GAUGE","description","MOLECULER_REGISTRY_NODES_ONLINE_TOTAL","MOLECULER_REGISTRY_SERVICES_TOTAL","MOLECULER_REGISTRY_SERVICE_ENDPOINTS_TOTAL","labelNames","MOLECULER_REGISTRY_ACTIONS_TOTAL","MOLECULER_REGISTRY_ACTION_ENDPOINTS_TOTAL","MOLECULER_REGISTRY_EVENTS_TOTAL","MOLECULER_REGISTRY_EVENT_ENDPOINTS_TOTAL","set","count","onlineCount","list","grouping","onlyLocal","onlyAvailable","skipInternal","withActions","withEvents","length","forEach","svc","service","fullName","withEndpoints","item","endpoints","action","event","has","nodeID","add","localNode","registerActions","registerEvents","push","regenerateLocalRawInfo","started","servicesChanged","node","serviceList","prevActions","prevEvents","ServiceFactory","getVersionedFullName","version","get","id","update","_","forIn","unregisterAction","unregisterEvent","Array","from","exist","equals","unregisterService","visibility","local","checkActionVisibility","handler","middlewares","wrapHandler","transit","request","bind","disableBalancer","remoteHandler","addAction","ActionEndpoint","actionName","getEndpointByNodeID","remove","removeAllByNodeID","addEvent","eventName","incSeq","seq","rawInfo","pick","getLocalNodeServices","utils","safetyObject","force","getLocalNodeInfo","payload","processNodeInfo","toArray","map"],"mappings":"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"}