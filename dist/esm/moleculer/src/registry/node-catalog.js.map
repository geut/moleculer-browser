{"version":3,"file":"node-catalog.js","sources":["../../../../../src/moleculer/src/registry/node-catalog.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2020 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst _ \t\t\t= require(\"lodash\");\nconst os \t\t\t= require(\"os\");\nconst Node \t\t\t= require(\"./node\");\nconst { getIpList } = require(\"../utils\");\n\n/**\n * Catalog for nodes\n *\n * @class NodeCatalog\n */\nclass NodeCatalog {\n\n\t/**\n\t * Creates an instance of NodeCatalog.\n\t *\n\t * @param {Registry} registry\n\t * @param {ServiceBroker} broker\n\t *\n\t * @memberof NodeCatalog\n\t */\n\tconstructor(registry, broker) {\n\t\tthis.registry = registry;\n\t\tthis.broker = broker;\n\t\tthis.logger = registry.logger;\n\n\t\tthis.nodes = new Map();\n\n\t\tthis.createLocalNode();\n\t}\n\n\t/**\n\t * Create local node with local information\n\t *\n\t * @returns\n\t * @memberof NodeCatalog\n\t */\n\tcreateLocalNode() {\n\t\tconst node = new Node(this.broker.nodeID);\n\t\tnode.local = true;\n\t\tnode.ipList = getIpList();\n\t\tnode.instanceID = this.broker.instanceID;\n\t\tnode.hostname = os.hostname();\n\t\tnode.client = {\n\t\t\ttype: \"nodejs\",\n\t\t\tversion: this.broker.MOLECULER_VERSION,\n\t\t\tlangVersion: process.version\n\t\t};\n\t\tnode.metadata = this.broker.metadata;\n\t\tnode.seq = 1;\n\n\t\tthis.add(node.id, node);\n\n\t\tthis.localNode = node;\n\t\treturn node;\n\t}\n\n\t/**\n\t * Add a new node\n\t *\n\t * @param {String} id\n\t * @param {any} node\n\t * @memberof NodeCatalog\n\t */\n\tadd(id, node) {\n\t\tthis.nodes.set(id, node);\n\t}\n\n\t/**\n\t * Check a node exist by nodeID\n\t *\n\t * @param {String} id\n\t * @returns\n\t * @memberof NodeCatalog\n\t */\n\thas(id) {\n\t\treturn this.nodes.has(id);\n\t}\n\n\t/**\n\t * Get a node by nodeID\n\t *\n\t * @param {String} id\n\t * @returns\n\t * @memberof NodeCatalog\n\t */\n\tget(id) {\n\t\treturn this.nodes.get(id);\n\t}\n\n\t/**\n\t * Delete a node by nodeID\n\t *\n\t * @param {String} id\n\t * @returns\n\t * @memberof NodeCatalog\n\t */\n\tdelete(id) {\n\t\treturn this.nodes.delete(id);\n\t}\n\n\t/**\n\t * Get count of all registered nodes\n\t */\n\tcount() {\n\t\treturn this.nodes.size;\n\t}\n\n\t/**\n\t * Get count of online nodes\n\t */\n\tonlineCount() {\n\t\tlet count = 0;\n\t\tthis.nodes.forEach(node => {\n\t\t\tif (node.available)\n\t\t\t\tcount++;\n\t\t});\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Process incoming INFO packet payload\n\t *\n\t * @param {any} payload\n\t * @memberof NodeCatalog\n\t */\n\tprocessNodeInfo(payload) {\n\t\tconst nodeID = payload.sender;\n\t\t//let oldNode;\n\t\tlet node = this.get(nodeID);\n\t\tlet isNew = false;\n\t\tlet isReconnected = false;\n\n\t\tif (!node) {\n\t\t\tisNew = true;\n\t\t\tnode = new Node(nodeID);\n\n\t\t\tthis.add(nodeID, node);\n\t\t} else if (!node.available) {\n\t\t\tisReconnected = true;\n\t\t\tnode.lastHeartbeatTime = Math.round(process.uptime());\n\t\t\tnode.available = true;\n\t\t\tnode.offlineSince = null;\n\t\t}\n\n\t\t// Update instance\n\t\tconst needRegister = node.update(payload, isReconnected);\n\n\t\t// Refresh services if 'seq' is greater or it is a reconnected node\n\t\tif (needRegister && node.services) {\n\t\t\tthis.registry.registerServices(node, node.services);\n\t\t}\n\n\t\t// Local notifications\n\t\tif (isNew) {\n\t\t\tthis.broker.broadcastLocal(\"$node.connected\", { node, reconnected: false });\n\t\t\tthis.logger.info(`Node '${nodeID}' connected.`);\n\t\t\tthis.registry.updateMetrics();\n\t\t} else if (isReconnected) {\n\t\t\tthis.broker.broadcastLocal(\"$node.connected\", { node, reconnected: true });\n\t\t\tthis.logger.info(`Node '${nodeID}' reconnected.`);\n\t\t\tthis.registry.updateMetrics();\n\t\t} else {\n\t\t\tthis.broker.broadcastLocal(\"$node.updated\", { node });\n\t\t\tthis.logger.debug(`Node '${nodeID}' updated.`);\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Disconnected a node\n\t *\n\t * @param {String} nodeID\n\t * @param {Boolean} isUnexpected\n\t * @memberof NodeCatalog\n\t */\n\tdisconnected(nodeID, isUnexpected) {\n\t\tlet node = this.get(nodeID);\n\t\tif (node && node.available) {\n\t\t\tnode.disconnected(isUnexpected);\n\n\t\t\tthis.registry.unregisterServicesByNode(node.id);\n\n\t\t\tthis.broker.broadcastLocal(\"$node.disconnected\", { node, unexpected: !!isUnexpected });\n\n\t\t\tthis.registry.updateMetrics();\n\n\t\t\tthis.logger.warn(`Node '${node.id}' disconnected${isUnexpected ? \" unexpectedly\" : \"\"}.`);\n\n\t\t\tif (this.broker.transit)\n\t\t\t\tthis.broker.transit.removePendingRequestByNodeID(nodeID);\n\t\t}\n\t}\n\n\n\t/**\n\t * Get a node list\n\t *\n\t * @param {Object} {onlyAvailable = false, withServices = false}\n\t * @returns\n\t * @memberof NodeCatalog\n\t */\n\tlist({ onlyAvailable = false, withServices = false }) {\n\t\tlet res = [];\n\t\tthis.nodes.forEach(node => {\n\t\t\tif (onlyAvailable && !node.available)\n\t\t\t\treturn;\n\n\t\t\tif (withServices)\n\t\t\t\tres.push(_.omit(node, [\"rawInfo\"]));\n\t\t\telse\n\t\t\t\tres.push(_.omit(node, [\"services\", \"rawInfo\"]));\n\t\t});\n\n\t\treturn res;\n\t}\n\n\t/**\n\t * Get a copy from node list.\n\t */\n\ttoArray() {\n\t\treturn Array.from(this.nodes.values());\n\t}\n}\n\nmodule.exports = NodeCatalog;\n"],"names":["getIpList","require$$0","[object Object]","registry","broker","this","logger","nodes","Map","createLocalNode","node","Node","nodeID","local","ipList","instanceID","hostname","os","client","type","version","MOLECULER_VERSION","langVersion","process","metadata","seq","add","id","localNode","set","has","get","delete","size","count","forEach","available","payload","sender","isNew","isReconnected","lastHeartbeatTime","Math","round","uptime","offlineSince","update","services","registerServices","broadcastLocal","reconnected","info","updateMetrics","debug","isUnexpected","disconnected","unregisterServicesByNode","unexpected","warn","transit","removePendingRequestByNodeID","onlyAvailable","withServices","res","push","_","omit","Array","from","values"],"mappings":"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"}