import e from"lodash";import t from"../utils.js";import s from"../metrics/index.js";import i from"../strategies/index.js";import r from"./discoverers/index.js";import o from"./node-catalog.js";import n from"./service-catalog.js";import c from"./event-catalog.js";import a from"./endpoint-action.js";import h from"./action-catalog.js";const{METRIC:d}=s;var l=class{constructor(e){this.broker=e,this.metrics=e.metrics,this.logger=e.getLogger("registry"),this.opts=Object.assign({},e.options.registry),this.StrategyFactory=i.resolve(this.opts.strategy),this.logger.info("Strategy: "+this.StrategyFactory.name),this.discoverer=r.resolve(this.opts.discoverer),this.logger.info("Discoverer: "+this.broker.getConstructorName(this.discoverer)),this.nodes=new o(this,e),this.services=new n(this,e),this.actions=new h(this,e,this.StrategyFactory),this.events=new c(this,e,this.StrategyFactory),this.registerMoleculerMetrics(),this.updateMetrics()}init(e){this.discoverer.init(this)}stop(){return this.discoverer.stop()}registerMoleculerMetrics(){this.broker.isMetricsEnabled()&&(this.metrics.register({name:d.MOLECULER_REGISTRY_NODES_TOTAL,type:d.TYPE_GAUGE,description:"Number of registered nodes"}),this.metrics.register({name:d.MOLECULER_REGISTRY_NODES_ONLINE_TOTAL,type:d.TYPE_GAUGE,description:"Number of online nodes"}),this.metrics.register({name:d.MOLECULER_REGISTRY_SERVICES_TOTAL,type:d.TYPE_GAUGE,description:"Number of registered services"}),this.metrics.register({name:d.MOLECULER_REGISTRY_SERVICE_ENDPOINTS_TOTAL,type:d.TYPE_GAUGE,labelNames:["service"],description:"Number of service endpoints"}),this.metrics.register({name:d.MOLECULER_REGISTRY_ACTIONS_TOTAL,type:d.TYPE_GAUGE,description:"Number of registered actions"}),this.metrics.register({name:d.MOLECULER_REGISTRY_ACTION_ENDPOINTS_TOTAL,type:d.TYPE_GAUGE,labelNames:["action"],description:"Number of action endpoints"}),this.metrics.register({name:d.MOLECULER_REGISTRY_EVENTS_TOTAL,type:d.TYPE_GAUGE,description:"Number of registered events"}),this.metrics.register({name:d.MOLECULER_REGISTRY_EVENT_ENDPOINTS_TOTAL,type:d.TYPE_GAUGE,labelNames:["event"],description:"Number of event endpoints"}))}updateMetrics(){if(!this.broker.isMetricsEnabled())return;this.metrics.set(d.MOLECULER_REGISTRY_NODES_TOTAL,this.nodes.count()),this.metrics.set(d.MOLECULER_REGISTRY_NODES_ONLINE_TOTAL,this.nodes.onlineCount());const e=this.services.list({grouping:!0,onlyLocal:!1,onlyAvailable:!1,skipInternal:!1,withActions:!1,withEvents:!1});this.metrics.set(d.MOLECULER_REGISTRY_SERVICES_TOTAL,e.length),e.forEach((e=>this.metrics.set(d.MOLECULER_REGISTRY_SERVICE_ENDPOINTS_TOTAL,e.nodes?e.nodes.length:0,{service:e.fullName})));const t=this.actions.list({withEndpoints:!0});this.metrics.set(d.MOLECULER_REGISTRY_ACTIONS_TOTAL,t.length),t.forEach((e=>this.metrics.set(d.MOLECULER_REGISTRY_ACTION_ENDPOINTS_TOTAL,e.endpoints?e.endpoints.length:0,{action:e.name})));const s=this.events.list({withEndpoints:!0});this.metrics.set(d.MOLECULER_REGISTRY_EVENTS_TOTAL,s.length),s.forEach((e=>this.metrics.set(d.MOLECULER_REGISTRY_EVENT_ENDPOINTS_TOTAL,e.endpoints?e.endpoints.length:0,{event:e.name})))}registerLocalService(e){if(!this.services.has(e.fullName,this.broker.nodeID)){const t=this.services.add(this.nodes.localNode,e,!0);e.actions&&this.registerActions(this.nodes.localNode,t,e.actions),e.events&&this.registerEvents(this.nodes.localNode,t,e.events),this.nodes.localNode.services.push(t),this.regenerateLocalRawInfo(this.broker.started),this.logger.info(`'${e.name}' service is registered.`),this.broker.servicesChanged(!0),this.updateMetrics()}}registerServices(t,s){s.forEach((s=>{let i,r;s.fullName||(s.fullName=this.broker.ServiceFactory.getVersionedFullName(s.name,s.version));let o=this.services.get(s.fullName,t.id);o?(i=Object.assign({},o.actions),r=Object.assign({},o.events),o.update(s)):o=this.services.add(t,s,!1),s.actions&&this.registerActions(t,o,s.actions),i&&e.forIn(i,((e,i)=>{s.actions&&s.actions[i]||this.unregisterAction(t,i)})),s.events&&this.registerEvents(t,o,s.events),r&&e.forIn(r,((e,i)=>{s.events&&s.events[i]||this.unregisterEvent(t,i)}))}));Array.from(this.services.services).forEach((e=>{if(e.node!=t)return;let i=!1;s.forEach((t=>{e.equals(t.fullName)&&(i=!0)})),i||this.unregisterService(e.fullName,t.id)})),this.broker.servicesChanged(!1),this.updateMetrics()}checkActionVisibility(e,t){return null==e.visibility||"published"==e.visibility||"public"==e.visibility||!("protected"!=e.visibility||!t.local)}registerActions(t,s,i){e.forIn(i,(e=>{this.checkActionVisibility(e,t)&&(t.local?e.handler=this.broker.middlewares.wrapHandler("localAction",e.handler,e):this.broker.transit&&(e.handler=this.broker.middlewares.wrapHandler("remoteAction",this.broker.transit.request.bind(this.broker.transit),{...e,service:s})),this.broker.options.disableBalancer&&this.broker.transit&&(e.remoteHandler=this.broker.middlewares.wrapHandler("remoteAction",this.broker.transit.request.bind(this.broker.transit),{...e,service:s})),this.actions.add(t,s,e),s.addAction(e))}))}createPrivateActionEndpoint(e){return new a(this,this.broker,this.nodes.localNode,e.service,e)}hasService(e,t){return this.services.has(e,t)}getActionEndpoints(e){return this.actions.get(e)}getActionEndpointByNodeId(e,t){const s=this.actions.get(e);if(s)return s.getEndpointByNodeID(t)}unregisterService(e,t){this.services.remove(e,t||this.broker.nodeID),t&&t!=this.broker.nodeID||this.regenerateLocalRawInfo(!0)}unregisterServicesByNode(e){this.services.removeAllByNodeID(e)}unregisterAction(e,t){this.actions.remove(t,e.id)}registerEvents(t,s,i){e.forIn(i,(e=>{t.local&&(e.handler=this.broker.middlewares.wrapHandler("localEvent",e.handler,e)),this.events.add(t,s,e),s.addEvent(e)}))}unregisterEvent(e,t){this.events.remove(t,e.id)}regenerateLocalRawInfo(s){let i=this.nodes.localNode;s&&i.seq++;const r=e.pick(i,["ipList","hostname","instanceID","client","config","port","seq","metadata"]);return this.broker.started?r.services=this.services.getLocalNodeServices():r.services=[],i.rawInfo=t.safetyObject(r,this.broker.options),i.rawInfo}getLocalNodeInfo(e){return e||!this.nodes.localNode.rawInfo?this.regenerateLocalRawInfo():this.nodes.localNode.rawInfo}getNodeInfo(e){const t=this.nodes.get(e);return t?t.local?this.getLocalNodeInfo():t.rawInfo:null}processNodeInfo(e){return this.nodes.processNodeInfo(e)}getNodeList(e){return this.nodes.list(e)}getServiceList(e){return this.services.list(e)}getActionList(e){return this.actions.list(e)}getEventList(e){return this.events.list(e)}getNodeRawList(){return this.nodes.toArray().map((e=>e.rawInfo))}};export default l;
//# sourceMappingURL=registry.js.map
