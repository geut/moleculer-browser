import e from"../../../../process.js";import{setInterval as t}from"timers-browserify";import r from"lodash";var s=class{constructor(e){this.Promise=Promise,this.opts=r.defaultsDeep({},e,{heartbeatInterval:null,heartbeatTimeout:null,disableHeartbeatChecks:!1,disableOfflineNodeRemoving:!1,cleanOfflineNodesTimeout:600}),this.heartbeatTimer=null,this.checkNodesTimer=null,this.offlineTimer=null,this.localNode=null}init(e){this.registry=e,this.broker=e.broker,this.Promise=this.broker.Promise,this.broker&&(this.logger=this.broker.getLogger("Discovery"),this.transit=this.broker.transit,null==this.opts.heartbeatInterval&&(this.opts.heartbeatInterval=this.broker.options.heartbeatInterval),null==this.opts.heartbeatTimeout&&(this.opts.heartbeatTimeout=this.broker.options.heartbeatTimeout)),this.transit&&(this.broker.localBus.on("$transporter.connected",(()=>this.startHeartbeatTimers())),this.broker.localBus.on("$transporter.disconnected",(()=>this.stopHeartbeatTimers()))),this.localNode=this.registry.nodes.localNode,this.registerMoleculerMetrics()}stop(){return this.stopHeartbeatTimers(),this.Promise.resolve()}registerMoleculerMetrics(){}startHeartbeatTimers(){if(this.stopHeartbeatTimers(),this.opts.heartbeatInterval>0){const e=1e3*this.opts.heartbeatInterval+(Math.round(1e3*Math.random())-500);this.heartbeatTimer=t((()=>this.beat()),e),this.heartbeatTimer.unref(),this.checkNodesTimer=t((()=>this.checkRemoteNodes()),1e3*this.opts.heartbeatTimeout),this.checkNodesTimer.unref(),this.offlineTimer=t((()=>this.checkOfflineNodes()),6e4),this.offlineTimer.unref()}}stopHeartbeatTimers(){this.heartbeatTimer&&(clearInterval(this.heartbeatTimer),this.heartbeatTimer=null),this.checkNodesTimer&&(clearInterval(this.checkNodesTimer),this.checkNodesTimer=null),this.offlineTimer&&(clearInterval(this.offlineTimer),this.offlineTimer=null)}disableHeartbeat(){this.opts.heartbeatInterval=0,this.stopHeartbeatTimers()}beat(){return this.localNode.updateLocalInfo(this.broker.getCpuUsage).then((()=>this.sendHeartbeat()))}checkRemoteNodes(){if(this.disableHeartbeatChecks)return;const t=Math.round(e.uptime());this.registry.nodes.toArray().forEach((e=>{!e.local&&e.available&&(e.lastHeartbeatTime?t-e.lastHeartbeatTime>this.broker.options.heartbeatTimeout&&(this.logger.warn(`Heartbeat is not received from '${e.id}' node.`),this.registry.nodes.disconnected(e.id,!0)):e.lastHeartbeatTime=t)}))}checkOfflineNodes(){if(this.disableOfflineNodeRemoving||!this.opts.cleanOfflineNodesTimeout)return;const t=Math.round(e.uptime());this.registry.nodes.toArray().forEach((e=>{e.local||e.available||(e.lastHeartbeatTime?t-e.lastHeartbeatTime>this.opts.cleanOfflineNodesTimeout&&(this.logger.warn(`Removing offline '${e.id}' node from registry because it hasn't submitted heartbeat signal for 10 minutes.`),this.registry.nodes.delete(e.id)):e.lastHeartbeatTime=t)}))}heartbeatReceived(e,t){const r=this.registry.nodes.get(e);r&&r.available?null!=t.seq&&r.seq!==t.seq?this.discoverNode(e):null==t.instanceID||r.instanceID.startsWith(t.instanceID)?r.heartbeat(t):this.discoverNode(e):this.discoverNode(e)}processRemoteNodeInfo(e,t){return this.broker.registry.processNodeInfo(t)}sendHeartbeat(){return this.transit?this.transit.sendHeartbeat(this.localNode):this.Promise.resolve()}discoverNode(){throw new Error("Not implemented")}discoverAllNodes(){throw new Error("Not implemented")}localNodeReady(){return this.sendLocalNodeInfo()}sendLocalNodeInfo(){throw new Error("Not implemented")}localNodeDisconnected(){return this.transit?this.transit.sendDisconnectPacket():this.Promise.resolve()}remoteNodeDisconnected(e,t){return this.registry.nodes.disconnected(e,t)}};export default s;
//# sourceMappingURL=base.js.map
