{"version":3,"file":"memory.js","sources":["../../../../../src/moleculer/src/cachers/memory.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2018 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst _ \t\t\t= require(\"lodash\");\nconst utils\t\t\t= require(\"../utils\");\nconst BaseCacher  \t= require(\"./base\");\nconst { METRIC }\t= require(\"../metrics\");\n\nconst Lock = require(\"../lock\");\n/**\n * Cacher factory for memory cache\n *\n * @class MemoryCacher\n */\nclass MemoryCacher extends BaseCacher {\n\n\t/**\n\t * Creates an instance of MemoryCacher.\n\t *\n\t * @param {object} opts\n\t *\n\t * @memberof MemoryCacher\n\t */\n\tconstructor(opts) {\n\t\tsuper(opts);\n\n\t\t// Cache container\n\t\tthis.cache = new Map();\n\t\t// Async lock\n\t\tthis._lock = new Lock();\n\t\t// Start TTL timer\n\t\tthis.timer = setInterval(() => {\n\t\t\t/* istanbul ignore next */\n\t\t\tthis.checkTTL();\n\t\t}, 30 * 1000);\n\t\tthis.timer.unref();\n\n\t\t// Set cloning\n\t\tthis.clone = this.opts.clone === true ? _.cloneDeep : this.opts.clone;\n\t}\n\n\t/**\n\t * Initialize cacher\n\t *\n\t * @param {any} broker\n\t *\n\t * @memberof MemoryCacher\n\t */\n\tinit(broker) {\n\t\tsuper.init(broker);\n\n\t\tbroker.localBus.on(\"$transporter.connected\", () => {\n\t\t\t// Clear all entries after transporter connected. Maybe we missed some \"cache.clear\" events.\n\t\t\treturn this.clean();\n\t\t});\n\t}\n\n\t/**\n\t * Close cacher\n\t *\n\t * @memberof MemoryCacher\n\t */\n\tclose() {\n\t\tclearInterval(this.timer);\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Get data from cache by key\n\t *\n\t * @param {any} key\n\t * @returns {Promise}\n\t *\n\t * @memberof MemoryCacher\n\t */\n\tget(key) {\n\t\tthis.logger.debug(`GET ${key}`);\n\t\tthis.metrics.increment(METRIC.MOLECULER_CACHER_GET_TOTAL);\n\t\tconst timeEnd = this.metrics.timer(METRIC.MOLECULER_CACHER_GET_TIME);\n\n\t\tif (this.cache.has(key)) {\n\t\t\tthis.logger.debug(`FOUND ${key}`);\n\t\t\tthis.metrics.increment(METRIC.MOLECULER_CACHER_FOUND_TOTAL);\n\n\t\t\tlet item = this.cache.get(key);\n\t\t\tif (item.expire && item.expire < Date.now()) {\n\t\t\t\tthis.logger.debug(`EXPIRED ${key}`);\n\t\t\t\tthis.metrics.increment(METRIC.MOLECULER_CACHER_EXPIRED_TOTAL);\n\t\t\t\tthis.cache.delete(key);\n\t\t\t\ttimeEnd();\n\t\t\t\treturn this.broker.Promise.resolve(null);\n\t\t\t}\n\t\t\tconst res = this.clone ? this.clone(item.data) : item.data;\n\t\t\ttimeEnd();\n\n\t\t\treturn this.broker.Promise.resolve(res);\n\t\t} else {\n\t\t\ttimeEnd();\n\t\t}\n\t\treturn this.broker.Promise.resolve(null);\n\t}\n\n\t/**\n\t * Save data to cache by key\n\t *\n\t * @param {String} key\n\t * @param {any} data JSON object\n\t * @param {Number} ttl Optional Time-to-Live\n\t * @returns {Promise}\n\t *\n\t * @memberof MemoryCacher\n\t */\n\tset(key, data, ttl) {\n\t\tthis.metrics.increment(METRIC.MOLECULER_CACHER_SET_TOTAL);\n\t\tconst timeEnd = this.metrics.timer(METRIC.MOLECULER_CACHER_SET_TIME);\n\n\t\tif (ttl == null)\n\t\t\tttl = this.opts.ttl;\n\n\t\tthis.cache.set(key, {\n\t\t\tdata,\n\t\t\texpire: ttl ? Date.now() + ttl * 1000 : null\n\t\t});\n\n\t\ttimeEnd();\n\t\tthis.logger.debug(`SET ${key}`);\n\n\t\treturn this.broker.Promise.resolve(data);\n\t}\n\n\t/**\n\t * Delete a key from cache\n\t *\n\t * @param {string|Array<string>} key\n\t * @returns {Promise}\n\t *\n\t * @memberof MemoryCacher\n\t */\n\tdel(keys) {\n\t\tthis.metrics.increment(METRIC.MOLECULER_CACHER_DEL_TOTAL);\n\t\tconst timeEnd = this.metrics.timer(METRIC.MOLECULER_CACHER_DEL_TIME);\n\n\t\tkeys = Array.isArray(keys) ? keys : [keys];\n\t\tkeys.forEach(key => {\n\t\t\tthis.cache.delete(key);\n\t\t\tthis.logger.debug(`REMOVE ${key}`);\n\t\t});\n\t\ttimeEnd();\n\n\t\treturn this.broker.Promise.resolve();\n\t}\n\n\t/**\n\t * Clean cache. Remove every key by match\n\t * @param {string|Array<string>} match string. Default is \"**\"\n\t * @returns {Promise}\n\t *\n\t * @memberof MemoryCacher\n\t */\n\tclean(match = \"**\") {\n\t\tthis.metrics.increment(METRIC.MOLECULER_CACHER_CLEAN_TOTAL);\n\t\tconst timeEnd = this.metrics.timer(METRIC.MOLECULER_CACHER_CLEAN_TIME);\n\n\t\tconst matches = Array.isArray(match) ? match : [match];\n\t\tthis.logger.debug(`CLEAN ${matches.join(\", \")}`);\n\n\t\tthis.cache.forEach((value, key) => {\n\t\t\tif (matches.some(match => utils.match(key, match))) {\n\t\t\t\tthis.logger.debug(`REMOVE ${key}`);\n\t\t\t\tthis.cache.delete(key);\n\t\t\t}\n\t\t});\n\t\ttimeEnd();\n\n\t\treturn this.broker.Promise.resolve();\n\t}\n\n\t/**\n\t * Get data and ttl from cache by key.\n\t *\n\t * @param {string|Array<string>} key\n\t * @returns {Promise}\n\t *\n\t * @memberof MemoryCacher\n\t */\n\tgetWithTTL(key){\n\t\tthis.logger.debug(`GET ${key}`);\n\t\tlet data = null;\n\t\tlet ttl = null;\n\t\tif (this.cache.has(key)) {\n\t\t\tthis.logger.debug(`FOUND ${key}`);\n\n\t\t\tlet item = this.cache.get(key);\n\t\t\tlet now = Date.now();\n\t\t\tttl = (item.expire - now)/1000;\n\t\t\tttl = ttl > 0 ? ttl : null;\n\t\t\tif (this.opts.ttl) {\n\t\t\t\t// Update expire time (hold in the cache if we are using it)\n\t\t\t\titem.expire = now + this.opts.ttl * 1000;\n\t\t\t}\n\t\t\tdata = this.clone ? this.clone(item.data) : item.data;\n\t\t}\n\t\treturn this.broker.Promise.resolve({ data, ttl });\n\t}\n\n\t/**\n\t * Acquire a lock\n\t *\n\t * @param {string|Array<string>} key\n\t * @param {Number} ttl Optional Time-to-Live\n\t * @returns {Promise}\n\t *\n\t * @memberof MemoryCacher\n\t */\n\tlock(key, ttl) {\n\t\treturn this._lock.acquire(key, ttl).then(()=> {\n\t\t\treturn ()=>this._lock.release(key);\n\t\t});\n\t}\n\n\t/**\n\t * Try to acquire a lock\n\t *\n\t * @param {string|Array<string>} key\n\t * @param {Number} ttl Optional Time-to-Live\n\t * @returns {Promise}\n\t *\n\t * @memberof MemoryCacher\n\t */\n\ttryLock(key, ttl) {\n\t\tif(this._lock.isLocked(key)){\n\t\t\treturn this.broker.Promise.reject(new Error(\"Locked.\"));\n\t\t}\n\t\treturn this._lock.acquire(key, ttl).then(()=> {\n\t\t\treturn ()=>this._lock.release(key);\n\t\t});\n\t}\n\n\t/**\n\t * Check & remove the expired cache items\n\t *\n\t * @memberof MemoryCacher\n\t */\n\tcheckTTL() {\n\t\tlet now = Date.now();\n\t\tthis.cache.forEach((value, key) => {\n\t\t\tlet item = this.cache.get(key);\n\n\t\t\tif (item.expire && item.expire < now) {\n\t\t\t\tthis.logger.debug(`EXPIRED ${key}`);\n\t\t\t\tthis.metrics.increment(METRIC.MOLECULER_CACHER_EXPIRED_TOTAL);\n\t\t\t\tthis.cache.delete(key);\n\t\t\t}\n\t\t});\n\t}\n}\n\nmodule.exports = MemoryCacher;\n"],"names":["METRIC","require$$0","BaseCacher","[object Object]","opts","super","this","cache","Map","_lock","Lock","timer","setInterval","checkTTL","unref","clone","_","cloneDeep","broker","init","localBus","on","clean","clearInterval","Promise","resolve","key","logger","debug","metrics","increment","MOLECULER_CACHER_GET_TOTAL","timeEnd","MOLECULER_CACHER_GET_TIME","has","MOLECULER_CACHER_FOUND_TOTAL","item","get","expire","Date","now","MOLECULER_CACHER_EXPIRED_TOTAL","delete","res","data","ttl","MOLECULER_CACHER_SET_TOTAL","MOLECULER_CACHER_SET_TIME","set","keys","MOLECULER_CACHER_DEL_TOTAL","MOLECULER_CACHER_DEL_TIME","Array","isArray","forEach","match","MOLECULER_CACHER_CLEAN_TOTAL","MOLECULER_CACHER_CLEAN_TIME","matches","join","value","some","utils","acquire","then","release","isLocked","reject","Error"],"mappings":"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"}