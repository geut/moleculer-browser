import e from"../../../process.js";import t from"./constants.js";import*as s from"../../../os.js";import i from"../../../no-impl.js";import _ from"../cpu-usage.js";let E,r;try{E=i}catch(e){}function S(){try{const e=i();e&&(this.register({name:t.PROCESS_GC_TIME,type:t.TYPE_GAUGE,unit:t.UNIT_NANOSECONDS,description:"GC time"}),this.register({name:t.PROCESS_GC_TOTAL_TIME,type:t.TYPE_GAUGE,unit:t.UNIT_MILLISECONDS,description:"Total time of GC"}),this.register({name:t.PROCESS_GC_EXECUTED_TOTAL,type:t.TYPE_GAUGE,labelNames:["type"],unit:null,description:"Number of executed GC"}),e.on("stats",(e=>{this.set(t.PROCESS_GC_TIME,e.pause),this.increment(t.PROCESS_GC_TOTAL_TIME,null,e.pause/1e6),1==e.gctype&&this.increment(t.PROCESS_GC_EXECUTED_TOTAL,{type:"scavenge"}),2==e.gctype&&this.increment(t.PROCESS_GC_EXECUTED_TOTAL,{type:"marksweep"}),4==e.gctype&&this.increment(t.PROCESS_GC_EXECUTED_TOTAL,{type:"incremental"}),8==e.gctype&&this.increment(t.PROCESS_GC_EXECUTED_TOTAL,{type:"weakphantom"}),15==e.gctype&&(this.increment(t.PROCESS_GC_EXECUTED_TOTAL,{type:"scavenge"}),this.increment(t.PROCESS_GC_EXECUTED_TOTAL,{type:"marksweep"}),this.increment(t.PROCESS_GC_EXECUTED_TOTAL,{type:"incremental"}),this.increment(t.PROCESS_GC_EXECUTED_TOTAL,{type:"weakphantom"}))})))}catch(e){}}function T(){try{r=i,r&&(this.register({name:t.PROCESS_EVENTLOOP_LAG_MIN,type:t.TYPE_GAUGE,unit:t.UNIT_MILLISECONDS,description:"Minimum of event loop lag"}),this.register({name:t.PROCESS_EVENTLOOP_LAG_AVG,type:t.TYPE_GAUGE,unit:t.UNIT_MILLISECONDS,description:"Average of event loop lag"}),this.register({name:t.PROCESS_EVENTLOOP_LAG_MAX,type:t.TYPE_GAUGE,unit:t.UNIT_MILLISECONDS,description:"Maximum of event loop lag"}),this.register({name:t.PROCESS_EVENTLOOP_LAG_COUNT,type:t.TYPE_GAUGE,description:"Number of event loop lag samples."}))}catch(e){}}var n={registerCommonMetrics:function(){this.logger.debug("Registering common metrics...");const i=this.register({name:t.PROCESS_ARGUMENTS,type:t.TYPE_INFO,labelNames:["index"],description:"Process arguments"});e.argv.map(((e,t)=>i.set(e,{index:t}))),this.register({name:t.PROCESS_PID,type:t.TYPE_INFO,description:"Process PID"}).set(e.pid),this.register({name:t.PROCESS_PPID,type:t.TYPE_INFO,description:"Process parent PID"}).set(e.ppid),this.register({name:t.PROCESS_MEMORY_HEAP_SIZE_TOTAL,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"Process heap size"}),this.register({name:t.PROCESS_MEMORY_HEAP_SIZE_USED,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"Process used heap size"}),this.register({name:t.PROCESS_MEMORY_RSS,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"Process RSS size"}),this.register({name:t.PROCESS_MEMORY_EXTERNAL,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"Process external memory size"}),this.register({name:t.PROCESS_MEMORY_HEAP_SPACE_SIZE_TOTAL,type:t.TYPE_GAUGE,labelNames:["space"],unit:t.UNIT_BYTE,description:"Process total heap space size"}),this.register({name:t.PROCESS_MEMORY_HEAP_SPACE_SIZE_USED,type:t.TYPE_GAUGE,labelNames:["space"],unit:t.UNIT_BYTE,description:"Process used heap space size"}),this.register({name:t.PROCESS_MEMORY_HEAP_SPACE_SIZE_AVAILABLE,type:t.TYPE_GAUGE,labelNames:["space"],unit:t.UNIT_BYTE,description:"Process available heap space size"}),this.register({name:t.PROCESS_MEMORY_HEAP_SPACE_SIZE_PHYSICAL,type:t.TYPE_GAUGE,labelNames:["space"],unit:t.UNIT_BYTE,description:"Process physical heap space size"}),this.register({name:t.PROCESS_MEMORY_HEAP_STAT_HEAP_SIZE_TOTAL,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"Process heap stat size"}),this.register({name:t.PROCESS_MEMORY_HEAP_STAT_EXECUTABLE_SIZE_TOTAL,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"Process heap stat executable size"}),this.register({name:t.PROCESS_MEMORY_HEAP_STAT_PHYSICAL_SIZE_TOTAL,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"Process heap stat physical size"}),this.register({name:t.PROCESS_MEMORY_HEAP_STAT_AVAILABLE_SIZE_TOTAL,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"Process heap stat available size"}),this.register({name:t.PROCESS_MEMORY_HEAP_STAT_USED_HEAP_SIZE,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"Process heap stat used size"}),this.register({name:t.PROCESS_MEMORY_HEAP_STAT_HEAP_SIZE_LIMIT,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"Process heap stat size limit"}),this.register({name:t.PROCESS_MEMORY_HEAP_STAT_MALLOCATED_MEMORY,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"Process heap stat mallocated size"}),this.register({name:t.PROCESS_MEMORY_HEAP_STAT_PEAK_MALLOCATED_MEMORY,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"Peak of process heap stat mallocated size"}),this.register({name:t.PROCESS_MEMORY_HEAP_STAT_ZAP_GARBAGE,type:t.TYPE_GAUGE,description:"Process heap stat zap garbage"}),this.register({name:t.PROCESS_UPTIME,type:t.TYPE_GAUGE,unit:t.UNIT_SECONDS,description:"Process uptime"}),this.register({name:t.PROCESS_INTERNAL_ACTIVE_HANDLES,type:t.TYPE_GAUGE,unit:t.UNIT_HANDLE,description:"Number of active process handlers"}),this.register({name:t.PROCESS_INTERNAL_ACTIVE_REQUESTS,type:t.TYPE_GAUGE,unit:t.UNIT_REQUEST,description:"Number of active process requests"}),this.register({name:t.PROCESS_VERSIONS_NODE,type:t.TYPE_INFO,description:"Node version"}).set(e.versions.node),this.register({name:t.OS_MEMORY_FREE,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"OS free memory size"}),this.register({name:t.OS_MEMORY_USED,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"OS used memory size"}),this.register({name:t.OS_MEMORY_TOTAL,type:t.TYPE_GAUGE,unit:t.UNIT_BYTE,description:"OS total memory size"}),this.register({name:t.OS_UPTIME,type:t.TYPE_GAUGE,unit:t.UNIT_SECONDS,description:"OS uptime"}),this.register({name:t.OS_TYPE,type:t.TYPE_INFO,description:"OS type"}).set(s.type()),this.register({name:t.OS_RELEASE,type:t.TYPE_INFO,description:"OS release"}).set(s.release()),this.register({name:t.OS_HOSTNAME,type:t.TYPE_INFO,description:"Hostname"}).set(s.hostname()),this.register({name:t.OS_ARCH,type:t.TYPE_INFO,description:"OS architecture"}).set(s.arch()),this.register({name:t.OS_PLATFORM,type:t.TYPE_INFO,description:"OS platform"}).set(s.platform());const _=function(){try{return s.userInfo()}catch(e){return{}}}();this.register({name:t.OS_USER_UID,type:t.TYPE_INFO,description:"UID"}).set(_.uid),this.register({name:t.OS_USER_GID,type:t.TYPE_INFO,description:"GID"}).set(_.gid),this.register({name:t.OS_USER_USERNAME,type:t.TYPE_INFO,description:"Username"}).set(_.username),this.register({name:t.OS_USER_HOMEDIR,type:t.TYPE_INFO,description:"User's home directory"}).set(_.homedir),this.register({name:t.OS_NETWORK_ADDRESS,type:t.TYPE_INFO,labelNames:["interface","family"],description:"Network address"}),this.register({name:t.OS_NETWORK_MAC,type:t.TYPE_INFO,labelNames:["interface","family"],description:"MAC address"}),this.register({name:t.OS_DATETIME_UNIX,type:t.TYPE_GAUGE,description:"Current datetime in Unix format"}),this.register({name:t.OS_DATETIME_ISO,type:t.TYPE_INFO,description:"Current datetime in ISO string"}),this.register({name:t.OS_DATETIME_UTC,type:t.TYPE_INFO,description:"Current UTC datetime"}),this.register({name:t.OS_DATETIME_TZ_OFFSET,type:t.TYPE_GAUGE,description:"Timezone offset"}),this.register({name:t.OS_CPU_LOAD_1,type:t.TYPE_GAUGE,description:"CPU load1"}),this.register({name:t.OS_CPU_LOAD_5,type:t.TYPE_GAUGE,description:"CPU load5"}),this.register({name:t.OS_CPU_LOAD_15,type:t.TYPE_GAUGE,description:"CPU load15"}),this.register({name:t.OS_CPU_UTILIZATION,type:t.TYPE_GAUGE,description:"CPU utilization"}),this.register({name:t.OS_CPU_USER,type:t.TYPE_GAUGE,description:"CPU user time"}),this.register({name:t.OS_CPU_SYSTEM,type:t.TYPE_GAUGE,description:"CPU system time"}),this.register({name:t.OS_CPU_TOTAL,type:t.TYPE_GAUGE,unit:t.UNIT_CPU,description:"Number of CPUs"}),this.register({name:t.OS_CPU_INFO_MODEL,type:t.TYPE_INFO,labelNames:["index"],description:"CPU model"}),this.register({name:t.OS_CPU_INFO_SPEED,type:t.TYPE_GAUGE,labelNames:["index"],unit:t.UNIT_GHZ,description:"CPU speed"}),this.register({name:t.OS_CPU_INFO_TIMES_USER,type:t.TYPE_GAUGE,labelNames:["index"],description:"CPU user time"}),this.register({name:t.OS_CPU_INFO_TIMES_SYS,type:t.TYPE_GAUGE,labelNames:["index"],description:"CPU system time"}),S.call(this),T.call(this),this.logger.debug(`Registered ${this.store.size} common metrics.`)},updateCommonMetrics:function(){this.logger.debug("Update common metric values...");const i=this.timer(),S=e.memoryUsage();if(this.set(t.PROCESS_MEMORY_HEAP_SIZE_TOTAL,S.heapTotal),this.set(t.PROCESS_MEMORY_HEAP_SIZE_USED,S.heapUsed),this.set(t.PROCESS_MEMORY_RSS,S.rss),this.set(t.PROCESS_MEMORY_EXTERNAL,S.external),E&&E.getHeapSpaceStatistics){E.getHeapSpaceStatistics().forEach((e=>{const s=e.space_name;this.set(t.PROCESS_MEMORY_HEAP_SPACE_SIZE_TOTAL,e.space_size,{space:s}),this.set(t.PROCESS_MEMORY_HEAP_SPACE_SIZE_USED,e.space_used_size,{space:s}),this.set(t.PROCESS_MEMORY_HEAP_SPACE_SIZE_AVAILABLE,e.space_available_size,{space:s}),this.set(t.PROCESS_MEMORY_HEAP_SPACE_SIZE_PHYSICAL,e.physical_space_size,{space:s})}))}if(E&&E.getHeapStatistics){const e=E.getHeapStatistics();this.set(t.PROCESS_MEMORY_HEAP_STAT_HEAP_SIZE_TOTAL,e.total_heap_size),this.set(t.PROCESS_MEMORY_HEAP_STAT_EXECUTABLE_SIZE_TOTAL,e.total_heap_size_executable),this.set(t.PROCESS_MEMORY_HEAP_STAT_PHYSICAL_SIZE_TOTAL,e.total_physical_size),this.set(t.PROCESS_MEMORY_HEAP_STAT_AVAILABLE_SIZE_TOTAL,e.total_available_size),this.set(t.PROCESS_MEMORY_HEAP_STAT_USED_HEAP_SIZE,e.used_heap_size),this.set(t.PROCESS_MEMORY_HEAP_STAT_HEAP_SIZE_LIMIT,e.heap_size_limit),this.set(t.PROCESS_MEMORY_HEAP_STAT_MALLOCATED_MEMORY,e.malloced_memory),this.set(t.PROCESS_MEMORY_HEAP_STAT_PEAK_MALLOCATED_MEMORY,e.peak_malloced_memory),this.set(t.PROCESS_MEMORY_HEAP_STAT_ZAP_GARBAGE,e.does_zap_garbage)}this.set(t.PROCESS_UPTIME,e.uptime()),this.set(t.PROCESS_INTERNAL_ACTIVE_HANDLES,e._getActiveHandles().length),this.set(t.PROCESS_INTERNAL_ACTIVE_REQUESTS,e._getActiveRequests().length);const T=s.freemem(),n=s.totalmem(),O=n-T;this.set(t.OS_MEMORY_FREE,T),this.set(t.OS_MEMORY_USED,O),this.set(t.OS_MEMORY_TOTAL,n),this.set(t.OS_UPTIME,s.uptime()),this.set(t.OS_TYPE,s.type()),this.set(t.OS_RELEASE,s.release()),this.set(t.OS_HOSTNAME,s.hostname()),this.set(t.OS_ARCH,s.arch()),this.set(t.OS_PLATFORM,s.platform());const a=(()=>{const e=[],t=[],i=s.networkInterfaces();for(let s in i)for(let _ in i[s]){const E=i[s][_];E.internal?t.push({f:E,iface:s}):e.push({f:E,iface:s})}return e.length>0?e:t})();for(let{f:e,iface:s}of a)this.set(t.OS_NETWORK_ADDRESS,e.address,{interface:s,family:e.family}),this.set(t.OS_NETWORK_MAC,e.mac,{interface:s,family:e.family});const P=new Date;this.set(t.OS_DATETIME_UNIX,P.valueOf()),this.set(t.OS_DATETIME_ISO,P.toISOString()),this.set(t.OS_DATETIME_UTC,P.toUTCString()),this.set(t.OS_DATETIME_TZ_OFFSET,P.getTimezoneOffset());const p=s.loadavg();if(this.set(t.OS_CPU_LOAD_1,p[0]),this.set(t.OS_CPU_LOAD_5,p[1]),this.set(t.OS_CPU_LOAD_15,p[2]),r&&r.sense){const e=r.sense();this.set(t.PROCESS_EVENTLOOP_LAG_MIN,e.min),this.set(t.PROCESS_EVENTLOOP_LAG_AVG,e.num?e.sum/e.num:0),this.set(t.PROCESS_EVENTLOOP_LAG_MAX,e.max),this.set(t.PROCESS_EVENTLOOP_LAG_COUNT,e.num)}const A=i();return this.broker.Promise.resolve().then((()=>_().then((e=>{this.set(t.OS_CPU_UTILIZATION,e.avg);try{const e=s.cpus();this.set(t.OS_CPU_TOTAL,e.length),this.set(t.OS_CPU_USER,e.reduce(((e,t)=>e+t.times.user),0)),this.set(t.OS_CPU_SYSTEM,e.reduce(((e,t)=>e+t.times.sys),0)),e.forEach(((e,s)=>{this.set(t.OS_CPU_INFO_MODEL,e.model,{index:s}),this.set(t.OS_CPU_INFO_SPEED,e.speed,{index:s}),this.set(t.OS_CPU_INFO_TIMES_USER,e.times.user,{index:s}),this.set(t.OS_CPU_INFO_TIMES_SYS,e.times.sys,{index:s})}))}catch(e){}})))).catch((()=>{})).then((()=>{this.logger.debug(`Collected common metric values in ${A.toFixed(3)} msec.`)}))}};export default n;
//# sourceMappingURL=commons.js.map
