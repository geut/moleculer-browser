import e from"../../../process.js";import{setInterval as t}from"timers-browserify";import r from"lodash";import s from"./constants.js";import i from"../utils.js";import o from"./types/index.js";import n from"./reporters/index.js";import l from"./commons.js";const{match:c,isFunction:a,isPlainObject:h,isString:m}=i,{registerCommonMetrics:p,updateCommonMetrics:u}=l,d=/^[a-zA-Z_][a-zA-Z0-9-_:.]*$/,g=/^[a-zA-Z_][a-zA-Z0-9-_.]*$/;var f=class{constructor(t,s){this.broker=t,this.logger=t.getLogger("metrics"),this.dirty=!0,!0!==s&&!1!==s||(s={enabled:s}),this.opts=r.defaultsDeep({},s,{enabled:!0,collectProcessMetrics:"test"!==e.env.NODE_ENV,collectInterval:5,reporter:!1,defaultBuckets:[1,5,10,25,50,100,250,500,1e3,2500,5e3,1e4],defaultQuantiles:[.5,.9,.95,.99,.999],defaultMaxAgeSeconds:60,defaultAgeBuckets:10,defaultAggregator:"sum"}),this.store=new Map,this.opts.enabled&&this.logger.info("Metrics: Enabled")}init(){if(this.opts.enabled){if(this.opts.reporter){const e=Array.isArray(this.opts.reporter)?this.opts.reporter:[this.opts.reporter];this.reporter=r.compact(e).map((e=>{const t=n.resolve(e);return t.init(this),t}));const t=this.reporter.map((e=>this.broker.getConstructorName(e)));this.logger.info(`Metric reporter${t.length>1?"s":""}: ${t.join(", ")}`)}this.opts.collectProcessMetrics&&(this.collectTimer=t((()=>{u.call(this)}),1e3*this.opts.collectInterval),this.collectTimer.unref(),p.call(this),u.call(this))}}stop(){if(this.collectTimer&&clearInterval(this.collectTimer),this.reporter)return this.broker.Promise.all(this.reporter.map((e=>e.stop())))}isEnabled(){return this.opts.enabled}register(e){if(!h(e))throw new Error("Wrong argument. Must be an Object.");if(!e.type)throw new Error("The metric 'type' property is mandatory.");if(!e.name)throw new Error("The metric 'name' property is mandatory.");if(!d.test(e.name))throw new Error("The metric 'name' is not valid: "+e.name);Array.isArray(e.labelNames)&&e.labelNames.forEach((t=>{if(!g.test(t))throw new Error(`The '${e.name}' metric label name is not valid: ${t}`)}));const t=o.resolve(e.type);if(!this.opts.enabled)return null;const r=new t(e,this);return this.store.set(e.name,r),r}hasMetric(e){return this.store.has(e)}getMetric(e){const t=this.store.get(e);return t||null}increment(e,t,r=1,s){if(!this.opts.enabled)return null;const i=this.getMetric(e);if(!a(i.increment))throw new Error("Invalid metric type. Incrementing works only with counter & gauge metric types.");return i.increment(t,r,s)}decrement(e,t,r=1,s){if(!this.opts.enabled)return null;const i=this.getMetric(e);if(!a(i.decrement))throw new Error("Invalid metric type. Decrementing works only with gauge metric type.");return i.decrement(t,r,s)}set(e,t,r,s){if(!this.opts.enabled)return null;const i=this.getMetric(e);if(!a(i.set))throw new Error("Invalid metric type. Value setting works only with counter, gauge & info metric types.");return i.set(t,r,s)}observe(e,t,r,s){if(!this.opts.enabled)return null;const i=this.getMetric(e);if(!a(i.observe))throw new Error("Invalid metric type. Observing works only with histogram metric type.");return i.observe(t,r,s)}reset(e,t,r){if(!this.opts.enabled)return null;this.getMetric(e).reset(t,r)}resetAll(e,t){if(!this.opts.enabled)return null;this.getMetric(e).resetAll(t)}timer(t,r,i){let o;if(t&&this.opts.enabled&&(o=this.getMetric(t),!a(o.observe)&&!a(o.set)))throw new Error("Invalid metric type. Timing works only with histogram or gauge metric types");const n=e.hrtime();return()=>{const t=e.hrtime(n),l=1e3*(t[0]+t[1]/1e9);return o&&(o.type==s.TYPE_HISTOGRAM?o.observe(l,r,i):o.type==s.TYPE_GAUGE&&o.set(l,r,i)),l}}changed(e,t,r,s){this.dirty=!0,Array.isArray(this.reporter)&&this.reporter.forEach((i=>i.metricChanged(e,t,r,s)))}list(e){const t=[],r=null!=(e=e||{}).types?m(e.types)?[e.types]:e.types:null,s=null!=e.includes?m(e.includes)?[e.includes]:e.includes:null,i=null!=e.excludes?m(e.excludes)?[e.excludes]:e.excludes:null;return this.store.forEach((e=>{r&&!r.some((t=>e.type==t))||s&&!s.some((t=>c(e.name,t)))||i&&!i.every((t=>!c(e.name,t)))||t.push(e.toObject())})),t}pluralizeUnit(e){switch(e){case s.UNIT_GHZ:return e}return e+"s"}};export default f;
//# sourceMappingURL=registry.js.map
