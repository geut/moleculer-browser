{"version":3,"file":"event.js","sources":["../../../../../../src/moleculer/src/metrics/reporters/event.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst BaseReporter = require(\"./base\");\nconst _ = require(\"lodash\");\n\n/**\n * Event reporter for Moleculer Metrics\n *\n * @class EventReporter\n * @extends {BaseReporter}\n */\nclass EventReporter extends BaseReporter {\n\n\t/**\n\t * Creates an instance of EventReporter.\n\t * @param {Object} opts\n\t * @memberof EventReporter\n\t */\n\tconstructor(opts) {\n\t\tsuper(opts);\n\n\t\tthis.opts = _.defaultsDeep(this.opts, {\n\t\t\teventName: \"$metrics.snapshot\",\n\n\t\t\tbroadcast: false,\n\t\t\tgroups: null,\n\n\t\t\tonlyChanges: false,\n\n\t\t\tinterval: 5,\n\t\t});\n\n\t\tthis.lastChanges = new Set();\n\t}\n\n\t/**\n\t * Initialize reporter.\n\t *\n\t * @param {MetricRegistry} registry\n\t * @memberof EventReporter\n\t */\n\tinit(registry) {\n\t\tsuper.init(registry);\n\n\t\tif (this.opts.interval > 0) {\n\t\t\tthis.timer = setInterval(() => this.sendEvent(), this.opts.interval * 1000);\n\t\t\tthis.timer.unref();\n\t\t}\n\t}\n\n\t/**\n\t * Send metrics snapshot via event.\n\t *\n\t * @memberof EventReporter\n\t */\n\tsendEvent() {\n\t\tlet list = this.registry.list({\n\t\t\tincludes: this.opts.includes,\n\t\t\texcludes: this.opts.excludes,\n\t\t});\n\n\t\tif (this.opts.onlyChanges)\n\t\t\tlist = list.filter(metric => this.lastChanges.has(metric.name));\n\n\t\tif (list.length == 0)\n\t\t\treturn;\n\n\t\tif (this.opts.broadcast) {\n\t\t\tthis.logger.debug(`Send metrics.snapshot (${list.length} metrics) broadcast events.`);\n\t\t\tthis.broker.broadcast(this.opts.eventName, list, { groups: this.opts.groups });\n\t\t} else {\n\t\t\tthis.logger.debug(`Send metrics.snapshot (${list.length} metrics) events.`);\n\t\t\tthis.broker.emit(this.opts.eventName, list, { groups: this.opts.groups });\n\t\t}\n\n\t\tthis.lastChanges.clear();\n\t}\n\n\n\t/**\n\t * Some metric has been changed.\n\t *\n\t * @param {BaseMetric} metric\n\t * @param {any} value\n\t * @param {Object} labels\n\t * @param {Number?} timestamp\n\t *\n\t * @memberof BaseReporter\n\t */\n\tmetricChanged(metric) {\n\t\tif (!this.matchMetricName(metric.name)) return;\n\n\t\tthis.lastChanges.add(metric.name);\n\t}\n}\n\nmodule.exports = EventReporter;\n"],"names":["BaseReporter","[object Object]","opts","super","this","_","defaultsDeep","eventName","broadcast","groups","onlyChanges","interval","lastChanges","Set","registry","init","timer","setInterval","sendEvent","unref","list","includes","excludes","filter","metric","has","name","length","logger","debug","broker","emit","clear","matchMetricName","add"],"mappings":"qGAiBA,cAA4BA,EAO3BC,YAAYC,GACXC,MAAMD,GAENE,KAAKF,KAAOG,EAAEC,aAAaF,KAAKF,KAAM,CACrCK,UAAW,oBAEXC,WAAW,EACXC,OAAQ,KAERC,aAAa,EAEbC,SAAU,IAGXP,KAAKQ,YAAc,IAAIC,IASxBZ,KAAKa,GACJX,MAAMY,KAAKD,GAEPV,KAAKF,KAAKS,SAAW,IACxBP,KAAKY,MAAQC,GAAY,IAAMb,KAAKc,aAAkC,IAArBd,KAAKF,KAAKS,UAC3DP,KAAKY,MAAMG,SASblB,YACC,IAAImB,EAAOhB,KAAKU,SAASM,KAAK,CAC7BC,SAAUjB,KAAKF,KAAKmB,SACpBC,SAAUlB,KAAKF,KAAKoB,WAGjBlB,KAAKF,KAAKQ,cACbU,EAAOA,EAAKG,QAAOC,GAAUpB,KAAKQ,YAAYa,IAAID,EAAOE,SAEvC,GAAfN,EAAKO,SAGLvB,KAAKF,KAAKM,WACbJ,KAAKwB,OAAOC,MAAM,0BAA0BT,EAAKO,qCACjDvB,KAAK0B,OAAOtB,UAAUJ,KAAKF,KAAKK,UAAWa,EAAM,CAAEX,OAAQL,KAAKF,KAAKO,WAErEL,KAAKwB,OAAOC,MAAM,0BAA0BT,EAAKO,2BACjDvB,KAAK0B,OAAOC,KAAK3B,KAAKF,KAAKK,UAAWa,EAAM,CAAEX,OAAQL,KAAKF,KAAKO,UAGjEL,KAAKQ,YAAYoB,SAclB/B,cAAcuB,GACRpB,KAAK6B,gBAAgBT,EAAOE,OAEjCtB,KAAKQ,YAAYsB,IAAIV,EAAOE"}