import{setInterval as s}from"timers-browserify";import t from"lodash";import e from"./base.js";var i=class extends e{constructor(s){super(s),this.opts=t.defaultsDeep(this.opts,{eventName:"$metrics.snapshot",broadcast:!1,groups:null,onlyChanges:!1,interval:5}),this.lastChanges=new Set}init(t){super.init(t),this.opts.interval>0&&(this.timer=s((()=>this.sendEvent()),1e3*this.opts.interval),this.timer.unref())}sendEvent(){let s=this.registry.list({includes:this.opts.includes,excludes:this.opts.excludes});this.opts.onlyChanges&&(s=s.filter((s=>this.lastChanges.has(s.name)))),0!=s.length&&(this.opts.broadcast?(this.logger.debug(`Send metrics.snapshot (${s.length} metrics) broadcast events.`),this.broker.broadcast(this.opts.eventName,s,{groups:this.opts.groups})):(this.logger.debug(`Send metrics.snapshot (${s.length} metrics) events.`),this.broker.emit(this.opts.eventName,s,{groups:this.opts.groups})),this.lastChanges.clear())}metricChanged(s){this.matchMetricName(s.name)&&this.lastChanges.add(s.name)}};export default i;
//# sourceMappingURL=event.js.map
