import t from"kleur";import{setInterval as e}from"timers-browserify";import s from"lodash";import a from"../constants.js";import i from"../../utils.js";import l from"./base.js";const{isFunction:r}=i;var n=class extends l{constructor(e){super(e),this.opts=s.defaultsDeep(this.opts,{interval:5,logger:null,colors:!0,onlyChanges:!0}),this.opts.colors||(t.enabled=!1),this.lastChanges=new Set}init(t){super.init(t),this.opts.interval>0&&(this.timer=e((()=>this.print()),1e3*this.opts.interval),this.timer.unref())}labelsToStr(e){const s=Object.keys(e);return 0==s.length?t.gray("{}"):t.gray("{")+s.map((s=>`${t.gray(this.formatLabelName(s))}: ${t.magenta(""+e[s])}`)).join(", ")+t.gray("}")}print(){let e=this.registry.list({includes:this.opts.includes,excludes:this.opts.excludes});this.opts.onlyChanges&&(e=e.filter((t=>this.lastChanges.has(t.name)))),0!=e.length&&(this.log(t.gray(`------------------- [ METRICS START (${e.length}) ] -------------------`)),e.forEach((e=>{if(this.log(t.cyan().bold(this.formatMetricName(e.name))+" "+t.gray("("+e.type+")")),0==e.values.size)this.log(t.gray("  <no values>"));else{const s=e.unit?t.gray(this.registry.pluralizeUnit(e.unit)):"";e.values.forEach((i=>{let l;const r=this.labelsToStr(i.labels);switch(e.type){case a.TYPE_COUNTER:case a.TYPE_GAUGE:case a.TYPE_INFO:l=""===i.value?t.grey("<empty string>"):t.green().bold(i.value),null!=i.rate&&(l=l+t.grey(" | Rate: ")+(null!=i.rate?t.green().bold(i.rate.toFixed(2)):"-"));break;case a.TYPE_HISTOGRAM:{const e=[];e.push("Count: "+i.count),i.buckets&&Object.keys(i.buckets).forEach((t=>{e.push(`${t}: ${null!=i.buckets[t]?i.buckets[t]:"-"}`)})),i.quantiles&&(e.push("Min: "+(null!=i.min?i.min.toFixed(2):"-")),e.push("Mean: "+(null!=i.mean?i.mean.toFixed(2):"-")),e.push("Var: "+(null!=i.variance?i.variance.toFixed(2):"-")),e.push("StdDev: "+(null!=i.stdDev?i.stdDev.toFixed(2):"-")),e.push("Max: "+(null!=i.max?i.max.toFixed(2):"-")),Object.keys(i.quantiles).forEach((t=>{e.push(`${t}: ${null!=i.quantiles[t]?i.quantiles[t].toFixed(2):"-"}`)}))),null!=i.rate&&e.push("Rate: "+(null!=i.rate?i.rate.toFixed(2):"-")),l=t.green().bold(e.join(" | "));break}}this.log(`  ${r}: ${l} ${s}`)}))}this.log("")})),this.log(t.gray(`-------------------- [ METRICS END (${e.length}) ] --------------------`)),this.lastChanges.clear())}log(...t){return r(this.opts.logger)?this.opts.logger(...t):this.logger.info(...t)}metricChanged(t){this.matchMetricName(t.name)&&this.lastChanges.add(t.name)}};export default n;
//# sourceMappingURL=console.js.map
