import{setInterval as t}from"timers-browserify";import e from"lodash";import s from"../constants.js";import a from"kleur";import i from"../../utils.js";import l from"./base.js";const{isFunction:r}=i;var n=class extends l{constructor(t){super(t),this.opts=e.defaultsDeep(this.opts,{interval:5,logger:null,colors:!0,onlyChanges:!0}),this.opts.colors||(a.enabled=!1),this.lastChanges=new Set}init(e){super.init(e),this.opts.interval>0&&(this.timer=t((()=>this.print()),1e3*this.opts.interval),this.timer.unref())}labelsToStr(t){const e=Object.keys(t);return 0==e.length?a.gray("{}"):a.gray("{")+e.map((e=>`${a.gray(this.formatLabelName(e))}: ${a.magenta(""+t[e])}`)).join(", ")+a.gray("}")}print(){let t=this.registry.list({includes:this.opts.includes,excludes:this.opts.excludes});this.opts.onlyChanges&&(t=t.filter((t=>this.lastChanges.has(t.name)))),0!=t.length&&(this.log(a.gray(`------------------- [ METRICS START (${t.length}) ] -------------------`)),t.forEach((t=>{if(this.log(a.cyan().bold(this.formatMetricName(t.name))+" "+a.gray("("+t.type+")")),0==t.values.size)this.log(a.gray("  <no values>"));else{const e=t.unit?a.gray(this.registry.pluralizeUnit(t.unit)):"";t.values.forEach((i=>{let l;const r=this.labelsToStr(i.labels);switch(t.type){case s.TYPE_COUNTER:case s.TYPE_GAUGE:case s.TYPE_INFO:l=""===i.value?a.grey("<empty string>"):a.green().bold(i.value),null!=i.rate&&(l=l+a.grey(" | Rate: ")+(null!=i.rate?a.green().bold(i.rate.toFixed(2)):"-"));break;case s.TYPE_HISTOGRAM:{const t=[];t.push("Count: "+i.count),i.buckets&&Object.keys(i.buckets).forEach((e=>{t.push(`${e}: ${null!=i.buckets[e]?i.buckets[e]:"-"}`)})),i.quantiles&&(t.push("Min: "+(null!=i.min?i.min.toFixed(2):"-")),t.push("Mean: "+(null!=i.mean?i.mean.toFixed(2):"-")),t.push("Var: "+(null!=i.variance?i.variance.toFixed(2):"-")),t.push("StdDev: "+(null!=i.stdDev?i.stdDev.toFixed(2):"-")),t.push("Max: "+(null!=i.max?i.max.toFixed(2):"-")),Object.keys(i.quantiles).forEach((e=>{t.push(`${e}: ${null!=i.quantiles[e]?i.quantiles[e].toFixed(2):"-"}`)}))),null!=i.rate&&t.push("Rate: "+(null!=i.rate?i.rate.toFixed(2):"-")),l=a.green().bold(t.join(" | "));break}}this.log(`  ${r}: ${l} ${e}`)}))}this.log("")})),this.log(a.gray(`-------------------- [ METRICS END (${t.length}) ] --------------------`)),this.lastChanges.clear())}log(...t){return r(this.opts.logger)?this.opts.logger(...t):this.logger.info(...t)}metricChanged(t){this.matchMetricName(t.name)&&this.lastChanges.add(t.name)}};export default n;
//# sourceMappingURL=console.js.map
