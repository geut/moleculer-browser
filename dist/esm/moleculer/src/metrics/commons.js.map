{"version":3,"file":"commons.js","sources":["../../../../../src/moleculer/src/metrics/commons.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst os = require(\"os\");\nconst METRIC = require(\"./constants\");\nconst cpuUsage = require(\"../cpu-usage\");\n\nlet v8, eventLoop;\n\n// Load `v8` module for heap metrics.\ntry {\n\tv8 = require(\"v8\");\n} catch (e) {\n\t// silent\n}\n\n/**\n * Register common OS, process & Moleculer metrics.\n */\nfunction registerCommonMetrics() {\n\tthis.logger.debug(\"Registering common metrics...\");\n\n\t// --- METRICS SELF METRICS ---\n\n\t// this.register({ name: METRIC.MOLECULER_METRICS_COMMON_COLLECT_TOTAL, type: METRIC.TYPE_COUNTER, description: \"Number of metric collections\" });\n\t// this.register({ name: METRIC.MOLECULER_METRICS_COMMON_COLLECT_TIME, type: METRIC.TYPE_GAUGE, description: \"Time of collecting metrics\", unit: METRIC.UNIT_MILLISECONDS });\n\n\t// --- PROCESS METRICS ---\n\n\tconst item = this.register({ name: METRIC.PROCESS_ARGUMENTS, type: METRIC.TYPE_INFO, labelNames: [\"index\"], description: \"Process arguments\" });\n\tprocess.argv.map((arg, index) => item.set(arg, { index }));\n\n\tthis.register({ name: METRIC.PROCESS_PID, type: METRIC.TYPE_INFO, description: \"Process PID\" }).set(process.pid);\n\tthis.register({ name: METRIC.PROCESS_PPID, type: METRIC.TYPE_INFO, description: \"Process parent PID\" }).set(process.ppid);\n\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_SIZE_TOTAL, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"Process heap size\" });\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_SIZE_USED, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"Process used heap size\" });\n\tthis.register({ name: METRIC.PROCESS_MEMORY_RSS, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"Process RSS size\" });\n\tthis.register({ name: METRIC.PROCESS_MEMORY_EXTERNAL, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"Process external memory size\" });\n\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_SPACE_SIZE_TOTAL, type: METRIC.TYPE_GAUGE, labelNames: [\"space\"], unit: METRIC.UNIT_BYTE, description: \"Process total heap space size\" });\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_SPACE_SIZE_USED, type: METRIC.TYPE_GAUGE, labelNames: [\"space\"], unit: METRIC.UNIT_BYTE, description: \"Process used heap space size\" });\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_SPACE_SIZE_AVAILABLE, type: METRIC.TYPE_GAUGE, labelNames: [\"space\"], unit: METRIC.UNIT_BYTE, description: \"Process available heap space size\" });\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_SPACE_SIZE_PHYSICAL, type: METRIC.TYPE_GAUGE, labelNames: [\"space\"], unit: METRIC.UNIT_BYTE, description: \"Process physical heap space size\" });\n\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_STAT_HEAP_SIZE_TOTAL, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"Process heap stat size\" });\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_STAT_EXECUTABLE_SIZE_TOTAL, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"Process heap stat executable size\" });\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_STAT_PHYSICAL_SIZE_TOTAL, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"Process heap stat physical size\" });\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_STAT_AVAILABLE_SIZE_TOTAL, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"Process heap stat available size\" });\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_STAT_USED_HEAP_SIZE, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"Process heap stat used size\" });\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_STAT_HEAP_SIZE_LIMIT, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"Process heap stat size limit\" });\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_STAT_MALLOCATED_MEMORY, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"Process heap stat mallocated size\" });\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_STAT_PEAK_MALLOCATED_MEMORY, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"Peak of process heap stat mallocated size\" });\n\tthis.register({ name: METRIC.PROCESS_MEMORY_HEAP_STAT_ZAP_GARBAGE, type: METRIC.TYPE_GAUGE, description: \"Process heap stat zap garbage\" });\n\n\tthis.register({ name: METRIC.PROCESS_UPTIME, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_SECONDS, description: \"Process uptime\" });\n\tthis.register({ name: METRIC.PROCESS_INTERNAL_ACTIVE_HANDLES, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_HANDLE, description: \"Number of active process handlers\" });\n\tthis.register({ name: METRIC.PROCESS_INTERNAL_ACTIVE_REQUESTS, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_REQUEST, description: \"Number of active process requests\" });\n\n\tthis.register({ name: METRIC.PROCESS_VERSIONS_NODE, type: METRIC.TYPE_INFO, description: \"Node version\" }).set(process.versions.node);\n\n\t// --- OS METRICS ---\n\n\tthis.register({ name: METRIC.OS_MEMORY_FREE, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"OS free memory size\" });\n\tthis.register({ name: METRIC.OS_MEMORY_USED, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"OS used memory size\" });\n\tthis.register({ name: METRIC.OS_MEMORY_TOTAL, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_BYTE, description: \"OS total memory size\" });\n\tthis.register({ name: METRIC.OS_UPTIME, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_SECONDS, description: \"OS uptime\" });\n\tthis.register({ name: METRIC.OS_TYPE, type: METRIC.TYPE_INFO, description: \"OS type\" }).set(os.type());\n\tthis.register({ name: METRIC.OS_RELEASE, type: METRIC.TYPE_INFO, description: \"OS release\" }).set(os.release());\n\tthis.register({ name: METRIC.OS_HOSTNAME, type: METRIC.TYPE_INFO, description: \"Hostname\" }).set(os.hostname());\n\tthis.register({ name: METRIC.OS_ARCH, type: METRIC.TYPE_INFO, description: \"OS architecture\" }).set(os.arch());\n\tthis.register({ name: METRIC.OS_PLATFORM, type: METRIC.TYPE_INFO, description: \"OS platform\" }).set(os.platform());\n\n\tconst userInfo = getUserInfo();\n\tthis.register({ name: METRIC.OS_USER_UID, type: METRIC.TYPE_INFO, description: \"UID\" }).set(userInfo.uid);\n\tthis.register({ name: METRIC.OS_USER_GID, type: METRIC.TYPE_INFO, description: \"GID\" }).set(userInfo.gid);\n\tthis.register({ name: METRIC.OS_USER_USERNAME, type: METRIC.TYPE_INFO, description: \"Username\" }).set(userInfo.username);\n\tthis.register({ name: METRIC.OS_USER_HOMEDIR, type: METRIC.TYPE_INFO, description: \"User's home directory\" }).set(userInfo.homedir);\n\n\tthis.register({ name: METRIC.OS_NETWORK_ADDRESS, type: METRIC.TYPE_INFO, labelNames: [\"interface\", \"family\"], description: \"Network address\" });\n\tthis.register({ name: METRIC.OS_NETWORK_MAC, type: METRIC.TYPE_INFO, labelNames: [\"interface\", \"family\"], description: \"MAC address\" });\n\n\tthis.register({ name: METRIC.OS_DATETIME_UNIX, type: METRIC.TYPE_GAUGE, description: \"Current datetime in Unix format\" });\n\tthis.register({ name: METRIC.OS_DATETIME_ISO, type: METRIC.TYPE_INFO, description: \"Current datetime in ISO string\" });\n\tthis.register({ name: METRIC.OS_DATETIME_UTC, type: METRIC.TYPE_INFO, description: \"Current UTC datetime\" });\n\tthis.register({ name: METRIC.OS_DATETIME_TZ_OFFSET, type: METRIC.TYPE_GAUGE, description: \"Timezone offset\" });\n\n\tthis.register({ name: METRIC.OS_CPU_LOAD_1, type: METRIC.TYPE_GAUGE, description: \"CPU load1\" });\n\tthis.register({ name: METRIC.OS_CPU_LOAD_5, type: METRIC.TYPE_GAUGE, description: \"CPU load5\" });\n\tthis.register({ name: METRIC.OS_CPU_LOAD_15, type: METRIC.TYPE_GAUGE, description: \"CPU load15\" });\n\tthis.register({ name: METRIC.OS_CPU_UTILIZATION, type: METRIC.TYPE_GAUGE, description: \"CPU utilization\" });\n\n\tthis.register({ name: METRIC.OS_CPU_USER, type: METRIC.TYPE_GAUGE, description: \"CPU user time\" });\n\tthis.register({ name: METRIC.OS_CPU_SYSTEM, type: METRIC.TYPE_GAUGE, description: \"CPU system time\" });\n\n\tthis.register({ name: METRIC.OS_CPU_TOTAL, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_CPU, description: \"Number of CPUs\" });\n\tthis.register({ name: METRIC.OS_CPU_INFO_MODEL, type: METRIC.TYPE_INFO, labelNames: [\"index\"], description: \"CPU model\" });\n\tthis.register({ name: METRIC.OS_CPU_INFO_SPEED, type: METRIC.TYPE_GAUGE, labelNames: [\"index\"], unit: METRIC.UNIT_GHZ, description: \"CPU speed\" });\n\tthis.register({ name: METRIC.OS_CPU_INFO_TIMES_USER, type: METRIC.TYPE_GAUGE, labelNames: [\"index\"], description: \"CPU user time\" });\n\tthis.register({ name: METRIC.OS_CPU_INFO_TIMES_SYS, type: METRIC.TYPE_GAUGE, labelNames: [\"index\"], description: \"CPU system time\" });\n\n\tstartGCWatcher.call(this);\n\tstartEventLoopStats.call(this);\n\n\tthis.logger.debug(`Registered ${this.store.size} common metrics.`);\n}\n\n/**\n * Start GC watcher listener.\n */\nfunction startGCWatcher() {\n// Load `gc-stats` module for GC metrics.\n\ttry {\n\t\tconst gc = (require(\"gc-stats\"))();\n\n\t\t/* istanbul ignore next */\n\t\tif (gc) {\n\t\t\t// --- GARBAGE COLLECTOR METRICS ---\n\n\t\t\tthis.register({ name: METRIC.PROCESS_GC_TIME, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_NANOSECONDS, description: \"GC time\" });\n\t\t\tthis.register({ name: METRIC.PROCESS_GC_TOTAL_TIME, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_MILLISECONDS, description: \"Total time of GC\" });\n\t\t\tthis.register({ name: METRIC.PROCESS_GC_EXECUTED_TOTAL, type: METRIC.TYPE_GAUGE, labelNames: [\"type\"], unit: null, description: \"Number of executed GC\" });\n\n\t\t\tgc.on(\"stats\", stats => {\n\t\t\t\tthis.set(METRIC.PROCESS_GC_TIME, stats.pause);\n\t\t\t\tthis.increment(METRIC.PROCESS_GC_TOTAL_TIME, null, stats.pause / 1e6);\n\t\t\t\tif (stats.gctype == 1)\n\t\t\t\t\tthis.increment(METRIC.PROCESS_GC_EXECUTED_TOTAL, { type: \"scavenge\" });\n\t\t\t\tif (stats.gctype == 2)\n\t\t\t\t\tthis.increment(METRIC.PROCESS_GC_EXECUTED_TOTAL, { type: \"marksweep\" });\n\t\t\t\tif (stats.gctype == 4)\n\t\t\t\t\tthis.increment(METRIC.PROCESS_GC_EXECUTED_TOTAL, { type: \"incremental\" });\n\t\t\t\tif (stats.gctype == 8)\n\t\t\t\t\tthis.increment(METRIC.PROCESS_GC_EXECUTED_TOTAL, { type: \"weakphantom\" });\n\t\t\t\tif (stats.gctype == 15) {\n\t\t\t\t\tthis.increment(METRIC.PROCESS_GC_EXECUTED_TOTAL, { type: \"scavenge\" });\n\t\t\t\t\tthis.increment(METRIC.PROCESS_GC_EXECUTED_TOTAL, { type: \"marksweep\" });\n\t\t\t\t\tthis.increment(METRIC.PROCESS_GC_EXECUTED_TOTAL, { type: \"incremental\" });\n\t\t\t\t\tthis.increment(METRIC.PROCESS_GC_EXECUTED_TOTAL, { type: \"weakphantom\" });\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t} catch (e) {\n\t\t// silent\n\t}\n}\n\nfunction startEventLoopStats() {\n\t// Load `event-loop-stats` metric for Event-loop metrics.\n\ttry {\n\t\teventLoop = require(\"event-loop-stats\");\n\t\tif (eventLoop) {\n\t\t\tthis.register({ name: METRIC.PROCESS_EVENTLOOP_LAG_MIN, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_MILLISECONDS, description: \"Minimum of event loop lag\" });\n\t\t\tthis.register({ name: METRIC.PROCESS_EVENTLOOP_LAG_AVG, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_MILLISECONDS, description: \"Average of event loop lag\" });\n\t\t\tthis.register({ name: METRIC.PROCESS_EVENTLOOP_LAG_MAX, type: METRIC.TYPE_GAUGE, unit: METRIC.UNIT_MILLISECONDS, description: \"Maximum of event loop lag\" });\n\t\t\tthis.register({ name: METRIC.PROCESS_EVENTLOOP_LAG_COUNT, type: METRIC.TYPE_GAUGE, description: \"Number of event loop lag samples.\" });\n\t\t}\n\t} catch (e) {\n\t\t// silent\n\t}\n}\n\n/**\n * Update common metric values.\n *\n * @returns {Promise}\n */\nfunction updateCommonMetrics() {\n\tthis.logger.debug(\"Update common metric values...\");\n\tconst end = this.timer();\n\n\t// --- PROCESS METRICS ---\n\n\tconst procMem = process.memoryUsage();\n\n\tthis.set(METRIC.PROCESS_MEMORY_HEAP_SIZE_TOTAL, procMem.heapTotal);\n\tthis.set(METRIC.PROCESS_MEMORY_HEAP_SIZE_USED, procMem.heapUsed);\n\tthis.set(METRIC.PROCESS_MEMORY_RSS, procMem.rss);\n\tthis.set(METRIC.PROCESS_MEMORY_EXTERNAL, procMem.external);\n\n\tif (v8 && v8.getHeapSpaceStatistics) {\n\t\tconst stat = v8.getHeapSpaceStatistics();\n\t\tstat.forEach(item => {\n\t\t\tconst space = item.space_name;\n\t\t\tthis.set(METRIC.PROCESS_MEMORY_HEAP_SPACE_SIZE_TOTAL, item.space_size, { space });\n\t\t\tthis.set(METRIC.PROCESS_MEMORY_HEAP_SPACE_SIZE_USED, item.space_used_size, { space });\n\t\t\tthis.set(METRIC.PROCESS_MEMORY_HEAP_SPACE_SIZE_AVAILABLE, item.space_available_size, { space });\n\t\t\tthis.set(METRIC.PROCESS_MEMORY_HEAP_SPACE_SIZE_PHYSICAL, item.physical_space_size, { space });\n\t\t});\n\t}\n\n\tif (v8 && v8.getHeapStatistics) {\n\t\tconst stat = v8.getHeapStatistics();\n\t\tthis.set(METRIC.PROCESS_MEMORY_HEAP_STAT_HEAP_SIZE_TOTAL, stat.total_heap_size);\n\t\tthis.set(METRIC.PROCESS_MEMORY_HEAP_STAT_EXECUTABLE_SIZE_TOTAL, stat.total_heap_size_executable);\n\t\tthis.set(METRIC.PROCESS_MEMORY_HEAP_STAT_PHYSICAL_SIZE_TOTAL, stat.total_physical_size);\n\t\tthis.set(METRIC.PROCESS_MEMORY_HEAP_STAT_AVAILABLE_SIZE_TOTAL, stat.total_available_size);\n\t\tthis.set(METRIC.PROCESS_MEMORY_HEAP_STAT_USED_HEAP_SIZE, stat.used_heap_size);\n\t\tthis.set(METRIC.PROCESS_MEMORY_HEAP_STAT_HEAP_SIZE_LIMIT, stat.heap_size_limit);\n\t\tthis.set(METRIC.PROCESS_MEMORY_HEAP_STAT_MALLOCATED_MEMORY, stat.malloced_memory);\n\t\tthis.set(METRIC.PROCESS_MEMORY_HEAP_STAT_PEAK_MALLOCATED_MEMORY, stat.peak_malloced_memory);\n\t\tthis.set(METRIC.PROCESS_MEMORY_HEAP_STAT_ZAP_GARBAGE, stat.does_zap_garbage);\n\t}\n\n\tthis.set(METRIC.PROCESS_UPTIME, process.uptime());\n\tthis.set(METRIC.PROCESS_INTERNAL_ACTIVE_HANDLES, process._getActiveHandles().length);\n\tthis.set(METRIC.PROCESS_INTERNAL_ACTIVE_REQUESTS, process._getActiveRequests().length);\n\n\t// --- OS METRICS ---\n\n\tconst freeMem = os.freemem();\n\tconst totalMem = os.totalmem();\n\tconst usedMem = totalMem - freeMem;\n\tthis.set(METRIC.OS_MEMORY_FREE, freeMem);\n\tthis.set(METRIC.OS_MEMORY_USED, usedMem);\n\tthis.set(METRIC.OS_MEMORY_TOTAL, totalMem);\n\tthis.set(METRIC.OS_UPTIME, os.uptime());\n\tthis.set(METRIC.OS_TYPE, os.type());\n\tthis.set(METRIC.OS_RELEASE, os.release());\n\tthis.set(METRIC.OS_HOSTNAME, os.hostname());\n\tthis.set(METRIC.OS_ARCH, os.arch());\n\tthis.set(METRIC.OS_PLATFORM, os.platform());\n\n\t// --- NETWORK INTERFACES ---\n\n\n\tconst getNetworkInterfaces = () =>{\n\t\tconst list = [];\n\t\tconst ilist = [];\n\t\tconst interfaces = os.networkInterfaces();\n\t\tfor (let iface in interfaces) {\n\t\t\tfor (let i in interfaces[iface]) {\n\t\t\t\tconst f = interfaces[iface][i];\n\t\t\t\tif (f.internal) {\n\t\t\t\t\tilist.push({ f,iface });\n\t\t\t\t} else{\n\t\t\t\t\tlist.push({ f,iface });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list.length > 0 ? list : ilist;\n\t};\n\n\tconst interfaces = getNetworkInterfaces();\n\tfor (let { f,iface } of interfaces) {\n\t\tthis.set(METRIC.OS_NETWORK_ADDRESS, f.address, { interface: iface, family: f.family });\n\t\tthis.set(METRIC.OS_NETWORK_MAC, f.mac, { interface: iface, family: f.family });\n\t}\n\n\tconst d = new Date();\n\tthis.set(METRIC.OS_DATETIME_UNIX, d.valueOf());\n\tthis.set(METRIC.OS_DATETIME_ISO, d.toISOString());\n\tthis.set(METRIC.OS_DATETIME_UTC, d.toUTCString());\n\tthis.set(METRIC.OS_DATETIME_TZ_OFFSET, d.getTimezoneOffset());\n\n\tconst load = os.loadavg();\n\tthis.set(METRIC.OS_CPU_LOAD_1, load[0]);\n\tthis.set(METRIC.OS_CPU_LOAD_5, load[1]);\n\tthis.set(METRIC.OS_CPU_LOAD_15, load[2]);\n\n\tif (eventLoop && eventLoop.sense) {\n\t\tconst stat = eventLoop.sense();\n\t\tthis.set(METRIC.PROCESS_EVENTLOOP_LAG_MIN, stat.min);\n\t\tthis.set(METRIC.PROCESS_EVENTLOOP_LAG_AVG, stat.num ? stat.sum / stat.num : 0);\n\t\tthis.set(METRIC.PROCESS_EVENTLOOP_LAG_MAX, stat.max);\n\t\tthis.set(METRIC.PROCESS_EVENTLOOP_LAG_COUNT, stat.num);\n\t}\n\n\t// this.increment(METRIC.MOLECULER_METRICS_COMMON_COLLECT_TOTAL);\n\tconst duration = end();\n\n\treturn this.broker.Promise.resolve()\n\t\t.then(() => cpuUsage().then(res => {\n\t\t\tthis.set(METRIC.OS_CPU_UTILIZATION, res.avg);\n\n\t\t\ttry {\n\t\t\t\tconst cpus = os.cpus();\n\t\t\t\tthis.set(METRIC.OS_CPU_TOTAL, cpus.length);\n\t\t\t\tthis.set(METRIC.OS_CPU_USER, cpus.reduce((a,b) => a + b.times.user, 0));\n\t\t\t\tthis.set(METRIC.OS_CPU_SYSTEM, cpus.reduce((a,b) => a + b.times.sys, 0));\n\n\t\t\t\tcpus.forEach((cpu, index) => {\n\t\t\t\t\tthis.set(METRIC.OS_CPU_INFO_MODEL, cpu.model, { index });\n\t\t\t\t\tthis.set(METRIC.OS_CPU_INFO_SPEED, cpu.speed, { index });\n\t\t\t\t\tthis.set(METRIC.OS_CPU_INFO_TIMES_USER, cpu.times.user, { index });\n\t\t\t\t\tthis.set(METRIC.OS_CPU_INFO_TIMES_SYS, cpu.times.sys, { index });\n\t\t\t\t});\n\n\t\t\t} catch(err) {\n\t\t\t\t// silent\n\t\t\t}\n\t\t}))\n\t\t.catch(() => {\n\t\t\t// silent this.logger.warn(\"Unable to collect CPU usage metrics.\", err);\n\t\t})\n\t\t.then(() => {\n\t\t\tthis.logger.debug(`Collected common metric values in ${duration.toFixed(3)} msec.`);\n\t\t});\n}\n\n/**\n * Get OS user info (safe-mode)\n *\n * @returns\n */\nfunction getUserInfo() {\n\ttry {\n\t\treturn os.userInfo();\n\t} catch (e) {\n\t\t/* istanbul ignore next */\n\t\treturn {};\n\t}\n}\n\n/**\n * Measure event loop lag.\n *\n * @returns {Promise<Number>}\n *\nfunction measureEventLoopLag() {\n\treturn new Promise(resolve => {\n\t\tconst start = process.hrtime();\n\t\tsetImmediate(() => {\n\t\t\tconst delta = process.hrtime(start);\n\t\t\tresolve(delta[0] * 1e9 + delta[1]);\n\t\t});\n\t});\n}*/\n\nmodule.exports = {\n\tregisterCommonMetrics,\n\tupdateCommonMetrics\n};\n"],"names":["v8","eventLoop","require$$0","e","startGCWatcher","gc","this","register","name","METRIC","PROCESS_GC_TIME","type","TYPE_GAUGE","unit","UNIT_NANOSECONDS","description","PROCESS_GC_TOTAL_TIME","UNIT_MILLISECONDS","PROCESS_GC_EXECUTED_TOTAL","labelNames","on","stats","set","pause","increment","gctype","startEventLoopStats","require$$2","PROCESS_EVENTLOOP_LAG_MIN","PROCESS_EVENTLOOP_LAG_AVG","PROCESS_EVENTLOOP_LAG_MAX","PROCESS_EVENTLOOP_LAG_COUNT","registerCommonMetrics","logger","debug","item","PROCESS_ARGUMENTS","TYPE_INFO","process","argv","map","arg","index","PROCESS_PID","pid","PROCESS_PPID","ppid","PROCESS_MEMORY_HEAP_SIZE_TOTAL","UNIT_BYTE","PROCESS_MEMORY_HEAP_SIZE_USED","PROCESS_MEMORY_RSS","PROCESS_MEMORY_EXTERNAL","PROCESS_MEMORY_HEAP_SPACE_SIZE_TOTAL","PROCESS_MEMORY_HEAP_SPACE_SIZE_USED","PROCESS_MEMORY_HEAP_SPACE_SIZE_AVAILABLE","PROCESS_MEMORY_HEAP_SPACE_SIZE_PHYSICAL","PROCESS_MEMORY_HEAP_STAT_HEAP_SIZE_TOTAL","PROCESS_MEMORY_HEAP_STAT_EXECUTABLE_SIZE_TOTAL","PROCESS_MEMORY_HEAP_STAT_PHYSICAL_SIZE_TOTAL","PROCESS_MEMORY_HEAP_STAT_AVAILABLE_SIZE_TOTAL","PROCESS_MEMORY_HEAP_STAT_USED_HEAP_SIZE","PROCESS_MEMORY_HEAP_STAT_HEAP_SIZE_LIMIT","PROCESS_MEMORY_HEAP_STAT_MALLOCATED_MEMORY","PROCESS_MEMORY_HEAP_STAT_PEAK_MALLOCATED_MEMORY","PROCESS_MEMORY_HEAP_STAT_ZAP_GARBAGE","PROCESS_UPTIME","UNIT_SECONDS","PROCESS_INTERNAL_ACTIVE_HANDLES","UNIT_HANDLE","PROCESS_INTERNAL_ACTIVE_REQUESTS","UNIT_REQUEST","PROCESS_VERSIONS_NODE","versions","node","OS_MEMORY_FREE","OS_MEMORY_USED","OS_MEMORY_TOTAL","OS_UPTIME","OS_TYPE","os","OS_RELEASE","release","OS_HOSTNAME","hostname","OS_ARCH","arch","OS_PLATFORM","platform","userInfo","getUserInfo","OS_USER_UID","uid","OS_USER_GID","gid","OS_USER_USERNAME","username","OS_USER_HOMEDIR","homedir","OS_NETWORK_ADDRESS","OS_NETWORK_MAC","OS_DATETIME_UNIX","OS_DATETIME_ISO","OS_DATETIME_UTC","OS_DATETIME_TZ_OFFSET","OS_CPU_LOAD_1","OS_CPU_LOAD_5","OS_CPU_LOAD_15","OS_CPU_UTILIZATION","OS_CPU_USER","OS_CPU_SYSTEM","OS_CPU_TOTAL","UNIT_CPU","OS_CPU_INFO_MODEL","OS_CPU_INFO_SPEED","UNIT_GHZ","OS_CPU_INFO_TIMES_USER","OS_CPU_INFO_TIMES_SYS","call","store","size","updateCommonMetrics","end","timer","procMem","memoryUsage","heapTotal","heapUsed","rss","external","getHeapSpaceStatistics","forEach","space","space_name","space_size","space_used_size","space_available_size","physical_space_size","getHeapStatistics","stat","total_heap_size","total_heap_size_executable","total_physical_size","total_available_size","used_heap_size","heap_size_limit","malloced_memory","peak_malloced_memory","does_zap_garbage","uptime","_getActiveHandles","length","_getActiveRequests","freeMem","freemem","totalMem","totalmem","usedMem","interfaces","list","ilist","networkInterfaces","iface","i","f","internal","push","getNetworkInterfaces","address","interface","family","mac","d","Date","valueOf","toISOString","toUTCString","getTimezoneOffset","load","loadavg","sense","min","num","sum","max","duration","broker","Promise","resolve","then","cpuUsage","res","avg","cpus","reduce","a","b","times","user","sys","cpu","model","speed","err","catch","toFixed"],"mappings":"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"}