{"version":3,"file":"info.js","sources":["../../../../../../src/moleculer/src/metrics/types/info.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst { pick } = require(\"lodash\");\nconst BaseMetric = require(\"./base\");\nconst METRIC = require(\"../constants\");\n\n/**\n * Information metric.\n *\n * @class InfoMetric\n * @extends {BaseMetric}\n */\nclass InfoMetric extends BaseMetric {\n\n\t/**\n\t * Creates an instance of InfoMetric.\n\t * @param {Object} opts\n\t * @param {MetricRegistry} registry\n\t * @memberof InfoMetric\n\t */\n\tconstructor(opts, registry) {\n\t\tsuper(opts, registry);\n\t\tthis.type = METRIC.TYPE_INFO;\n\t}\n\n\t/**\n\t * Set value.\n\t *\n\t * @param {*} value\n\t * @param {Object?} labels\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof InfoMetric\n\t */\n\tset(value, labels, timestamp) {\n\t\tconst hash = this.hashingLabels(labels);\n\t\tlet item = this.values.get(hash);\n\t\tif (item) {\n\t\t\tif (value != item.value) {\n\t\t\t\titem.value = value;\n\t\t\t\titem.timestamp = timestamp == null ? Date.now() : timestamp;\n\t\t\t\tthis.changed(value, labels, timestamp);\n\t\t\t}\n\t\t} else {\n\t\t\titem = {\n\t\t\t\tvalue,\n\t\t\t\tlabels: pick(labels, this.labelNames),\n\t\t\t\ttimestamp: timestamp == null ? Date.now() : timestamp\n\t\t\t};\n\t\t\tthis.values.set(hash, item);\n\t\t\tthis.changed(value, labels, timestamp);\n\t\t}\n\n\t\treturn item;\n\t}\n\n\t/**\n\t * Reset item by labels.\n\t *\n\t * @param {Object} labels\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof InfoMetric\n\t */\n\treset(labels, timestamp) {\n\t\treturn this.set(null, labels, timestamp);\n\t}\n\n\t/**\n\t * Reset all items.\n\t *\n\t * @param {Number?} timestamp\n\t * @memberof InfoMetric\n\t */\n\tresetAll(timestamp) {\n\t\tthis.values.forEach(item => {\n\t\t\titem.value = null;\n\t\t\titem.timestamp = timestamp == null ? Date.now() : timestamp;\n\t\t});\n\t\tthis.changed();\n\t}\n\n\t/**\n\t * Generate a snapshot.\n\t *\n\t * @returns {Array<Object>}\n\t * @memberof InfoMetric\n\t */\n\tgenerateSnapshot() {\n\t\tconst snapshot = Array.from(this.values.keys()).map(key => {\n\t\t\tconst item = this.values.get(key);\n\t\t\treturn {\n\t\t\t\tkey,\n\t\t\t\tvalue: item.value,\n\t\t\t\tlabels: item.labels,\n\t\t\t\ttimestamp: item.timestamp\n\t\t\t};\n\t\t});\n\n\t\treturn snapshot;\n\t}\n}\n\nmodule.exports = InfoMetric;\n"],"names":["pick","require$$0","BaseMetric","[object Object]","opts","registry","super","this","type","METRIC","TYPE_INFO","value","labels","timestamp","hash","hashingLabels","item","values","get","Date","now","changed","labelNames","set","forEach","Array","from","keys","map","key"],"mappings":"8EAQA,MAAMA,KAAEA,GAASC,QAUjB,cAAyBC,EAQxBC,YAAYC,EAAMC,GACjBC,MAAMF,EAAMC,GACZE,KAAKC,KAAOC,EAAOC,UAYpBP,IAAIQ,EAAOC,EAAQC,GAClB,MAAMC,EAAOP,KAAKQ,cAAcH,GAChC,IAAII,EAAOT,KAAKU,OAAOC,IAAIJ,GAiB3B,OAhBIE,EACCL,GAASK,EAAKL,QACjBK,EAAKL,MAAQA,EACbK,EAAKH,UAAyB,MAAbA,EAAoBM,KAAKC,MAAQP,EAClDN,KAAKc,QAAQV,EAAOC,EAAQC,KAG7BG,EAAO,CACNL,MAAAA,EACAC,OAAQZ,EAAKY,EAAQL,KAAKe,YAC1BT,UAAwB,MAAbA,EAAoBM,KAAKC,MAAQP,GAE7CN,KAAKU,OAAOM,IAAIT,EAAME,GACtBT,KAAKc,QAAQV,EAAOC,EAAQC,IAGtBG,EAWRb,MAAMS,EAAQC,GACb,OAAON,KAAKgB,IAAI,KAAMX,EAAQC,GAS/BV,SAASU,GACRN,KAAKU,OAAOO,SAAQR,IACnBA,EAAKL,MAAQ,KACbK,EAAKH,UAAyB,MAAbA,EAAoBM,KAAKC,MAAQP,KAEnDN,KAAKc,UASNlB,mBAWC,OAViBsB,MAAMC,KAAKnB,KAAKU,OAAOU,QAAQC,KAAIC,IACnD,MAAMb,EAAOT,KAAKU,OAAOC,IAAIW,GAC7B,MAAO,CACNA,IAAAA,EACAlB,MAAOK,EAAKL,MACZC,OAAQI,EAAKJ,OACbC,UAAWG,EAAKH"}