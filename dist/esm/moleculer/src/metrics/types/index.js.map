{"version":3,"file":"index.js","sources":["../../../../../../src/moleculer/src/metrics/types/index.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst { BrokerOptionsError } = require(\"../../errors\");\n\nconst Types = {\n\tBase: require(\"./base\"),\n\tCounter: require(\"./counter\"),\n\tGauge: require(\"./gauge\"),\n\tHistogram: require(\"./histogram\"),\n\tInfo: require(\"./info\"),\n};\n\n/**\n * Get MetricType class by name.\n *\n * @param {String} name\n * @returns\n */\nfunction getByName(name) {\n\t/* istanbul ignore next */\n\tif (!name)\n\t\treturn null;\n\n\tlet n = Object.keys(Types).find(n => n.toLowerCase() == name.toLowerCase());\n\tif (n)\n\t\treturn Types[n];\n}\n\n/**\n * Resolve metric type by name\n *\n * @param {string} type\n * @returns {BaseMetric}\n * @memberof ServiceBroker\n */\nfunction resolve(type) {\n\tconst TypeClass = getByName(type);\n\tif (!TypeClass)\n\t\tthrow new BrokerOptionsError(`Invalid metric type '${type}'.`, { type });\n\n\treturn TypeClass;\n}\n\nfunction register(name, value) {\n\tTypes[name] = value;\n}\n\nmodule.exports = Object.assign(Types, { resolve, register });\n"],"names":["BrokerOptionsError","require$$0","Types","Base","require$$1","Counter","require$$2","Gauge","require$$3","Histogram","require$$4","Info","require$$5","Object","assign","resolve","type","TypeClass","name","n","keys","find","toLowerCase","getByName","register","value"],"mappings":"qKAQA,MAAMA,mBAAEA,GAAuBC,EAEzBC,EAAQ,CACbC,KAAMC,EACNC,QAASC,EACTC,MAAOC,EACPC,UAAWC,EACXC,KAAMC,SAsCUC,OAAOC,OAAOZ,EAAO,CAAEa,QAZxC,SAAiBC,GAChB,MAAMC,EAlBP,SAAmBC,GAElB,IAAKA,EACJ,OAAO,KAER,IAAIC,EAAIN,OAAOO,KAAKlB,GAAOmB,MAAKF,GAAKA,EAAEG,eAAiBJ,EAAKI,gBAC7D,OAAIH,EACIjB,EAAMiB,QADd,EAYkBI,CAAUP,GAC5B,IAAKC,EACJ,MAAM,IAAIjB,EAAmB,wBAAwBgB,MAAU,CAAEA,KAAAA,IAElE,OAAOC,GAOyCO,SAJjD,SAAkBN,EAAMO,GACvBvB,EAAMgB,GAAQO"}