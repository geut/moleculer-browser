{"version":3,"file":"histogram.js","sources":["../../../../../../src/moleculer/src/metrics/types/histogram.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst BaseMetric = require(\"./base\");\nconst _ = require(\"lodash\");\nconst METRIC = require(\"../constants\");\nconst MetricRate = require(\"../rates\");\nconst { isPlainObject } = require(\"../../utils\");\nconst sortAscending = (a, b) => a - b;\nconst setProp = (o, k, v) => {\n\to[k] = v;\n\treturn o;\n};\n\n/**\n * Histogram metric class.\n *\n * @class HistogramMetric\n * @extends {BaseMetric}\n */\nclass HistogramMetric extends BaseMetric {\n\n\t/**\n\t * Creates an instance of HistogramMetric.\n\t * @param {Object} opts\n\t * @param {MetricRegistry} registry\n\t * @memberof HistogramMetric\n\t */\n\tconstructor(opts, registry) {\n\t\tsuper(opts, registry);\n\t\tthis.type = METRIC.TYPE_HISTOGRAM;\n\n\t\t// Create buckets\n\t\tif (isPlainObject(opts.linearBuckets)) {\n\t\t\tthis.buckets = HistogramMetric.generateLinearBuckets(opts.linearBuckets.start, opts.linearBuckets.width, opts.linearBuckets.count);\n\t\t} else if (isPlainObject(opts.exponentialBuckets)) {\n\t\t\tthis.buckets = HistogramMetric.generateExponentialBuckets(opts.exponentialBuckets.start, opts.exponentialBuckets.factor, opts.exponentialBuckets.count);\n\t\t} else if (Array.isArray(opts.buckets)) {\n\t\t\tthis.buckets = Array.from(opts.buckets);\n\t\t} else if (opts.buckets === true) {\n\t\t\tthis.buckets = this.registry.opts.defaultBuckets;\n\t\t}\n\t\tif (this.buckets) {\n\t\t\tthis.buckets.sort(sortAscending);\n\t\t}\n\n\t\t// Create quantiles\n\t\tif (Array.isArray(opts.quantiles)) {\n\t\t\tthis.quantiles = Array.from(opts.quantiles);\n\t\t} else if (opts.quantiles === true) {\n\t\t\tthis.quantiles = this.registry.opts.defaultQuantiles;\n\t\t}\n\t\tif (this.quantiles) {\n\t\t\tthis.quantiles.sort(sortAscending);\n\t\t\tthis.maxAgeSeconds = opts.maxAgeSeconds || this.registry.opts.defaultMaxAgeSeconds; // 1 minute\n\t\t\tthis.ageBuckets = opts.ageBuckets || this.registry.opts.defaultAgeBuckets; // 10 secs per bucket\n\t\t}\n\n\t\tthis.rate = opts.rate;\n\t}\n\n\t/**\n\t * Observe a value.\n\t *\n\t * @param {Number} value\n\t * @param {Object?} labels\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof HistogramMetric\n\t */\n\tobserve(value, labels, timestamp) {\n\t\tconst hash = this.hashingLabels(labels);\n\t\tlet item = this.values.get(hash);\n\t\tif (!item) {\n\t\t\titem = this.resetItem({\n\t\t\t\tlabels: _.pick(labels, this.labelNames)\n\t\t\t});\n\n\t\t\tif (this.rate)\n\t\t\t\titem.rate = new MetricRate(this, item, 1);\n\n\t\t\tthis.values.set(hash, item);\n\t\t}\n\n\t\titem.timestamp = timestamp == null ? Date.now() : timestamp;\n\t\titem.sum += value;\n\t\titem.count++;\n\t\titem.lastValue = value;\n\n\t\tif (item.bucketValues) {\n\t\t\tconst len = this.buckets.length;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tif (value <= this.buckets[i]) {\n\t\t\t\t\titem.bucketValues[this.buckets[i]] += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (item.quantileValues) {\n\t\t\titem.quantileValues.add(value);\n\t\t}\n\n\t\tif (item.rate)\n\t\t\titem.rate.update(item.count);\n\n\t\tthis.changed(value, labels, timestamp);\n\n\t\treturn item;\n\t}\n\n\t/**\n\t * Create new bucket values based on options.\n\t *\n\t * @returns {Object}\n\t * @memberof HistogramMetric\n\t */\n\tcreateBucketValues() {\n\t\treturn this.buckets.reduce((a, bound) => setProp(a, bound, 0), {});\n\t}\n\n\t/**\n\t * Generate a snapshot\n\t *\n\t * @returns {Array<Object>}\n\t * @memberof HistogramMetric\n\t */\n\tgenerateSnapshot() {\n\t\treturn Array.from(this.values.keys()).map(key => this.generateItemSnapshot(this.values.get(key), key));\n\t}\n\n\t/**\n\t * Generate a snapshot for an item\n\t *\n\t * @param {Object} item\n\t * @param {String} key\n\t * @returns {Object}\n\t * @memberof HistogramMetric\n\t */\n\tgenerateItemSnapshot(item, key) {\n\t\tconst snapshot = {\n\t\t\tkey,\n\t\t\tlabels: item.labels,\n\t\t\tcount: item.count,\n\t\t\tsum: item.sum,\n\t\t\tlastValue: item.lastValue,\n\t\t\ttimestamp: item.timestamp,\n\t\t};\n\n\t\tif (this.buckets)\n\t\t\tsnapshot.buckets = this.buckets.reduce((a, b) => setProp(a, b, item.bucketValues[b]), {});\n\n\t\tif (this.quantiles)\n\t\t\tObject.assign(snapshot, item.quantileValues.snapshot());\n\n\t\tif (item.rate)\n\t\t\tsnapshot.rate = item.rate.rate;\n\n\t\treturn snapshot;\n\t}\n\n\t/**\n\t * Reset value of item.\n\t *\n\t * @param {Object} item\n\t * @param {Number?} timestamp\n\t */\n\tresetItem(item, timestamp) {\n\t\titem.timestamp = timestamp == null ? Date.now() : timestamp;\n\t\titem.sum = 0;\n\t\titem.count = 0;\n\t\titem.lastValue = null;\n\n\t\tif (this.buckets) {\n\t\t\titem.bucketValues = this.createBucketValues();\n\t\t}\n\n\t\tif (this.quantiles) {\n\t\t\titem.quantileValues = new TimeWindowQuantiles(this, this.quantiles, this.maxAgeSeconds, this.ageBuckets);\n\t\t}\n\n\t\treturn item;\n\t}\n\n\t/**\n\t * Reset item by labels.\n\t *\n\t * @param {Object} labels\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof HistogramMetric\n\t */\n\treset(labels, timestamp) {\n\t\tconst hash = this.hashingLabels(labels);\n\t\tconst item = this.values.get(hash);\n\t\tif (item) {\n\t\t\tthis.resetItem(item, timestamp);\n\t\t\tthis.changed(null, labels, timestamp);\n\t\t}\n\t}\n\n\t/**\n\t * Reset all items.\n\t *\n\t * @param {Number?} timestamp\n\t * @memberof HistogramMetric\n\t */\n\tresetAll(timestamp) {\n\t\tthis.values.forEach(item => this.resetItem(item, timestamp));\n\t\tthis.changed();\n\t}\n\n\t/**\n\t * Generate linear buckets\n\t *\n\t * @static\n\t * @param {Number} start\n\t * @param {Number} width\n\t * @param {Number} count\n\t * @returns {Array<Number>}\n\t * @memberof HistogramMetric\n\t */\n\tstatic generateLinearBuckets(start, width, count) {\n\t\tconst buckets = [];\n\t\tfor (let i = 0; i < count; i++)\n\t\t\tbuckets.push(start + i * width);\n\n\t\treturn buckets;\n\t}\n\n\t/**\n\t * Generate exponential buckets\n\t *\n\t * @static\n\t * @param {Number} start\n\t * @param {Number} factor\n\t * @param {Number} count\n\t * @returns {Array<Number>}\n\t * @memberof HistogramMetric\n\t */\n\tstatic generateExponentialBuckets(start, factor, count) {\n\t\tconst buckets = [];\n\t\tfor (let i = 0; i < count; i++)\n\t\t\tbuckets[i] = start * Math.pow(factor, i);\n\n\t\treturn buckets;\n\t}\n}\n\n/**\n * Timewindow class for quantiles.\n *\n * @class TimeWindowQuantiles\n */\nclass TimeWindowQuantiles {\n\n\t/**\n\t * Creates an instance of TimeWindowQuantiles.\n\t * @param {BaseMetric} metric\n\t * @param {Array<Number>} quantiles\n\t * @param {Number} maxAgeSeconds\n\t * @param {Number} ageBuckets\n\t * @memberof TimeWindowQuantiles\n\t */\n\tconstructor(metric, quantiles, maxAgeSeconds, ageBuckets) {\n\t\tthis.metric = metric;\n\t\tthis.quantiles = Array.from(quantiles);\n\t\tthis.maxAgeSeconds = maxAgeSeconds;\n\t\tthis.ageBuckets = ageBuckets;\n\t\tthis.ringBuckets = [];\n\t\tfor(let i = 0; i < ageBuckets; i++) {\n\t\t\tthis.ringBuckets.push(new Bucket());\n\t\t}\n\t\tthis.dirty = true;\n\n\t\tthis.currentBucket = -1;\n\t\tthis.rotate();\n\n\t\tthis.lastSnapshot = null;\n\t\tthis.setDirty();\n\t}\n\n\t/**\n\t * Set dirty flag.\n\t *\n\t * @memberof TimeWindowQuantiles\n\t */\n\tsetDirty() {\n\t\tthis.dirty = true;\n\t\tthis.metric.setDirty();\n\t}\n\n\t/**\n\t * Clear dirty flag.\n\t *\n\t * @memberof TimeWindowQuantiles\n\t */\n\tclearDirty() {\n\t\tthis.dirty = false;\n\t}\n\n\t/**\n\t * Rotate the ring buckets.\n\t *\n\t * @memberof TimeWindowQuantiles\n\t */\n\trotate() {\n\t\tthis.currentBucket = (this.currentBucket + 1) % this.ageBuckets;\n\t\tthis.ringBuckets[this.currentBucket].clear();\n\t\tthis.setDirty();\n\n\t\tsetTimeout(() => this.rotate(), (this.maxAgeSeconds / this.ageBuckets) * 1000).unref();\n\t}\n\n\t/**\n\t * Add a new value to the current bucket.\n\t *\n\t * @param {Number} value\n\t * @memberof TimeWindowQuantiles\n\t */\n\tadd(value) {\n\t\tthis.setDirty();\n\t\tthis.ringBuckets[this.currentBucket].add(value);\n\t}\n\n\t/**\n\t * Generate a snapshot from buckets and calculate min, max, mean, quantiles, variance & StdDev.\n\t *\n\t * @returns {Object}\n\t * @memberof TimeWindowQuantiles\n\t */\n\tsnapshot() {\n\t\tif (!this.dirty && this.lastSnapshot)\n\t\t\treturn this.lastSnapshot;\n\n\t\tconst samples = this.ringBuckets.reduce((a, b) => a.concat(b.samples), []);\n\t\tsamples.sort(sortAscending);\n\n\t\tconst mean = samples.length ? samples.reduce((a, b) => a + b, 0) / samples.length : null;\n\t\tconst variance = samples.length > 1 ? samples.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / (samples.length - 1) : null;\n\t\tconst stdDev = variance ? Math.sqrt(variance) : null;\n\n\t\tthis.lastSnapshot = {\n\t\t\tmin: samples.length ? samples[0] : null,\n\t\t\tmean,\n\t\t\tvariance,\n\t\t\tstdDev,\n\t\t\tmax: samples.length ? samples[samples.length - 1] : null,\n\t\t\tquantiles: this.quantiles.reduce((a, q) => setProp(a, q, samples[Math.ceil(q * samples.length) - 1]), {})\n\t\t};\n\n\t\tthis.clearDirty();\n\n\t\treturn this.lastSnapshot;\n\t}\n}\n\n/**\n * Bucket class\n *\n * @class Bucket\n */\nclass Bucket {\n\t/**\n\t * Creates an instance of Bucket.\n\t * @memberof Bucket\n\t */\n\tconstructor() {\n\t\tthis.count = 0;\n\t\tthis.samples = [];\n\t}\n\n\t/**\n\t * Add value to the bucket.\n\t *\n\t * @param {Number} value\n\t * @memberof Bucket\n\t */\n\tadd(value) {\n\t\tthis.samples.push(value);\n\t\tthis.count++;\n\t}\n\n\t/**\n\t * Clear bucket.\n\t *\n\t * @memberof Bucket\n\t */\n\tclear() {\n\t\tthis.count = 0;\n\t\tthis.samples.length = 0;\n\t}\n}\n\nHistogramMetric.Bucket = Bucket;\nHistogramMetric.TimeWindowQuantiles = TimeWindowQuantiles;\n\nmodule.exports = HistogramMetric;\n"],"names":["require$$0","BaseMetric","METRIC","MetricRate"],"mappings":"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"}