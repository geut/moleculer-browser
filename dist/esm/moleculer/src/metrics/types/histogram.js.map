{"version":3,"file":"histogram.js","sources":["../../../../../../src/moleculer/src/metrics/types/histogram.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst BaseMetric = require(\"./base\");\nconst _ = require(\"lodash\");\nconst METRIC = require(\"../constants\");\nconst MetricRate = require(\"../rates\");\nconst { isPlainObject } = require(\"../../utils\");\nconst sortAscending = (a, b) => a - b;\nconst setProp = (o, k, v) => {\n\to[k] = v;\n\treturn o;\n};\n\n/**\n * Histogram metric class.\n *\n * @class HistogramMetric\n * @extends {BaseMetric}\n */\nclass HistogramMetric extends BaseMetric {\n\n\t/**\n\t * Creates an instance of HistogramMetric.\n\t * @param {Object} opts\n\t * @param {MetricRegistry} registry\n\t * @memberof HistogramMetric\n\t */\n\tconstructor(opts, registry) {\n\t\tsuper(opts, registry);\n\t\tthis.type = METRIC.TYPE_HISTOGRAM;\n\n\t\t// Create buckets\n\t\tif (isPlainObject(opts.linearBuckets)) {\n\t\t\tthis.buckets = HistogramMetric.generateLinearBuckets(opts.linearBuckets.start, opts.linearBuckets.width, opts.linearBuckets.count);\n\t\t} else if (isPlainObject(opts.exponentialBuckets)) {\n\t\t\tthis.buckets = HistogramMetric.generateExponentialBuckets(opts.exponentialBuckets.start, opts.exponentialBuckets.factor, opts.exponentialBuckets.count);\n\t\t} else if (Array.isArray(opts.buckets)) {\n\t\t\tthis.buckets = Array.from(opts.buckets);\n\t\t} else if (opts.buckets === true) {\n\t\t\tthis.buckets = this.registry.opts.defaultBuckets;\n\t\t}\n\t\tif (this.buckets) {\n\t\t\tthis.buckets.sort(sortAscending);\n\t\t}\n\n\t\t// Create quantiles\n\t\tif (Array.isArray(opts.quantiles)) {\n\t\t\tthis.quantiles = Array.from(opts.quantiles);\n\t\t} else if (opts.quantiles === true) {\n\t\t\tthis.quantiles = this.registry.opts.defaultQuantiles;\n\t\t}\n\t\tif (this.quantiles) {\n\t\t\tthis.quantiles.sort(sortAscending);\n\t\t\tthis.maxAgeSeconds = opts.maxAgeSeconds || this.registry.opts.defaultMaxAgeSeconds; // 1 minute\n\t\t\tthis.ageBuckets = opts.ageBuckets || this.registry.opts.defaultAgeBuckets; // 10 secs per bucket\n\t\t}\n\n\t\tthis.rate = opts.rate;\n\t}\n\n\t/**\n\t * Observe a value.\n\t *\n\t * @param {Number} value\n\t * @param {Object?} labels\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof HistogramMetric\n\t */\n\tobserve(value, labels, timestamp) {\n\t\tconst hash = this.hashingLabels(labels);\n\t\tlet item = this.values.get(hash);\n\t\tif (!item) {\n\t\t\titem = this.resetItem({\n\t\t\t\tlabels: _.pick(labels, this.labelNames)\n\t\t\t});\n\n\t\t\tif (this.rate)\n\t\t\t\titem.rate = new MetricRate(this, item, 1);\n\n\t\t\tthis.values.set(hash, item);\n\t\t}\n\n\t\titem.timestamp = timestamp == null ? Date.now() : timestamp;\n\t\titem.sum += value;\n\t\titem.count++;\n\t\titem.lastValue = value;\n\n\t\tif (item.bucketValues) {\n\t\t\tconst len = this.buckets.length;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tif (value <= this.buckets[i]) {\n\t\t\t\t\titem.bucketValues[this.buckets[i]] += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (item.quantileValues) {\n\t\t\titem.quantileValues.add(value);\n\t\t}\n\n\t\tif (item.rate)\n\t\t\titem.rate.update(item.count);\n\n\t\tthis.changed(value, labels, timestamp);\n\n\t\treturn item;\n\t}\n\n\t/**\n\t * Create new bucket values based on options.\n\t *\n\t * @returns {Object}\n\t * @memberof HistogramMetric\n\t */\n\tcreateBucketValues() {\n\t\treturn this.buckets.reduce((a, bound) => setProp(a, bound, 0), {});\n\t}\n\n\t/**\n\t * Generate a snapshot\n\t *\n\t * @returns {Array<Object>}\n\t * @memberof HistogramMetric\n\t */\n\tgenerateSnapshot() {\n\t\treturn Array.from(this.values.keys()).map(key => this.generateItemSnapshot(this.values.get(key), key));\n\t}\n\n\t/**\n\t * Generate a snapshot for an item\n\t *\n\t * @param {Object} item\n\t * @param {String} key\n\t * @returns {Object}\n\t * @memberof HistogramMetric\n\t */\n\tgenerateItemSnapshot(item, key) {\n\t\tconst snapshot = {\n\t\t\tkey,\n\t\t\tlabels: item.labels,\n\t\t\tcount: item.count,\n\t\t\tsum: item.sum,\n\t\t\tlastValue: item.lastValue,\n\t\t\ttimestamp: item.timestamp,\n\t\t};\n\n\t\tif (this.buckets)\n\t\t\tsnapshot.buckets = this.buckets.reduce((a, b) => setProp(a, b, item.bucketValues[b]), {});\n\n\t\tif (this.quantiles)\n\t\t\tObject.assign(snapshot, item.quantileValues.snapshot());\n\n\t\tif (item.rate)\n\t\t\tsnapshot.rate = item.rate.rate;\n\n\t\treturn snapshot;\n\t}\n\n\t/**\n\t * Reset value of item.\n\t *\n\t * @param {Object} item\n\t * @param {Number?} timestamp\n\t */\n\tresetItem(item, timestamp) {\n\t\titem.timestamp = timestamp == null ? Date.now() : timestamp;\n\t\titem.sum = 0;\n\t\titem.count = 0;\n\t\titem.lastValue = null;\n\n\t\tif (this.buckets) {\n\t\t\titem.bucketValues = this.createBucketValues();\n\t\t}\n\n\t\tif (this.quantiles) {\n\t\t\titem.quantileValues = new TimeWindowQuantiles(this, this.quantiles, this.maxAgeSeconds, this.ageBuckets);\n\t\t}\n\n\t\treturn item;\n\t}\n\n\t/**\n\t * Reset item by labels.\n\t *\n\t * @param {Object} labels\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof HistogramMetric\n\t */\n\treset(labels, timestamp) {\n\t\tconst hash = this.hashingLabels(labels);\n\t\tconst item = this.values.get(hash);\n\t\tif (item) {\n\t\t\tthis.resetItem(item, timestamp);\n\t\t\tthis.changed(null, labels, timestamp);\n\t\t}\n\t}\n\n\t/**\n\t * Reset all items.\n\t *\n\t * @param {Number?} timestamp\n\t * @memberof HistogramMetric\n\t */\n\tresetAll(timestamp) {\n\t\tthis.values.forEach(item => this.resetItem(item, timestamp));\n\t\tthis.changed();\n\t}\n\n\t/**\n\t * Generate linear buckets\n\t *\n\t * @static\n\t * @param {Number} start\n\t * @param {Number} width\n\t * @param {Number} count\n\t * @returns {Array<Number>}\n\t * @memberof HistogramMetric\n\t */\n\tstatic generateLinearBuckets(start, width, count) {\n\t\tconst buckets = [];\n\t\tfor (let i = 0; i < count; i++)\n\t\t\tbuckets.push(start + i * width);\n\n\t\treturn buckets;\n\t}\n\n\t/**\n\t * Generate exponential buckets\n\t *\n\t * @static\n\t * @param {Number} start\n\t * @param {Number} factor\n\t * @param {Number} count\n\t * @returns {Array<Number>}\n\t * @memberof HistogramMetric\n\t */\n\tstatic generateExponentialBuckets(start, factor, count) {\n\t\tconst buckets = [];\n\t\tfor (let i = 0; i < count; i++)\n\t\t\tbuckets[i] = start * Math.pow(factor, i);\n\n\t\treturn buckets;\n\t}\n}\n\n/**\n * Timewindow class for quantiles.\n *\n * @class TimeWindowQuantiles\n */\nclass TimeWindowQuantiles {\n\n\t/**\n\t * Creates an instance of TimeWindowQuantiles.\n\t * @param {BaseMetric} metric\n\t * @param {Array<Number>} quantiles\n\t * @param {Number} maxAgeSeconds\n\t * @param {Number} ageBuckets\n\t * @memberof TimeWindowQuantiles\n\t */\n\tconstructor(metric, quantiles, maxAgeSeconds, ageBuckets) {\n\t\tthis.metric = metric;\n\t\tthis.quantiles = Array.from(quantiles);\n\t\tthis.maxAgeSeconds = maxAgeSeconds;\n\t\tthis.ageBuckets = ageBuckets;\n\t\tthis.ringBuckets = [];\n\t\tfor(let i = 0; i < ageBuckets; i++) {\n\t\t\tthis.ringBuckets.push(new Bucket());\n\t\t}\n\t\tthis.dirty = true;\n\n\t\tthis.currentBucket = -1;\n\t\tthis.rotate();\n\n\t\tthis.lastSnapshot = null;\n\t\tthis.setDirty();\n\t}\n\n\t/**\n\t * Set dirty flag.\n\t *\n\t * @memberof TimeWindowQuantiles\n\t */\n\tsetDirty() {\n\t\tthis.dirty = true;\n\t\tthis.metric.setDirty();\n\t}\n\n\t/**\n\t * Clear dirty flag.\n\t *\n\t * @memberof TimeWindowQuantiles\n\t */\n\tclearDirty() {\n\t\tthis.dirty = false;\n\t}\n\n\t/**\n\t * Rotate the ring buckets.\n\t *\n\t * @memberof TimeWindowQuantiles\n\t */\n\trotate() {\n\t\tthis.currentBucket = (this.currentBucket + 1) % this.ageBuckets;\n\t\tthis.ringBuckets[this.currentBucket].clear();\n\t\tthis.setDirty();\n\n\t\tsetTimeout(() => this.rotate(), (this.maxAgeSeconds / this.ageBuckets) * 1000).unref();\n\t}\n\n\t/**\n\t * Add a new value to the current bucket.\n\t *\n\t * @param {Number} value\n\t * @memberof TimeWindowQuantiles\n\t */\n\tadd(value) {\n\t\tthis.setDirty();\n\t\tthis.ringBuckets[this.currentBucket].add(value);\n\t}\n\n\t/**\n\t * Generate a snapshot from buckets and calculate min, max, mean, quantiles, variance & StdDev.\n\t *\n\t * @returns {Object}\n\t * @memberof TimeWindowQuantiles\n\t */\n\tsnapshot() {\n\t\tif (!this.dirty && this.lastSnapshot)\n\t\t\treturn this.lastSnapshot;\n\n\t\tconst samples = this.ringBuckets.reduce((a, b) => a.concat(b.samples), []);\n\t\tsamples.sort(sortAscending);\n\n\t\tconst mean = samples.length ? samples.reduce((a, b) => a + b, 0) / samples.length : null;\n\t\tconst variance = samples.length > 1 ? samples.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / (samples.length - 1) : null;\n\t\tconst stdDev = variance ? Math.sqrt(variance) : null;\n\n\t\tthis.lastSnapshot = {\n\t\t\tmin: samples.length ? samples[0] : null,\n\t\t\tmean,\n\t\t\tvariance,\n\t\t\tstdDev,\n\t\t\tmax: samples.length ? samples[samples.length - 1] : null,\n\t\t\tquantiles: this.quantiles.reduce((a, q) => setProp(a, q, samples[Math.ceil(q * samples.length) - 1]), {})\n\t\t};\n\n\t\tthis.clearDirty();\n\n\t\treturn this.lastSnapshot;\n\t}\n}\n\n/**\n * Bucket class\n *\n * @class Bucket\n */\nclass Bucket {\n\t/**\n\t * Creates an instance of Bucket.\n\t * @memberof Bucket\n\t */\n\tconstructor() {\n\t\tthis.count = 0;\n\t\tthis.samples = [];\n\t}\n\n\t/**\n\t * Add value to the bucket.\n\t *\n\t * @param {Number} value\n\t * @memberof Bucket\n\t */\n\tadd(value) {\n\t\tthis.samples.push(value);\n\t\tthis.count++;\n\t}\n\n\t/**\n\t * Clear bucket.\n\t *\n\t * @memberof Bucket\n\t */\n\tclear() {\n\t\tthis.count = 0;\n\t\tthis.samples.length = 0;\n\t}\n}\n\nHistogramMetric.Bucket = Bucket;\nHistogramMetric.TimeWindowQuantiles = TimeWindowQuantiles;\n\nmodule.exports = HistogramMetric;\n"],"names":["isPlainObject","require$$0","sortAscending","a","b","setProp","o","k","v","HistogramMetric","BaseMetric","[object Object]","opts","registry","super","this","type","METRIC","TYPE_HISTOGRAM","linearBuckets","buckets","generateLinearBuckets","start","width","count","exponentialBuckets","generateExponentialBuckets","factor","Array","isArray","from","defaultBuckets","sort","quantiles","defaultQuantiles","maxAgeSeconds","defaultMaxAgeSeconds","ageBuckets","defaultAgeBuckets","rate","value","labels","timestamp","hash","hashingLabels","item","values","get","resetItem","_","pick","labelNames","MetricRate","set","Date","now","sum","lastValue","bucketValues","len","length","i","quantileValues","add","update","changed","reduce","bound","keys","map","key","generateItemSnapshot","snapshot","Object","assign","createBucketValues","TimeWindowQuantiles","forEach","push","Math","pow","metric","ringBuckets","Bucket","dirty","currentBucket","rotate","lastSnapshot","setDirty","clear","setTimeout","unref","samples","concat","mean","variance","stdDev","sqrt","min","max","q","ceil","clearDirty"],"mappings":"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"}