{"version":3,"file":"base.js","sources":["../../../../../../src/moleculer/src/metrics/types/base.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\n/**\n * Abstract Base Metric class.\n *\n * @class BaseMetric\n */\nclass BaseMetric {\n\n\t/**\n\t * Creates an instance of BaseMetric.\n\t *\n\t * @param {Object} opts\n\t * @param {MetricRegistry} registry\n\t * @memberof BaseMetric\n\t */\n\tconstructor(opts, registry) {\n\t\tthis.registry = registry;\n\t\tthis.type = opts.type;\n\t\tthis.name = opts.name;\n\t\tthis.description = opts.description;\n\t\tthis.labelNames = opts.labelNames || [];\n\t\tthis.unit = opts.unit;\n\t\tthis.aggregator = opts.aggregator || registry.opts.defaultAggregator;\n\n\t\tthis.lastSnapshot = null;\n\t\tthis.dirty = true;\n\n\t\tthis.values = new Map();\n\t}\n\n\t/**\n\t * Set dirty flag\n\t *\n\t * @memberof BaseMetric\n\t */\n\tsetDirty() {\n\t\tthis.dirty = true;\n\t}\n\n\t/**\n\t * Clear dirty flag\n\t *\n\t * @memberof BaseMetric\n\t */\n\tclearDirty() {\n\t\tthis.dirty = false;\n\t}\n\n\t/**\n\t * Get metric item by labels\n\t *\n\t * @param {Object?} labels\n\t * @returns {Object}\n\t * @memberof BaseMetric\n\t */\n\tget(labels) {\n\t\tconst hash = this.hashingLabels(labels);\n\t\treturn this.values.get(hash);\n\t}\n\n\t/**\n\t * Reset item by labels\n\t *\n\t * @memberof BaseMetric\n\t */\n\treset(/*labels, timestamp*/) {\n\t\t/* istanbul ignore next */\n\t\tthrow new Error(\"Not implemented\");\n\t}\n\n\t/**\n\t * Reset all items\n\t *\n\t * @memberof BaseMetric\n\t */\n\tresetAll(/*timestamp*/) {\n\t\t/* istanbul ignore next */\n\t\tthrow new Error(\"Not implemented\");\n\t}\n\n\t/**\n\t * Clear metric values.\n\t *\n\t * @memberof BaseMetric\n\t */\n\tclear() {\n\t\tthis.values = new Map();\n\t\tthis.changed();\n\t}\n\n\t/**\n\t * Create a hash from label values. It will\n\t * be used as a key in Map.\n\t *\n\t * @param {Object} labels\n\t * @returns {String}\n\t * @memberof BaseMetric\n\t */\n\thashingLabels(labels) {\n\t\tif (this.labelNames.length == 0 || labels == null || typeof labels !== \"object\")\n\t\t\treturn \"\";\n\n\t\tconst parts = [];\n\t\tfor (let i = 0; i < this.labelNames.length; i++) {\n\t\t\tconst v = labels[this.labelNames[i]];\n\t\t\tif (typeof v == \"number\")\n\t\t\t\tparts.push(v);\n\t\t\telse if (typeof v === \"string\")\n\t\t\t\tparts.push(\"\\\"\" + v + \"\\\"\");\n\t\t\telse if (typeof v === \"boolean\")\n\t\t\t\tparts.push(\"\" + v);\n\t\t\telse\n\t\t\t\tparts.push(\"\");\n\t\t}\n\t\treturn parts.join(\"|\");\n\t}\n\n\t/**\n\t * Get a snapshot.\n\t *\n\t * @returns {Object}\n\t * @memberof BaseMetric\n\t */\n\tsnapshot() {\n\t\tif (!this.dirty && this.lastSnapshot)\n\t\t\treturn this.lastSnapshot;\n\n\t\tthis.lastSnapshot = this.generateSnapshot();\n\t\tthis.clearDirty();\n\n\t\treturn this.lastSnapshot;\n\t}\n\n\t/**\n\t * Generate a snapshot.\n\t *\n\t * @memberof BaseMetric\n\t */\n\tgenerateSnapshot() {\n\t\t/* istanbul ignore next */\n\t\tthrow new Error(\"Not implemented\");\n\t}\n\n\t/**\n\t * Metric has been changed.\n\t * @param {any} value\n\t * @param {Object} labels\n\t * @param {Number?} timestamp\n\t */\n\tchanged(value, labels, timestamp) {\n\t\tthis.setDirty();\n\t\tthis.registry.changed(this, value, labels, timestamp);\n\t}\n\n\t/**\n\t * Export to a POJO.\n\t */\n\ttoObject() {\n\t\treturn {\n\t\t\ttype: this.type,\n\t\t\tname: this.name,\n\t\t\tdescription: this.description,\n\t\t\tlabelNames: this.labelNames,\n\t\t\tunit: this.unit,\n\n\t\t\tvalues: this.snapshot()\n\t\t};\n\t}\n}\n\nmodule.exports = BaseMetric;\n"],"names":["[object Object]","opts","registry","this","type","name","description","labelNames","unit","aggregator","defaultAggregator","lastSnapshot","dirty","values","Map","labels","hash","hashingLabels","get","Error","changed","length","parts","i","v","push","join","generateSnapshot","clearDirty","value","timestamp","setDirty","snapshot"],"mappings":"MAaA,MASCA,YAAYC,EAAMC,GACjBC,KAAKD,SAAWA,EAChBC,KAAKC,KAAOH,EAAKG,KACjBD,KAAKE,KAAOJ,EAAKI,KACjBF,KAAKG,YAAcL,EAAKK,YACxBH,KAAKI,WAAaN,EAAKM,YAAc,GACrCJ,KAAKK,KAAOP,EAAKO,KACjBL,KAAKM,WAAaR,EAAKQ,YAAcP,EAASD,KAAKS,kBAEnDP,KAAKQ,aAAe,KACpBR,KAAKS,OAAQ,EAEbT,KAAKU,OAAS,IAAIC,IAQnBd,WACCG,KAAKS,OAAQ,EAQdZ,aACCG,KAAKS,OAAQ,EAUdZ,IAAIe,GACH,MAAMC,EAAOb,KAAKc,cAAcF,GAChC,OAAOZ,KAAKU,OAAOK,IAAIF,GAQxBhB,QAEC,MAAM,IAAImB,MAAM,mBAQjBnB,WAEC,MAAM,IAAImB,MAAM,mBAQjBnB,QACCG,KAAKU,OAAS,IAAIC,IAClBX,KAAKiB,UAWNpB,cAAce,GACb,GAA8B,GAA1BZ,KAAKI,WAAWc,QAAyB,MAAVN,GAAoC,iBAAXA,EAC3D,MAAO,GAER,MAAMO,EAAQ,GACd,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,KAAKI,WAAWc,OAAQE,IAAK,CAChD,MAAMC,EAAIT,EAAOZ,KAAKI,WAAWgB,IACjB,iBAALC,EACVF,EAAMG,KAAKD,GACU,iBAANA,EACfF,EAAMG,KAAK,IAAOD,EAAI,KACD,kBAANA,EACfF,EAAMG,KAAK,GAAKD,GAEhBF,EAAMG,KAAK,IAEb,OAAOH,EAAMI,KAAK,KASnB1B,WACC,OAAKG,KAAKS,OAAST,KAAKQ,eAGxBR,KAAKQ,aAAeR,KAAKwB,mBACzBxB,KAAKyB,cAHGzB,KAAKQ,aAadX,mBAEC,MAAM,IAAImB,MAAM,mBASjBnB,QAAQ6B,EAAOd,EAAQe,GACtB3B,KAAK4B,WACL5B,KAAKD,SAASkB,QAAQjB,KAAM0B,EAAOd,EAAQe,GAM5C9B,WACC,MAAO,CACNI,KAAMD,KAAKC,KACXC,KAAMF,KAAKE,KACXC,YAAaH,KAAKG,YAClBC,WAAYJ,KAAKI,WACjBC,KAAML,KAAKK,KAEXK,OAAQV,KAAK6B"}