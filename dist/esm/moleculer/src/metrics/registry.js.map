{"version":3,"file":"registry.js","sources":["../../../../../src/moleculer/src/metrics/registry.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2020 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst _ = require(\"lodash\");\nconst { match, isFunction, isPlainObject, isString } = require(\"../utils\");\nconst METRIC = require(\"./constants\");\nconst Types = require(\"./types\");\nconst Reporters = require(\"./reporters\");\nconst { registerCommonMetrics, updateCommonMetrics } = require(\"./commons\");\n\nconst METRIC_NAME_REGEXP \t= /^[a-zA-Z_][a-zA-Z0-9-_:.]*$/;\nconst METRIC_LABEL_REGEXP \t= /^[a-zA-Z_][a-zA-Z0-9-_.]*$/;\n\n/**\n * Metric Registry class\n */\nclass MetricRegistry {\n\n\t/**\n\t * Creates an instance of MetricRegistry.\n\t *\n\t * @param {ServiceBroker} broker\n\t * @param {Object} opts\n\t * @memberof MetricRegistry\n\t */\n\tconstructor(broker, opts) {\n\t\tthis.broker = broker;\n\t\tthis.logger = broker.getLogger(\"metrics\");\n\n\t\tthis.dirty = true;\n\n\t\tif (opts === true || opts === false)\n\t\t\topts = { enabled: opts };\n\n\t\tthis.opts = _.defaultsDeep({}, opts, {\n\t\t\tenabled: true,\n\t\t\tcollectProcessMetrics: process.env.NODE_ENV !== \"test\",\n\t\t\tcollectInterval: 5,\n\n\t\t\treporter: false,\n\n\t\t\tdefaultBuckets: [1, 5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000], // in milliseconds\n\t\t\tdefaultQuantiles: [0.5, 0.9, 0.95, 0.99, 0.999], // percentage\n\t\t\tdefaultMaxAgeSeconds: 60,\n\t\t\tdefaultAgeBuckets: 10,\n\t\t\tdefaultAggregator: \"sum\"\n\t\t});\n\n\t\tthis.store = new Map();\n\n\t\tif (this.opts.enabled)\n\t\t\tthis.logger.info(\"Metrics: Enabled\");\n\t}\n\n\t/**\n\t * Initialize Registry.\n\t */\n\tinit() {\n\t\tif (this.opts.enabled) {\n\n\t\t\t// Create Reporter instances\n\t\t\tif (this.opts.reporter) {\n\t\t\t\tconst reporters = Array.isArray(this.opts.reporter) ? this.opts.reporter : [this.opts.reporter];\n\n\t\t\t\tthis.reporter = _.compact(reporters).map(r => {\n\t\t\t\t\tconst reporter = Reporters.resolve(r);\n\t\t\t\t\treporter.init(this);\n\t\t\t\t\treturn reporter;\n\t\t\t\t});\n\n\t\t\t\tconst reporterNames = this.reporter.map(reporter => this.broker.getConstructorName(reporter));\n\t\t\t\tthis.logger.info(`Metric reporter${reporterNames.length > 1 ? \"s\" : \"\"}: ${reporterNames.join(\", \")}`);\n\t\t\t}\n\n\t\t\t// Start colllect timer\n\t\t\tif (this.opts.collectProcessMetrics) {\n\t\t\t\tthis.collectTimer = setInterval(() => {\n\t\t\t\t\tupdateCommonMetrics.call(this);\n\t\t\t\t}, this.opts.collectInterval * 1000);\n\t\t\t\tthis.collectTimer.unref();\n\n\t\t\t\tregisterCommonMetrics.call(this);\n\t\t\t\tupdateCommonMetrics.call(this);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stop Metric Registry\n\t */\n\tstop() {\n\t\tif (this.collectTimer) {\n\t\t\tclearInterval(this.collectTimer);\n\t\t}\n\n\t\tif (this.reporter) {\n\t\t\treturn this.broker.Promise.all(this.reporter.map(r => r.stop()));\n\t\t}\n\t}\n\n\t/**\n\t * Check metric is enabled?\n\t *\n\t * @returns\n\t * @memberof MetricRegistry\n\t */\n\tisEnabled() {\n\t\treturn this.opts.enabled;\n\t}\n\n\t/**\n\t * Register a new metric.\n\t *\n\t * @param {Object} opts\n\t * @returns {BaseMetric}\n\t * @memberof MetricRegistry\n\t */\n\tregister(opts) {\n\t\tif (!isPlainObject(opts))\n\t\t\tthrow new Error(\"Wrong argument. Must be an Object.\");\n\n\t\tif (!opts.type)\n\t\t\tthrow new Error(\"The metric 'type' property is mandatory.\");\n\n\t\tif (!opts.name)\n\t\t\tthrow new Error(\"The metric 'name' property is mandatory.\");\n\n\t\tif (!METRIC_NAME_REGEXP.test(opts.name))\n\t\t\tthrow new Error(\"The metric 'name' is not valid: \" + opts.name);\n\n\t\tif (Array.isArray(opts.labelNames)) {\n\t\t\topts.labelNames.forEach(name => {\n\t\t\t\tif (!METRIC_LABEL_REGEXP.test(name))\n\t\t\t\t\tthrow new Error(`The '${opts.name}' metric label name is not valid: ${name}`);\n\n\t\t\t});\n\t\t}\n\n\t\tconst MetricClass = Types.resolve(opts.type);\n\n\t\tif (!this.opts.enabled)\n\t\t\treturn null;\n\n\t\tconst item = new MetricClass(opts, this);\n\t\tthis.store.set(opts.name, item);\n\t\treturn item;\n\t}\n\n\t/**\n\t * Check a metric by name.\n\t *\n\t * @param {String} name\n\t * @returns {Boolean}\n\t * @memberof MetricRegistry\n\t */\n\thasMetric(name) {\n\t\treturn this.store.has(name);\n\t}\n\n\t/**\n\t * Get metric by name\n\t *\n\t * @param {String} name\n\t * @returns {BaseMetric}\n\t * @memberof MetricRegistry\n\t */\n\tgetMetric(name) {\n\t\tconst item = this.store.get(name);\n\t\tif (!item)\n\t\t\treturn null;\n\n\t\treturn item;\n\t}\n\n\t/**\n\t * Increment a metric value.\n\t *\n\t * @param {String} name\n\t * @param {Object?} labels\n\t * @param {number} [value=1]\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof MetricRegistry\n\t */\n\tincrement(name, labels, value = 1, timestamp) {\n\t\tif (!this.opts.enabled)\n\t\t\treturn null;\n\n\t\tconst item = this.getMetric(name);\n\t\tif (!isFunction(item.increment))\n\t\t\tthrow new Error(\"Invalid metric type. Incrementing works only with counter & gauge metric types.\");\n\n\t\treturn item.increment(labels, value, timestamp);\n\t}\n\n\t/**\n\t * Decrement a metric value.\n\t *\n\t * @param {String} name\n\t * @param {Object?} labels\n\t * @param {number} [value=1]\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof MetricRegistry\n\t */\n\tdecrement(name, labels, value = 1, timestamp) {\n\t\tif (!this.opts.enabled)\n\t\t\treturn null;\n\n\t\tconst item = this.getMetric(name);\n\t\tif (!isFunction(item.decrement))\n\t\t\tthrow new Error(\"Invalid metric type. Decrementing works only with gauge metric type.\");\n\n\t\treturn item.decrement(labels, value, timestamp);\n\t}\n\n\t/**\n\t * Set a metric value.\n\t *\n\t * @param {String} name\n\t * @param {*} value\n\t * @param {Object?} labels\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof MetricRegistry\n\t */\n\tset(name, value, labels, timestamp) {\n\t\tif (!this.opts.enabled)\n\t\t\treturn null;\n\n\t\tconst item = this.getMetric(name);\n\t\tif (!isFunction(item.set))\n\t\t\tthrow new Error(\"Invalid metric type. Value setting works only with counter, gauge & info metric types.\");\n\n\t\treturn item.set(value, labels, timestamp);\n\t}\n\n\t/**\n\t * Observe a metric.\n\t *\n\t * @param {String} name\n\t * @param {Number} value\n\t * @param {Object?} labels\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof MetricRegistry\n\t */\n\tobserve(name, value, labels, timestamp) {\n\t\tif (!this.opts.enabled)\n\t\t\treturn null;\n\n\t\tconst item = this.getMetric(name);\n\t\tif (!isFunction(item.observe))\n\t\t\tthrow new Error(\"Invalid metric type. Observing works only with histogram metric type.\");\n\n\t\treturn item.observe(value, labels, timestamp);\n\t}\n\n\t/**\n\t * Reset metric values.\n\t *\n\t * @param {String} name\n\t * @param {Object?} labels\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof MetricRegistry\n\t */\n\treset(name, labels, timestamp) {\n\t\tif (!this.opts.enabled)\n\t\t\treturn null;\n\n\t\tconst item = this.getMetric(name);\n\t\titem.reset(labels, timestamp);\n\t}\n\n\t/**\n\t * Reset metric all values.\n\t *\n\t * @param {String} name\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof MetricRegistry\n\t */\n\tresetAll(name, timestamp) {\n\t\tif (!this.opts.enabled)\n\t\t\treturn null;\n\n\t\tconst item = this.getMetric(name);\n\t\titem.resetAll(timestamp);\n\t}\n\n\t/**\n\t * Start a timer & observe the elapsed time.\n\t *\n\t * @param {String} name\n\t * @param {Object?} labels\n\t * @param {Number?} timestamp\n\t * @returns {Function} `end`Ë™function.\n\t * @memberof MetricRegistry\n\t */\n\ttimer(name, labels, timestamp) {\n\t\tlet item;\n\t\tif (name && this.opts.enabled) {\n\t\t\titem = this.getMetric(name);\n\t\t\tif (!isFunction(item.observe) && !isFunction(item.set)) {\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tthrow new Error(\"Invalid metric type. Timing works only with histogram or gauge metric types\");\n\t\t\t}\n\t\t}\n\n\t\tconst start = process.hrtime();\n\t\treturn () => {\n\t\t\tconst delta = process.hrtime(start);\n\t\t\tconst duration = (delta[0] + delta[1] / 1e9) * 1000;\n\n\t\t\tif (item) {\n\t\t\t\tif (item.type == METRIC.TYPE_HISTOGRAM)\n\t\t\t\t\titem.observe(duration, labels, timestamp);\n\t\t\t\telse if (item.type == METRIC.TYPE_GAUGE)\n\t\t\t\t\titem.set(duration, labels, timestamp);\n\t\t\t}\n\n\t\t\treturn duration;\n\t\t};\n\t}\n\n\t/**\n\t * Some metric has been changed.\n\t *\n\t * @param {BaseMetric} metric\n\t * @param {any} value\n\t * @param {Object} labels\n\t * @param {Number?} timestamp\n\t *\n\t * @memberof MetricRegistry\n\t */\n\tchanged(metric, value, labels, timestamp) {\n\t\tthis.dirty = true;\n\t\tif (Array.isArray(this.reporter))\n\t\t\tthis.reporter.forEach(reporter => reporter.metricChanged(metric, value, labels, timestamp));\n\t}\n\n\t/**\n\t * List all registered metrics with labels & values.\n\t *\n\t * @param {Object?} opts\n\t * @param {String|Array<String>|null} opts.types\n\t * @param {String|Array<String>|null} opts.includes\n\t * @param {String|Array<String>|null} opts.excludes\n\t */\n\tlist(opts) {\n\t\tconst res = [];\n\t\topts = opts || {};\n\n\t\tconst types = opts.types != null ? (isString(opts.types) ? [opts.types] : opts.types) : null;\n\t\tconst includes = opts.includes != null ? (isString(opts.includes) ? [opts.includes] : opts.includes) : null;\n\t\tconst excludes = opts.excludes != null ? (isString(opts.excludes) ? [opts.excludes] : opts.excludes) : null;\n\n\t\tthis.store.forEach(metric => {\n\t\t\tif (types && !types.some(type => metric.type == type))\n\t\t\t\treturn;\n\n\t\t\tif (includes && !includes.some(pattern => match(metric.name, pattern)))\n\t\t\t\treturn;\n\n\t\t\tif (excludes && !excludes.every(pattern => !match(metric.name, pattern)))\n\t\t\t\treturn;\n\n\t\t\tres.push(metric.toObject());\n\t\t});\n\n\t\treturn res;\n\t}\n\n\n\t/**\n\t * Pluralize metric units.\n\t *\n\t * @param {String} unit\n\t * @returns {String}\n\t */\n\tpluralizeUnit(unit) {\n\t\tswitch(unit) {\n\t\t\tcase METRIC.UNIT_GHZ:\n\t\t\t\treturn unit;\n\t\t}\n\t\treturn unit + \"s\";\n\t}\n}\n\nmodule.exports = MetricRegistry;\n"],"names":["require$$0","require$$1","process","reporters","Reporters","Types","METRIC"],"mappings":"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"}