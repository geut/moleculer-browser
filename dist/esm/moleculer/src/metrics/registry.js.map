{"version":3,"file":"registry.js","sources":["../../../../../src/moleculer/src/metrics/registry.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2020 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst _ = require(\"lodash\");\nconst { match, isFunction, isPlainObject, isString } = require(\"../utils\");\nconst METRIC = require(\"./constants\");\nconst Types = require(\"./types\");\nconst Reporters = require(\"./reporters\");\nconst { registerCommonMetrics, updateCommonMetrics } = require(\"./commons\");\n\nconst METRIC_NAME_REGEXP \t= /^[a-zA-Z_][a-zA-Z0-9-_:.]*$/;\nconst METRIC_LABEL_REGEXP \t= /^[a-zA-Z_][a-zA-Z0-9-_.]*$/;\n\n/**\n * Metric Registry class\n */\nclass MetricRegistry {\n\n\t/**\n\t * Creates an instance of MetricRegistry.\n\t *\n\t * @param {ServiceBroker} broker\n\t * @param {Object} opts\n\t * @memberof MetricRegistry\n\t */\n\tconstructor(broker, opts) {\n\t\tthis.broker = broker;\n\t\tthis.logger = broker.getLogger(\"metrics\");\n\n\t\tthis.dirty = true;\n\n\t\tif (opts === true || opts === false)\n\t\t\topts = { enabled: opts };\n\n\t\tthis.opts = _.defaultsDeep({}, opts, {\n\t\t\tenabled: true,\n\t\t\tcollectProcessMetrics: process.env.NODE_ENV !== \"test\",\n\t\t\tcollectInterval: 5,\n\n\t\t\treporter: false,\n\n\t\t\tdefaultBuckets: [1, 5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000], // in milliseconds\n\t\t\tdefaultQuantiles: [0.5, 0.9, 0.95, 0.99, 0.999], // percentage\n\t\t\tdefaultMaxAgeSeconds: 60,\n\t\t\tdefaultAgeBuckets: 10,\n\t\t\tdefaultAggregator: \"sum\"\n\t\t});\n\n\t\tthis.store = new Map();\n\n\t\tif (this.opts.enabled)\n\t\t\tthis.logger.info(\"Metrics: Enabled\");\n\t}\n\n\t/**\n\t * Initialize Registry.\n\t */\n\tinit() {\n\t\tif (this.opts.enabled) {\n\n\t\t\t// Create Reporter instances\n\t\t\tif (this.opts.reporter) {\n\t\t\t\tconst reporters = Array.isArray(this.opts.reporter) ? this.opts.reporter : [this.opts.reporter];\n\n\t\t\t\tthis.reporter = _.compact(reporters).map(r => {\n\t\t\t\t\tconst reporter = Reporters.resolve(r);\n\t\t\t\t\treporter.init(this);\n\t\t\t\t\treturn reporter;\n\t\t\t\t});\n\n\t\t\t\tconst reporterNames = this.reporter.map(reporter => this.broker.getConstructorName(reporter));\n\t\t\t\tthis.logger.info(`Metric reporter${reporterNames.length > 1 ? \"s\" : \"\"}: ${reporterNames.join(\", \")}`);\n\t\t\t}\n\n\t\t\t// Start colllect timer\n\t\t\tif (this.opts.collectProcessMetrics) {\n\t\t\t\tthis.collectTimer = setInterval(() => {\n\t\t\t\t\tupdateCommonMetrics.call(this);\n\t\t\t\t}, this.opts.collectInterval * 1000);\n\t\t\t\tthis.collectTimer.unref();\n\n\t\t\t\tregisterCommonMetrics.call(this);\n\t\t\t\tupdateCommonMetrics.call(this);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stop Metric Registry\n\t */\n\tstop() {\n\t\tif (this.collectTimer) {\n\t\t\tclearInterval(this.collectTimer);\n\t\t}\n\n\t\tif (this.reporter) {\n\t\t\treturn this.broker.Promise.all(this.reporter.map(r => r.stop()));\n\t\t}\n\t}\n\n\t/**\n\t * Check metric is enabled?\n\t *\n\t * @returns\n\t * @memberof MetricRegistry\n\t */\n\tisEnabled() {\n\t\treturn this.opts.enabled;\n\t}\n\n\t/**\n\t * Register a new metric.\n\t *\n\t * @param {Object} opts\n\t * @returns {BaseMetric}\n\t * @memberof MetricRegistry\n\t */\n\tregister(opts) {\n\t\tif (!isPlainObject(opts))\n\t\t\tthrow new Error(\"Wrong argument. Must be an Object.\");\n\n\t\tif (!opts.type)\n\t\t\tthrow new Error(\"The metric 'type' property is mandatory.\");\n\n\t\tif (!opts.name)\n\t\t\tthrow new Error(\"The metric 'name' property is mandatory.\");\n\n\t\tif (!METRIC_NAME_REGEXP.test(opts.name))\n\t\t\tthrow new Error(\"The metric 'name' is not valid: \" + opts.name);\n\n\t\tif (Array.isArray(opts.labelNames)) {\n\t\t\topts.labelNames.forEach(name => {\n\t\t\t\tif (!METRIC_LABEL_REGEXP.test(name))\n\t\t\t\t\tthrow new Error(`The '${opts.name}' metric label name is not valid: ${name}`);\n\n\t\t\t});\n\t\t}\n\n\t\tconst MetricClass = Types.resolve(opts.type);\n\n\t\tif (!this.opts.enabled)\n\t\t\treturn null;\n\n\t\tconst item = new MetricClass(opts, this);\n\t\tthis.store.set(opts.name, item);\n\t\treturn item;\n\t}\n\n\t/**\n\t * Check a metric by name.\n\t *\n\t * @param {String} name\n\t * @returns {Boolean}\n\t * @memberof MetricRegistry\n\t */\n\thasMetric(name) {\n\t\treturn this.store.has(name);\n\t}\n\n\t/**\n\t * Get metric by name\n\t *\n\t * @param {String} name\n\t * @returns {BaseMetric}\n\t * @memberof MetricRegistry\n\t */\n\tgetMetric(name) {\n\t\tconst item = this.store.get(name);\n\t\tif (!item)\n\t\t\treturn null;\n\n\t\treturn item;\n\t}\n\n\t/**\n\t * Increment a metric value.\n\t *\n\t * @param {String} name\n\t * @param {Object?} labels\n\t * @param {number} [value=1]\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof MetricRegistry\n\t */\n\tincrement(name, labels, value = 1, timestamp) {\n\t\tif (!this.opts.enabled)\n\t\t\treturn null;\n\n\t\tconst item = this.getMetric(name);\n\t\tif (!isFunction(item.increment))\n\t\t\tthrow new Error(\"Invalid metric type. Incrementing works only with counter & gauge metric types.\");\n\n\t\treturn item.increment(labels, value, timestamp);\n\t}\n\n\t/**\n\t * Decrement a metric value.\n\t *\n\t * @param {String} name\n\t * @param {Object?} labels\n\t * @param {number} [value=1]\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof MetricRegistry\n\t */\n\tdecrement(name, labels, value = 1, timestamp) {\n\t\tif (!this.opts.enabled)\n\t\t\treturn null;\n\n\t\tconst item = this.getMetric(name);\n\t\tif (!isFunction(item.decrement))\n\t\t\tthrow new Error(\"Invalid metric type. Decrementing works only with gauge metric type.\");\n\n\t\treturn item.decrement(labels, value, timestamp);\n\t}\n\n\t/**\n\t * Set a metric value.\n\t *\n\t * @param {String} name\n\t * @param {*} value\n\t * @param {Object?} labels\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof MetricRegistry\n\t */\n\tset(name, value, labels, timestamp) {\n\t\tif (!this.opts.enabled)\n\t\t\treturn null;\n\n\t\tconst item = this.getMetric(name);\n\t\tif (!isFunction(item.set))\n\t\t\tthrow new Error(\"Invalid metric type. Value setting works only with counter, gauge & info metric types.\");\n\n\t\treturn item.set(value, labels, timestamp);\n\t}\n\n\t/**\n\t * Observe a metric.\n\t *\n\t * @param {String} name\n\t * @param {Number} value\n\t * @param {Object?} labels\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof MetricRegistry\n\t */\n\tobserve(name, value, labels, timestamp) {\n\t\tif (!this.opts.enabled)\n\t\t\treturn null;\n\n\t\tconst item = this.getMetric(name);\n\t\tif (!isFunction(item.observe))\n\t\t\tthrow new Error(\"Invalid metric type. Observing works only with histogram metric type.\");\n\n\t\treturn item.observe(value, labels, timestamp);\n\t}\n\n\t/**\n\t * Reset metric values.\n\t *\n\t * @param {String} name\n\t * @param {Object?} labels\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof MetricRegistry\n\t */\n\treset(name, labels, timestamp) {\n\t\tif (!this.opts.enabled)\n\t\t\treturn null;\n\n\t\tconst item = this.getMetric(name);\n\t\titem.reset(labels, timestamp);\n\t}\n\n\t/**\n\t * Reset metric all values.\n\t *\n\t * @param {String} name\n\t * @param {Number?} timestamp\n\t * @returns\n\t * @memberof MetricRegistry\n\t */\n\tresetAll(name, timestamp) {\n\t\tif (!this.opts.enabled)\n\t\t\treturn null;\n\n\t\tconst item = this.getMetric(name);\n\t\titem.resetAll(timestamp);\n\t}\n\n\t/**\n\t * Start a timer & observe the elapsed time.\n\t *\n\t * @param {String} name\n\t * @param {Object?} labels\n\t * @param {Number?} timestamp\n\t * @returns {Function} `end`Ë™function.\n\t * @memberof MetricRegistry\n\t */\n\ttimer(name, labels, timestamp) {\n\t\tlet item;\n\t\tif (name && this.opts.enabled) {\n\t\t\titem = this.getMetric(name);\n\t\t\tif (!isFunction(item.observe) && !isFunction(item.set)) {\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tthrow new Error(\"Invalid metric type. Timing works only with histogram or gauge metric types\");\n\t\t\t}\n\t\t}\n\n\t\tconst start = process.hrtime();\n\t\treturn () => {\n\t\t\tconst delta = process.hrtime(start);\n\t\t\tconst duration = (delta[0] + delta[1] / 1e9) * 1000;\n\n\t\t\tif (item) {\n\t\t\t\tif (item.type == METRIC.TYPE_HISTOGRAM)\n\t\t\t\t\titem.observe(duration, labels, timestamp);\n\t\t\t\telse if (item.type == METRIC.TYPE_GAUGE)\n\t\t\t\t\titem.set(duration, labels, timestamp);\n\t\t\t}\n\n\t\t\treturn duration;\n\t\t};\n\t}\n\n\t/**\n\t * Some metric has been changed.\n\t *\n\t * @param {BaseMetric} metric\n\t * @param {any} value\n\t * @param {Object} labels\n\t * @param {Number?} timestamp\n\t *\n\t * @memberof MetricRegistry\n\t */\n\tchanged(metric, value, labels, timestamp) {\n\t\tthis.dirty = true;\n\t\tif (Array.isArray(this.reporter))\n\t\t\tthis.reporter.forEach(reporter => reporter.metricChanged(metric, value, labels, timestamp));\n\t}\n\n\t/**\n\t * List all registered metrics with labels & values.\n\t *\n\t * @param {Object?} opts\n\t * @param {String|Array<String>|null} opts.types\n\t * @param {String|Array<String>|null} opts.includes\n\t * @param {String|Array<String>|null} opts.excludes\n\t */\n\tlist(opts) {\n\t\tconst res = [];\n\t\topts = opts || {};\n\n\t\tconst types = opts.types != null ? (isString(opts.types) ? [opts.types] : opts.types) : null;\n\t\tconst includes = opts.includes != null ? (isString(opts.includes) ? [opts.includes] : opts.includes) : null;\n\t\tconst excludes = opts.excludes != null ? (isString(opts.excludes) ? [opts.excludes] : opts.excludes) : null;\n\n\t\tthis.store.forEach(metric => {\n\t\t\tif (types && !types.some(type => metric.type == type))\n\t\t\t\treturn;\n\n\t\t\tif (includes && !includes.some(pattern => match(metric.name, pattern)))\n\t\t\t\treturn;\n\n\t\t\tif (excludes && !excludes.every(pattern => !match(metric.name, pattern)))\n\t\t\t\treturn;\n\n\t\t\tres.push(metric.toObject());\n\t\t});\n\n\t\treturn res;\n\t}\n\n\n\t/**\n\t * Pluralize metric units.\n\t *\n\t * @param {String} unit\n\t * @returns {String}\n\t */\n\tpluralizeUnit(unit) {\n\t\tswitch(unit) {\n\t\t\tcase METRIC.UNIT_GHZ:\n\t\t\t\treturn unit;\n\t\t}\n\t\treturn unit + \"s\";\n\t}\n}\n\nmodule.exports = MetricRegistry;\n"],"names":["match","isFunction","isPlainObject","isString","require$$0","registerCommonMetrics","updateCommonMetrics","require$$1","METRIC_NAME_REGEXP","METRIC_LABEL_REGEXP","[object Object]","broker","opts","this","logger","getLogger","dirty","enabled","_","defaultsDeep","collectProcessMetrics","process","env","NODE_ENV","collectInterval","reporter","defaultBuckets","defaultQuantiles","defaultMaxAgeSeconds","defaultAgeBuckets","defaultAggregator","store","Map","info","reporters","Array","isArray","compact","map","r","Reporters","resolve","init","reporterNames","getConstructorName","length","join","collectTimer","setInterval","call","unref","clearInterval","Promise","all","stop","Error","type","name","test","labelNames","forEach","MetricClass","Types","item","set","has","get","labels","value","timestamp","getMetric","increment","decrement","observe","reset","resetAll","start","hrtime","delta","duration","METRIC","TYPE_HISTOGRAM","TYPE_GAUGE","metric","metricChanged","res","types","includes","excludes","some","pattern","every","push","toObject","unit","UNIT_GHZ"],"mappings":"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"}