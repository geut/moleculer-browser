import t from"lodash";import e from"../utils.js";import s from"./exporters/index.js";import r from"./rate-limiter.js";import i from"./span.js";const{isFunction:a}=e;var o=class{constructor(e,s){this.broker=e,this.logger=e.getLogger("tracer"),!0!==s&&!1!==s||(s={enabled:s}),this.opts=t.defaultsDeep({},s,{enabled:!0,exporter:null,sampling:{rate:1,tracesPerSecond:null,minPriority:null},actions:!0,events:!1,errorFields:["name","message","code","type","data"],stackTrace:!1,defaultTags:null,tags:{action:null,event:null}}),this.opts.stackTrace&&-1===this.opts.errorFields.indexOf("stack")&&this.opts.errorFields.push("stack"),this.sampleCounter=0,null!=this.opts.sampling.tracesPerSecond&&this.opts.sampling.tracesPerSecond>0&&(this.rateLimiter=new r({tracesPerSecond:this.opts.sampling.tracesPerSecond})),this.opts.enabled&&this.logger.info("Tracing: Enabled")}init(){if(this.opts.enabled&&(this.defaultTags=a(this.opts.defaultTags)?this.opts.defaultTags.call(this,this):this.opts.defaultTags,this.opts.exporter)){const e=Array.isArray(this.opts.exporter)?this.opts.exporter:[this.opts.exporter];this.exporter=t.compact(e).map((t=>{const e=s.resolve(t);return e.init(this),e}));const r=this.exporter.map((t=>this.broker.getConstructorName(t)));this.logger.info(`Tracing exporter${r.length>1?"s":""}: ${r.join(", ")}`)}}stop(){return this.exporter?this.broker.Promise.all(this.exporter.map((t=>t.stop()))):this.broker.Promise.resolve()}isEnabled(){return this.opts.enabled}shouldSample(t){return!(null!=this.opts.sampling.minPriority&&t.priority<this.opts.sampling.minPriority)&&(this.rateLimiter?this.rateLimiter.check():0!=this.opts.sampling.rate&&(1==this.opts.sampling.rate||++this.sampleCounter*this.opts.sampling.rate>=1&&(this.sampleCounter=0,!0)))}startSpan(t,e={}){let s={};e.parentSpan&&(s.traceID=e.parentSpan.traceID,s.parentID=e.parentSpan.id,s.sampled=e.parentSpan.sampled);const r=new i(this,t,Object.assign({type:"custom",defaultTags:this.defaultTags},s,e,{parentSpan:void 0}));return r.start(),r}invokeExporter(t,e){this.exporter&&this.exporter.forEach((s=>s[t].apply(s,e)))}getCurrentTraceID(){return null}getActiveSpanID(){return null}spanStarted(t){t.sampled&&this.invokeExporter("spanStarted",[t])}spanFinished(t){t.sampled&&this.invokeExporter("spanFinished",[t])}};export default o;
//# sourceMappingURL=tracer.js.map
