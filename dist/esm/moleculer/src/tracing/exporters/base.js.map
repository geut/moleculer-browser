{"version":3,"file":"base.js","sources":["../../../../../../src/moleculer/src/tracing/exporters/base.js"],"sourcesContent":["\"use strict\";\n\nconst _ = require(\"lodash\");\nconst { isObject } = require(\"../../utils\");\n\n/**\n * Abstract Trace Exporter\n *\n * @class BaseTraceExporter\n */\nclass BaseTraceExporter {\n\n\t/**\n\t * Creates an instance of BaseTraceExporter.\n\t * @param {Object?} opts\n\t * @memberof BaseTraceExporter\n\t */\n\tconstructor(opts) {\n\t\tthis.opts = opts || {};\n\t\tthis.Promise = Promise; // default promise before logger is initialized\n\t}\n\n\t/**\n\t * Initialize Trace Exporter.\n\t *\n\t * @param {Tracer} tracer\n\t * @memberof BaseTraceExporter\n\t */\n\tinit(tracer) {\n\t\tthis.tracer = tracer;\n\t\tthis.broker = tracer.broker;\n\t\tthis.Promise = this.broker.Promise;\n\t\tthis.logger = this.opts.logger || this.tracer.logger;\n\t}\n\n\t/**\n\t * Stop Trace exporter\n\t */\n\tstop() {\n\t\t// Not implemented\n\t}\n\n\t/**\n\t * Span is started.\n\t *\n\t * @param {Span} span\n\t * @memberof BaseTraceExporter\n\t */\n\tspanStarted(/*span*/) {\n\t\t// Not implemented\n\t}\n\n\t/**\n\t * Span is finished.\n\t *\n\t * @param {Span} span\n\t * @memberof BaseTraceExporter\n\t */\n\tspanFinished(/*span*/) {\n\t\t// Not implemented\n\t}\n\n\t/**\n\t * Flattening tags to one-level object.\n\t * E.g.\n\t *  **From:**\n\t * \t```js\n\t * \t{\n\t * \t\terror: {\n\t * \t\t\tname: \"MoleculerError\"\n\t * \t\t}\n\t * \t}\n\t *  ```\n\t *\n\t * \t**To:**\n\t * \t```js\n\t *  {\n\t * \t\t\"error.name\": \"MoleculerError\"\n\t *  }\n\t *  ```\n\t *\n\t * @param {Object} obj\n\t * @param {boolean} [convertToString=false]\n\t * @param {string} [path=\"\"]\n\t * @returns {Object}\n\t * @memberof BaseTraceExporter\n\t */\n\tflattenTags(obj, convertToString = false, path = \"\") {\n\t\tif (!obj) return null;\n\n\t\treturn Object.keys(obj).reduce((res, k) => {\n\t\t\tconst o = obj[k];\n\t\t\tconst pp = (path ? path + \".\" : \"\") + k;\n\n\t\t\tif (isObject(o))\n\t\t\t\tObject.assign(res, this.flattenTags(o, convertToString, pp));\n\t\t\telse if (o !== undefined) {\n\t\t\t\tres[pp] = convertToString ? String(o) : o;\n\t\t\t}\n\n\t\t\treturn res;\n\t\t}, {});\n\t}\n\n\t/**\n\t * Convert Error to POJO.\n\t *\n\t * @param {Error} err\n\t * @returns {Object}\n\t * @memberof BaseTraceExporter\n\t */\n\terrorToObject(err) {\n\t\tif (!err) return null;\n\n\t\treturn _.pick(err, this.tracer.opts.errorFields);\n\t}\n}\n\nmodule.exports = BaseTraceExporter;\n"],"names":["isObject","require$$0","[object Object]","opts","this","Promise","tracer","broker","logger","obj","convertToString","path","Object","keys","reduce","res","k","o","pp","assign","flattenTags","undefined","String","err","_","pick","errorFields"],"mappings":"oDAGA,MAAMA,SAAEA,GAAaC,QAOrB,MAOCC,YAAYC,GACXC,KAAKD,KAAOA,GAAQ,GACpBC,KAAKC,QAAUA,QAShBH,KAAKI,GACJF,KAAKE,OAASA,EACdF,KAAKG,OAASD,EAAOC,OACrBH,KAAKC,QAAUD,KAAKG,OAAOF,QAC3BD,KAAKI,OAASJ,KAAKD,KAAKK,QAAUJ,KAAKE,OAAOE,OAM/CN,QAUAA,eAUAA,gBA6BAA,YAAYO,EAAKC,GAAkB,EAAOC,EAAO,IAChD,OAAKF,EAEEG,OAAOC,KAAKJ,GAAKK,QAAO,CAACC,EAAKC,KACpC,MAAMC,EAAIR,EAAIO,GACRE,GAAMP,EAAOA,EAAO,IAAM,IAAMK,EAQtC,OANIhB,EAASiB,GACZL,OAAOO,OAAOJ,EAAKX,KAAKgB,YAAYH,EAAGP,EAAiBQ,SAC1CG,IAANJ,IACRF,EAAIG,GAAMR,EAAkBY,OAAOL,GAAKA,GAGlCF,IACL,IAbc,KAuBlBb,cAAcqB,GACb,OAAKA,EAEEC,EAAEC,KAAKF,EAAKnB,KAAKE,OAAOH,KAAKuB,aAFnB"}