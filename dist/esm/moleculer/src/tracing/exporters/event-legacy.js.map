{"version":3,"file":"event-legacy.js","sources":["../../../../../../src/moleculer/src/tracing/exporters/event-legacy.js"],"sourcesContent":["\"use strict\";\n\nconst _ \t\t\t\t\t\t= require(\"lodash\");\nconst BaseTraceExporter \t\t= require(\"./base\");\nconst { isObject, isFunction }\t= require(\"../../utils\");\n\n/**\n * Event Trace Exporter. It sends same trace events as in Moleculer <= v0.13.\n *\n * @class EventLegacyTraceExporter\n */\nclass EventLegacyTraceExporter extends BaseTraceExporter {\n\n\t/**\n\t * Creates an instance of EventLegacyTraceExporter.\n\t * @param {Object?} opts\n\t * @memberof EventLegacyTraceExporter\n\t */\n\tconstructor(opts) {\n\t\tsuper(opts);\n\n\t\tthis.opts = _.defaultsDeep(this.opts, {\n\t\t});\n\t}\n\n\t/**\n\t * Initialize Trace Exporter.\n\t *\n\t * @param {Tracer} tracer\n\t * @memberof EventLegacyTraceExporter\n\t */\n\tinit(tracer) {\n\t\tsuper.init(tracer);\n\t\tthis.broker = tracer.broker;\n\t}\n\n\t/**\n\t * Span is started.\n\t *\n\t * @param {Span} span\n\t * @memberof BaseTraceExporter\n\t */\n\tspanStarted(span) {\n\t\tconst payload = this.generateMetricPayload(span);\n\t\tthis.broker.emit(\"metrics.trace.span.start\", payload);\n\t}\n\n\t/**\n\t * Span is finished.\n\t *\n\t * @param {Span} span\n\t * @memberof EventLegacyTraceExporter\n\t */\n\tspanFinished(span) {\n\t\tconst payload = this.generateMetricPayload(span);\n\t\tthis.broker.emit(\"metrics.trace.span.finish\", payload);\n\t}\n\n\t/**\n\t * Generate metrics payload\n\t *\n\t * @param {Context} ctx\n\t * @returns {Object}\n\t */\n\tgenerateMetricPayload(span) {\n\t\tlet payload = {\n\t\t\tid: span.id,\n\t\t\trequestID: span.traceID,\n\t\t\tlevel: span.tags.callingLevel,\n\t\t\tstartTime: span.startTime,\n\t\t\tremoteCall: span.tags.remoteCall\n\t\t};\n\n\t\t// Process extra metrics\n\t\tif (span.opts.ctx)\n\t\t\tthis.processExtraMetrics(span.opts.ctx, payload);\n\n\t\tpayload.action = span.tags.action;\n\t\tpayload.service = span.service;\n\n\t\tif (span.parentID)\n\t\t\tpayload.parent = span.parentID;\n\n\t\tpayload.nodeID = this.broker.nodeID;\n\t\tif (payload.remoteCall)\n\t\t\tpayload.callerNodeID = span.tags.callerNodeID;\n\n\t\tif (span.finishTime) {\n\t\t\tpayload.endTime = span.finishTime;\n\t\t\tpayload.duration = span.duration;\n\t\t\tpayload.fromCache = span.tags.fromCache;\n\n\t\t\tif (span.error) {\n\t\t\t\tpayload.error = this.errorToObject(span.error);\n\t\t\t}\n\t\t}\n\n\t\treturn payload;\n\t}\n\n\t/**\n\t * Assign extra metrics taking into account action definitions\n\t *\n\t * @param {Context} ctx\n\t * @param {string} name Field of the context to be assigned.\n\t * @param {any} payload Object for assignment.\n\t *\n\t * @private\n\t */\n\tassignExtraMetrics(ctx, name, payload) {\n\t\tlet def = ctx.action.metrics[name];\n\t\t// if metrics definitions is boolean do default, metrics=true\n\t\tif (def === true) {\n\t\t\tpayload[name] = ctx[name];\n\t\t} else if (Array.isArray(def)) {\n\t\t\tpayload[name] = _.pick(ctx[name], def);\n\t\t} else if (isFunction(def)) {\n\t\t\tpayload[name] = def(ctx[name]);\n\t\t}\n\t}\n\n\t/**\n\t * Decide and process extra metrics taking into account action definitions\n\t *\n\t * @param {Context} ctx\n\t * @param {any} payload Object for assignment.\n\t *\n\t * @private\n\t */\n\tprocessExtraMetrics(ctx, payload) {\n\t\t// extra metrics (params and meta)\n\t\tif (isObject(ctx.action.metrics)) {\n\t\t\t// custom metrics def\n\t\t\tthis.assignExtraMetrics(ctx, \"params\", payload);\n\t\t\tthis.assignExtraMetrics(ctx, \"meta\", payload);\n\t\t}\n\t}\n\n\n}\n\nmodule.exports = EventLegacyTraceExporter;\n"],"names":["isObject","isFunction","require$$0","BaseTraceExporter","[object Object]","opts","super","this","_","defaultsDeep","tracer","init","broker","span","payload","generateMetricPayload","emit","id","requestID","traceID","level","tags","callingLevel","startTime","remoteCall","ctx","processExtraMetrics","action","service","parentID","parent","nodeID","callerNodeID","finishTime","endTime","duration","fromCache","error","errorToObject","name","def","metrics","Array","isArray","pick","assignExtraMetrics"],"mappings":"6EAIA,MAAMA,SAAEA,EAAQC,WAAEA,GAAeC,QAOjC,cAAuCC,EAOtCC,YAAYC,GACXC,MAAMD,GAENE,KAAKF,KAAOG,EAAEC,aAAaF,KAAKF,KAAM,IAUvCD,KAAKM,GACJJ,MAAMK,KAAKD,GACXH,KAAKK,OAASF,EAAOE,OAStBR,YAAYS,GACX,MAAMC,EAAUP,KAAKQ,sBAAsBF,GAC3CN,KAAKK,OAAOI,KAAK,2BAA4BF,GAS9CV,aAAaS,GACZ,MAAMC,EAAUP,KAAKQ,sBAAsBF,GAC3CN,KAAKK,OAAOI,KAAK,4BAA6BF,GAS/CV,sBAAsBS,GACrB,IAAIC,EAAU,CACbG,GAAIJ,EAAKI,GACTC,UAAWL,EAAKM,QAChBC,MAAOP,EAAKQ,KAAKC,aACjBC,UAAWV,EAAKU,UAChBC,WAAYX,EAAKQ,KAAKG,YA2BvB,OAvBIX,EAAKR,KAAKoB,KACblB,KAAKmB,oBAAoBb,EAAKR,KAAKoB,IAAKX,GAEzCA,EAAQa,OAASd,EAAKQ,KAAKM,OAC3Bb,EAAQc,QAAUf,EAAKe,QAEnBf,EAAKgB,WACRf,EAAQgB,OAASjB,EAAKgB,UAEvBf,EAAQiB,OAASxB,KAAKK,OAAOmB,OACzBjB,EAAQU,aACXV,EAAQkB,aAAenB,EAAKQ,KAAKW,cAE9BnB,EAAKoB,aACRnB,EAAQoB,QAAUrB,EAAKoB,WACvBnB,EAAQqB,SAAWtB,EAAKsB,SACxBrB,EAAQsB,UAAYvB,EAAKQ,KAAKe,UAE1BvB,EAAKwB,QACRvB,EAAQuB,MAAQ9B,KAAK+B,cAAczB,EAAKwB,SAInCvB,EAYRV,mBAAmBqB,EAAKc,EAAMzB,GAC7B,IAAI0B,EAAMf,EAAIE,OAAOc,QAAQF,IAEjB,IAARC,EACH1B,EAAQyB,GAAQd,EAAIc,GACVG,MAAMC,QAAQH,GACxB1B,EAAQyB,GAAQ/B,EAAEoC,KAAKnB,EAAIc,GAAOC,GACxBvC,EAAWuC,KACrB1B,EAAQyB,GAAQC,EAAIf,EAAIc,KAY1BnC,oBAAoBqB,EAAKX,GAEpBd,EAASyB,EAAIE,OAAOc,WAEvBlC,KAAKsC,mBAAmBpB,EAAK,SAAUX,GACvCP,KAAKsC,mBAAmBpB,EAAK,OAAQX"}