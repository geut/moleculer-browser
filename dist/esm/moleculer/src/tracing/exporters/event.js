import{setInterval as t}from"timers-browserify";import s from"lodash";import e from"../../utils.js";import r from"./base.js";const{isFunction:i}=e;var a=class extends r{constructor(t){super(t),this.opts=s.defaultsDeep(this.opts,{eventName:"$tracing.spans",sendStartSpan:!1,sendFinishSpan:!0,broadcast:!1,groups:null,interval:5,spanConverter:null,defaultTags:null}),this.queue=[]}init(s){super.init(s),this.opts.interval>0&&(this.timer=t((()=>this.flush()),1e3*this.opts.interval),this.timer.unref()),this.defaultTags=i(this.opts.defaultTags)?this.opts.defaultTags.call(this,s):this.opts.defaultTags}stop(){return this.timer&&(clearInterval(this.timer),this.timer=null),this.Promise.resolve()}spanStarted(t){this.opts.sendStartSpan&&(this.queue.push(t),this.timer||this.flush())}spanFinished(t){this.opts.sendFinishSpan&&(this.queue.push(t),this.timer||this.flush())}flush(){if(0==this.queue.length)return;const t=this.generateTracingData();this.queue.length=0,this.opts.broadcast?(this.logger.debug(`Send tracing spans (${t.length} spans) broadcast events.`),this.broker.broadcast(this.opts.eventName,t,{groups:this.opts.groups})):(this.logger.debug(`Send tracing spans (${t.length} spans) events.`),this.broker.emit(this.opts.eventName,t,{groups:this.opts.groups}))}generateTracingData(){return i(this.opts.spanConverter)?this.queue.map((t=>this.opts.spanConverter.call(this,t))):Array.from(this.queue).map((t=>{const s=Object.assign({},t);return s.error&&(s.error=this.errorToObject(t.error)),s}))}};export default a;
//# sourceMappingURL=event.js.map
