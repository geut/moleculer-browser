import t from"../../../../process.js";import{setInterval as e}from"timers-browserify";import s from"lodash";import a from"../../utils.js";import i from"./base.js";import r from"../../../../fetch.js";const{isFunction:o}=a;var n=class extends i{constructor(e){super(e),this.opts=s.defaultsDeep(this.opts,{baseURL:t.env.ZIPKIN_URL||"http://localhost:9411",interval:5,payloadOptions:{debug:!1,shared:!1},defaultTags:null}),this.queue=[]}init(t){super.init(t),r.Promise=this.broker.Promise,this.opts.interval>0&&(this.timer=e((()=>this.flush()),1e3*this.opts.interval),this.timer.unref()),this.defaultTags=o(this.opts.defaultTags)?this.opts.defaultTags.call(this,t):this.opts.defaultTags,this.defaultTags&&(this.defaultTags=this.flattenTags(this.defaultTags,!0))}stop(){return this.timer&&(clearInterval(this.timer),this.timer=null),this.broker.Promise.resolve()}spanFinished(t){this.queue.push(t)}flush(){if(0==this.queue.length)return;const t=this.generateTracingData();this.queue.length=0,r(this.opts.baseURL+"/api/v2/spans",{method:"post",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}}).then((e=>{e.status>=400?this.logger.warn(`Unable to upload tracing spans to Zipkin. Status: ${e.status} ${e.statusText}`):this.logger.debug(`Tracing spans (${t.length} spans) are uploaded to Zipkin. Status: ${e.statusText}`)})).catch((t=>{this.logger.warn("Unable to upload tracing spans to Zipkin. Error:"+t.message,t)}))}generateTracingData(){return this.queue.map((t=>this.makePayload(t)))}makePayload(t){const e=t.service?t.service.fullName:null,s={name:t.name,kind:"SERVER",traceId:this.convertID(t.traceID),id:this.convertID(t.id),parentId:this.convertID(t.parentID),localEndpoint:{serviceName:e},remoteEndpoint:{serviceName:e},annotations:[],timestamp:this.convertTime(t.startTime),duration:this.convertTime(t.duration),tags:{service:e,"span.type":t.type},debug:this.opts.payloadOptions.debug,shared:this.opts.payloadOptions.shared};return t.error&&(s.tags.error=t.error.message,s.annotations.push({value:"error",endpoint:{serviceName:e,ipv4:"",port:0},timestamp:this.convertTime(t.finishTime)})),Object.assign(s.tags,this.defaultTags||{},this.flattenTags(t.tags,!0),this.flattenTags(this.errorToObject(t.error),!0,"error")||{}),s}convertID(t){return t?t.replace(/-/g,"").substring(0,16):null}convertTime(t){return null!=t?Math.round(1e3*t):null}};export default n;
//# sourceMappingURL=zipkin.js.map
