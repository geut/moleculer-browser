{"version":3,"file":"newrelic.js","sources":["../../../../../../src/moleculer/src/tracing/exporters/newrelic.js"],"sourcesContent":["\"use strict\";\n\nconst _ \t\t\t\t\t= require(\"lodash\");\nconst fetch \t\t\t\t= require(\"node-fetch\");\nconst BaseTraceExporter \t= require(\"./base\");\nconst { isFunction } \t\t= require(\"../../utils\");\n\n/**\n * Trace Exporter for NewRelic using Zipkin data.\n *\n * NewRelic zipkin tracer: https://docs.newrelic.com/docs/understand-dependencies/distributed-tracing/trace-api/report-zipkin-format-traces-trace-api\n * API v2: https://zipkin.io/zipkin-api/#/\n *\n * @class NewRelicTraceExporter\n */\nclass NewRelicTraceExporter extends BaseTraceExporter {\n\n\t/**\n\t * Creates an instance of NewRelicTraceExporter.\n\t * @param {Object?} opts\n\t * @memberof NewRelicTraceExporter\n\t */\n\tconstructor(opts) {\n\t\tsuper(opts);\n\n\t\tthis.opts = _.defaultsDeep(this.opts, {\n\t\t\t/** @type {String} Base URL for NewRelic server. */\n\t\t\tbaseURL:\n\t\t\tprocess.env.NEW_RELIC_TRACE_API_URL || \"https://trace-api.newrelic.com\",\n\n\t\t  /** @type {String} NewRelic Insert API Key */\n\t\t  insertKey: \"\",\n\n\t\t  /** @type {Number} Batch send time interval in seconds. */\n\t\t  interval: 5,\n\n\t\t  /** @type {Object} Additional payload options. */\n\t\t  payloadOptions: {\n\t\t\t/** @type {Boolean} Set `debug` property in v2 payload. */\n\t\t\t\tdebug: false,\n\n\t\t\t\t/** @type {Boolean} Set `shared` property in v2 payload. */\n\t\t\t\tshared: false,\n\t\t  },\n\n\t\t  /** @type {Object?} Default span tags */\n\t\t  defaultTags: null,\n\t\t});\n\n\t\tthis.queue = [];\n\t}\n\n\t/**\n\t * Initialize Trace Exporter.\n\t *\n\t * @param {Tracer} tracer\n\t * @memberof NewRelicTraceExporter\n\t */\n\tinit(tracer) {\n\t\tsuper.init(tracer);\n\n\t\tfetch.Promise = this.broker.Promise;\n\n\t\tif (this.opts.interval > 0) {\n\t\t\tthis.timer = setInterval(() => this.flush(), this.opts.interval * 1000);\n\t\t\tthis.timer.unref();\n\t\t}\n\n\t\tthis.defaultTags = isFunction(this.opts.defaultTags) ? this.opts.defaultTags.call(this, tracer) : this.opts.defaultTags;\n\t\tif (this.defaultTags) {\n\t\t\tthis.defaultTags = this.flattenTags(this.defaultTags, true);\n\t\t}\n\t}\n\n\t/**\n\t * Stop Trace exporter\n\t */\n\tstop() {\n\t\tif (this.timer) {\n\t\t\tclearInterval(this.timer);\n\t\t\tthis.timer = null;\n\t\t}\n\t\treturn this.broker.Promise.resolve();\n\t}\n\n\t/**\n\t * Span is finished.\n\t *\n\t * @param {Span} span\n\t * @memberof NewRelicTraceExporter\n\t */\n\tspanFinished(span) {\n\t\tthis.queue.push(span);\n\t}\n\n\t/**\n\t * Flush tracing data to NewRelic Zipkin api endpoint\n\t *\n\t * @memberof NewRelicTraceExporter\n\t */\n\tflush() {\n\t\tif (this.queue.length == 0) return;\n\n\t\tconst data = this.generateTracingData();\n\t\tthis.queue.length = 0;\n\n\t\tfetch(`${this.opts.baseURL}/trace/v1`,\n\t\t\t{\n\t\t\t\tmethod: \"post\",\n\t\t\t\tbody: JSON.stringify(data),\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\"Api-Key\": this.opts.insertKey,\n \t\t\t\t\"Data-Format\": \"zipkin\",\n \t\t\t\t\"Data-Format-Version\": \"2\"\n\t\t\t\t}\n\t\t\t}).then(res => {\n\t\t\tif (res.status >= 400) {\n\t\t\t\tthis.logger.warn(`Unable to upload tracing spans to NewRelic. Status: ${res.status} ${res.statusText}`);\n\t\t\t} else {\n\t\t\t\tthis.logger.debug(`Tracing spans (${data.length} spans) uploaded to NewRelic. Status: ${res.statusText}`);\n\t\t\t}\n\t\t}).catch(err => {\n\t\t\tthis.logger.warn(\"Unable to upload tracing spans to NewRelic. Error:\" + err.message, err);\n\t\t});\n\t}\n\n\t/**\n\t * Generate tracing data for NewRelic\n\t *\n\t * @returns {Array<Object>}\n\t * @memberof NewRelicTraceExporter\n\t */\n\tgenerateTracingData() {\n\t\treturn this.queue.map(span => this.makePayload(span));\n\t}\n\n\t/**\n\t * Create Zipkin v2 payload from metric event\n\t *\n\t * @param {Span} span\n\t * @returns {Object}\n\t */\n\tmakePayload(span) {\n\t\tconst serviceName = span.service ? span.service.fullName : null;\n\t\tconst payload = {\n\t\t\tname: span.name,\n\t\t\tkind: \"CONSUMER\",\n\n\t\t\t// Trace & span IDs\n\t\t\ttraceId: this.convertID(span.traceID),\n\t\t\tid: this.convertID(span.id),\n\t\t\tparentId: this.convertID(span.parentID),\n\n\t\t\tlocalEndpoint: { serviceName },\n\t\t\tremoteEndpoint: { serviceName },\n\n\t\t\tannotations: [\n\t\t\t\t{ timestamp: this.convertTime(span.startTime), value: \"sr\" },\n\t\t\t\t{ timestamp: this.convertTime(span.finishTime), value: \"ss\" },\n\t\t\t],\n\n\t\t\ttimestamp: this.convertTime(span.startTime),\n\t\t\tduration: this.convertTime(span.duration),\n\n\t\t\ttags: {\n\t\t\t\tservice: serviceName,\n\t\t\t\t\"span.type\": span.type,\n\t\t\t},\n\n\t\t\tdebug: this.opts.payloadOptions.debug,\n\t\t\tshared: this.opts.payloadOptions.shared\n\t\t};\n\n\t\tif (span.error) {\n\t\t\tpayload.tags[\"error\"] = span.error.message;\n\n\t\t\tpayload.annotations.push({\n\t\t\t\tvalue: \"error\",\n\t\t\t\tendpoint: { serviceName: serviceName, ipv4: \"\", port: 0 },\n\t\t\t\ttimestamp: this.convertTime(span.finishTime)\n\t\t\t});\n\t\t}\n\n\t\tObject.assign(\n\t\t\tpayload.tags,\n\t\t\tthis.defaultTags || {},\n\t\t\tthis.flattenTags(span.tags, true),\n\t\t\tthis.flattenTags(this.errorToObject(span.error), true, \"error\") || {}\n\t\t);\n\n\t\treturn payload;\n\t}\n\n\t/**\n\t * Convert Context ID to Zipkin format\n\t *\n\t * @param {String} id\n\t * @returns {String}\n\t */\n\tconvertID(id) {\n\t\treturn id ? id.replace(/-/g, \"\").substring(0, 16) : null;\n\t}\n\n\t/**\n\t * Convert JS timestamp to microseconds\n\t *\n\t * @param {Number} ts\n\t * @returns {Number}\n\t */\n\tconvertTime(ts) {\n\t\treturn ts != null ? Math.round(ts * 1000) : null;\n\t}\n\n}\n\nmodule.exports = NewRelicTraceExporter;\n"],"names":["isFunction","require$$0","BaseTraceExporter","[object Object]","opts","super","this","_","defaultsDeep","baseURL","process","env","NEW_RELIC_TRACE_API_URL","insertKey","interval","payloadOptions","debug","shared","defaultTags","queue","tracer","init","fetch","Promise","broker","timer","setInterval","flush","unref","call","flattenTags","clearInterval","resolve","span","push","length","data","generateTracingData","method","body","JSON","stringify","headers","Content-Type","Api-Key","Data-Format","Data-Format-Version","then","res","status","logger","warn","statusText","catch","err","message","map","makePayload","serviceName","service","fullName","payload","name","kind","traceId","convertID","traceID","id","parentId","parentID","localEndpoint","remoteEndpoint","annotations","timestamp","convertTime","startTime","value","finishTime","duration","tags","span.type","type","error","endpoint","ipv4","port","Object","assign","errorToObject","replace","substring","ts","Math","round"],"mappings":"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"}