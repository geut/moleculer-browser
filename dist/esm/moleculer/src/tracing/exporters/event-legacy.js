import t from"lodash";import e from"../../utils.js";import r from"./base.js";const{isObject:s,isFunction:i}=e;var a=class extends r{constructor(e){super(e),this.opts=t.defaultsDeep(this.opts,{})}init(t){super.init(t),this.broker=t.broker}spanStarted(t){const e=this.generateMetricPayload(t);this.broker.emit("metrics.trace.span.start",e)}spanFinished(t){const e=this.generateMetricPayload(t);this.broker.emit("metrics.trace.span.finish",e)}generateMetricPayload(t){let e={id:t.id,requestID:t.traceID,level:t.tags.callingLevel,startTime:t.startTime,remoteCall:t.tags.remoteCall};return t.opts.ctx&&this.processExtraMetrics(t.opts.ctx,e),e.action=t.tags.action,e.service=t.service,t.parentID&&(e.parent=t.parentID),e.nodeID=this.broker.nodeID,e.remoteCall&&(e.callerNodeID=t.tags.callerNodeID),t.finishTime&&(e.endTime=t.finishTime,e.duration=t.duration,e.fromCache=t.tags.fromCache,t.error&&(e.error=this.errorToObject(t.error))),e}assignExtraMetrics(e,r,s){let a=e.action.metrics[r];!0===a?s[r]=e[r]:Array.isArray(a)?s[r]=t.pick(e[r],a):i(a)&&(s[r]=a(e[r]))}processExtraMetrics(t,e){s(t.action.metrics)&&(this.assignExtraMetrics(t,"params",e),this.assignExtraMetrics(t,"meta",e))}};export default a;
//# sourceMappingURL=event-legacy.js.map
