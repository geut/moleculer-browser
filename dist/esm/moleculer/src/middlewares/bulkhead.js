import e from"../errors.js";import E from"../metrics/index.js";const{QueueIsFullError:t}=e,{METRIC:n}=E;export default function(e){return{name:"Bulkhead",created(){e.isMetricsEnabled()&&(e.metrics.register({name:n.MOLECULER_REQUEST_BULKHEAD_INFLIGHT,type:n.TYPE_GAUGE,labelNames:["action","service"]}),e.metrics.register({name:n.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE,type:n.TYPE_GAUGE,labelNames:["action","service"]}),e.metrics.register({name:n.MOLECULER_EVENT_BULKHEAD_INFLIGHT,type:n.TYPE_GAUGE,labelNames:["event","service"]}),e.metrics.register({name:n.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE,type:n.TYPE_GAUGE,labelNames:["event","service"]}))},localAction:function(E,r){const s=r.service,c=Object.assign({},this.options.bulkhead||{},r.bulkhead||{});if(c.enabled){const i=[];let U=0;const _=function t(){if(0==i.length)return;if(U>=c.concurrency)return;const _=i.shift();U++,e.metrics.set(n.MOLECULER_REQUEST_BULKHEAD_INFLIGHT,U,{action:r.name,service:s.fullName}),e.metrics.set(n.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE,i.length,{action:r.name,service:s.fullName}),E(_.ctx).then((E=>{U--,e.metrics.set(n.MOLECULER_REQUEST_BULKHEAD_INFLIGHT,U,{action:r.name,service:s.fullName}),e.metrics.set(n.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE,i.length,{action:r.name,service:s.fullName}),_.resolve(E),t()})).catch((E=>{U--,e.metrics.set(n.MOLECULER_REQUEST_BULKHEAD_INFLIGHT,U,{action:r.name,service:s.fullName}),e.metrics.set(n.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE,i.length,{action:r.name,service:s.fullName}),_.reject(E),t()}))};return function(m){if(U<c.concurrency)return U++,e.metrics.set(n.MOLECULER_REQUEST_BULKHEAD_INFLIGHT,U,{action:r.name,service:s.fullName}),e.metrics.set(n.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE,i.length,{action:r.name,service:s.fullName}),E(m).then((E=>(U--,e.metrics.set(n.MOLECULER_REQUEST_BULKHEAD_INFLIGHT,U,{action:r.name,service:s.fullName}),e.metrics.set(n.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE,i.length,{action:r.name,service:s.fullName}),_(),E))).catch((E=>(U--,e.metrics.set(n.MOLECULER_REQUEST_BULKHEAD_INFLIGHT,U,{action:r.name,service:s.fullName}),e.metrics.set(n.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE,i.length,{action:r.name,service:s.fullName}),_(),e.Promise.reject(E))));if(c.maxQueueSize&&i.length>=c.maxQueueSize)return e.Promise.reject(new t({action:m.action.name,nodeID:m.nodeID}));const a=new Promise(((e,E)=>i.push({resolve:e,reject:E,ctx:m})));return e.metrics.set(n.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE,i.length,{action:r.name,service:s.fullName}),a}.bind(this)}return E},localEvent:function(E,r){const s=r.service,c=Object.assign({},this.options.bulkhead||{},r.bulkhead||{});if(c.enabled){const i=[];let U=0;const _=function t(){if(0==i.length)return;if(U>=c.concurrency)return;const _=i.shift();U++,e.metrics.set(n.MOLECULER_EVENT_BULKHEAD_INFLIGHT,U,{event:r.name,service:s.fullName}),e.metrics.set(n.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE,i.length,{event:r.name,service:s.fullName}),E(_.ctx).then((E=>{U--,e.metrics.set(n.MOLECULER_EVENT_BULKHEAD_INFLIGHT,U,{event:r.name,service:s.fullName}),e.metrics.set(n.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE,i.length,{event:r.name,service:s.fullName}),_.resolve(E),t()})).catch((E=>{U--,e.metrics.set(n.MOLECULER_EVENT_BULKHEAD_INFLIGHT,U,{event:r.name,service:s.fullName}),e.metrics.set(n.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE,i.length,{event:r.name,service:s.fullName}),_.reject(E),t()}))};return function(m){if(U<c.concurrency)return U++,e.metrics.set(n.MOLECULER_EVENT_BULKHEAD_INFLIGHT,U,{event:r.name,service:s.fullName}),e.metrics.set(n.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE,i.length,{event:r.name,service:s.fullName}),E(m).then((E=>(U--,e.metrics.set(n.MOLECULER_EVENT_BULKHEAD_INFLIGHT,U,{event:r.name,service:s.fullName}),e.metrics.set(n.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE,i.length,{event:r.name,service:s.fullName}),_(),E))).catch((E=>(U--,e.metrics.set(n.MOLECULER_EVENT_BULKHEAD_INFLIGHT,U,{event:r.name,service:s.fullName}),e.metrics.set(n.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE,i.length,{event:r.name,service:s.fullName}),_(),e.Promise.reject(E))));if(c.maxQueueSize&&i.length>=c.maxQueueSize)return e.Promise.reject(new t({event:m.eventName,service:s.fullName,nodeID:m.nodeID}));const a=new Promise(((e,E)=>i.push({resolve:e,reject:E,ctx:m})));return e.metrics.set(n.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE,i.length,{event:r.name,service:s.fullName}),a}.bind(this)}return E}}}
//# sourceMappingURL=bulkhead.js.map
