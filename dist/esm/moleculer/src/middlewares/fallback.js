import e from"../errors.js";import r from"../utils.js";import a from"../metrics/index.js";const{MoleculerError:t}=e,{METRIC:n}=a,{isFunction:s,isString:i}=r;export default function(e){function r(r,a){return function(o){return r(o).catch((r=>{if(o.options.fallbackResponse)return function(r,a){return e.logger.warn(`The '${r.action.name}' request is failed. Return fallback response.`,{requestID:r.requestID,err:a.message}),e.metrics.increment(n.MOLECULER_REQUEST_FALLBACK_TOTAL,{action:r.action.name}),r.fallbackResult=!0,s(r.options.fallbackResponse)?r.options.fallbackResponse(r,a):Promise.resolve(r.options.fallbackResponse)}(o,r);if(a.fallback&&a.service){const l=a.service,c=i(a.fallback)?l[a.fallback]:a.fallback;if(!s(c))throw new t(`The 'fallback' of '${a.name}' action is not a Function or valid method name: ${a.fallback}`);return l.logger.warn(`The '${o.action.name}' request is failed. Return fallback response.`,{requestID:o.requestID,err:r.message}),e.metrics.increment(n.MOLECULER_REQUEST_FALLBACK_TOTAL,{service:l.fullName,action:a.name}),o.fallbackResult=!0,c.call(l,o,r)}return Promise.reject(r)}))}.bind(this)}return{name:"Fallback",created(e){e.isMetricsEnabled()&&e.metrics.register({name:n.MOLECULER_REQUEST_FALLBACK_TOTAL,type:n.TYPE_COUNTER,labelNames:["service","action"],description:"Number of fallbacked requests",rate:!0})},localAction:r,remoteAction:r}}
//# sourceMappingURL=fallback.js.map
