import e from"lodash";import o from"path";import t from"kleur";import r from"fs";import l from"../../utils.js";const{makeDirs:n}=l;export default function(l){let s,a,i;function c(e,t){const l=JSON.stringify(t,t instanceof Error?Object.getOwnPropertyNames(t):null,4);r.writeFile(o.join(i,e),l,(()=>{}))}const d=(l=e.defaultsDeep(l,{logger:null,logLevel:"info",logPacketData:!1,folder:null,extension:".json",colors:{receive:"grey",send:"grey"},packetFilter:["HEARTBEAT"]})).colors&&l.colors.send?l.colors.send.split(".").reduce(((e,o)=>e[o]||e()[o]),t):e=>e,g=l.colors&&l.colors.receive?l.colors.receive.split(".").reduce(((e,o)=>e[o]||e()[o]),t):e=>e;let p;return{name:"TransitLogger",created(e){s=l.logger||e.getLogger("debug"),a=e.nodeID,l.folder&&(i=o.join(l.folder,a),n(i)),p=l.logLevel?s[l.logLevel]:null},transitPublish:e=>o=>{if(l.packetFilter.includes(o.type))return e(o);const t=o.payload;return p&&(p(d(`=> Send ${o.type} packet to '${o.target||"<all nodes>"}'`)),l.logPacketData&&p("=>",t)),i&&c(`${Date.now()}-send-${o.type}-to-${o.target||"all"}${l.extension}`,t),e(o)},transitMessageHandler:e=>(o,t)=>{if(l.packetFilter.includes(o))return e(o,t);const r=t.payload;return p&&(p(g(`<= Receive ${o} packet from '${r.sender}'`)),l.logPacketData&&p("<=",t.payload)),i&&c(`${Date.now()}-receive-${o}-from-${r.sender}${l.extension}`,r),e(o,t)}}}
//# sourceMappingURL=transit-logger.js.map
