import e from"lodash";import{Buffer as t}from"buffer";import o from"../../utils.js";import r from"util";import*as n from"../../../../zlib.js";const{defaultsDeep:s}=e,{parseByteString:l}=o,{promisify:a}=r;export default function(e){let o,r;e=s(e,{method:"deflate",threshold:"1kb"});const i=l(e.threshold);switch(e.method){case"deflate":o=a(n.deflate),r=a(n.inflate);break;case"deflateRaw":o=a(n.deflateRaw),r=a(n.inflateRaw);break;case"gzip":o=a(n.gzip),r=a(n.gunzip);break;default:throw new Error("Unknow compression method: "+e.method)}let d;return{name:"Compression",created(t){d=t.getLogger("TX-COMPRESS"),d.info(`The transmission is COMPRESSED by '${e.method}'. Threshold: ${null!=i?e.threshold:"none"}`)},transporterSend:e=>(r,n,s)=>null!=i&&n.length<i?(d.debug(`Packet '${r}' is small and not compressed. Size: ${n.length}`),e(r,t.concat([t.from([0]),n]),s)):o(n).then((o=>(d.debug(`Packet '${r}' compressed. Saving: ${Number(100*(1-o.length/n.length)).toFixed(0)}%`,n.length,o.length),e(r,t.concat([t.from([1]),o]),s)))),transporterReceive:e=>(t,o,n)=>0==o.readInt8(0)?(d.debug(`Packet '${t}' is small and not compressed. Size: ${o.length}`),e(t,o.slice(1),n)):r(o.slice(1)).then((r=>(d.debug(`Packet '${t}' decompressed. Saving: ${Number(100*(1-o.length/r.length)).toFixed(0)}%`,r.length,o.length),e(t,r,n))))}}
//# sourceMappingURL=compression.js.map
