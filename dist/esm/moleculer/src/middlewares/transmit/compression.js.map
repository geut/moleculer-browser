{"version":3,"file":"compression.js","sources":["../../../../../../src/moleculer/src/middlewares/transmit/compression.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst { defaultsDeep } = require(\"lodash\");\nconst { parseByteString } = require(\"../../utils\");\nconst zlib = require(\"zlib\");\nconst { promisify } = require(\"util\");\n\n/**\n * This is a transmission compression middleware. It supports\n * the `deflate`, `deflateRaw` & `gzip` compression methods.\n *\n * @param {String?} opts.method\n * @param {String|Number} opts.threshold\n */\nmodule.exports = function CompressionMiddleware(opts) {\n\topts = defaultsDeep(opts, { method: \"deflate\", threshold: \"1kb\" });\n\n\tlet compress, decompress;\n\tconst threshold = parseByteString(opts.threshold);\n\n\tswitch(opts.method) {\n\t\tcase \"deflate\":\n\t\t\tcompress = promisify(zlib.deflate);\n\t\t\tdecompress = promisify(zlib.inflate);\n\t\t\tbreak;\n\t\tcase \"deflateRaw\":\n\t\t\tcompress = promisify(zlib.deflateRaw);\n\t\t\tdecompress = promisify(zlib.inflateRaw);\n\t\t\tbreak;\n\t\tcase \"gzip\":\n\t\t\tcompress = promisify(zlib.gzip);\n\t\t\tdecompress = promisify(zlib.gunzip);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t/* istanbul ignore next */\n\t\t\tthrow new Error(\"Unknow compression method: \" + opts.method);\n\t}\n\n\tlet logger;\n\n\treturn {\n\t\tname: \"Compression\",\n\n\t\tcreated(broker) {\n\t\t\tlogger = broker.getLogger(\"TX-COMPRESS\");\n\t\t\t/* istanbul ignore next */\n\t\t\tlogger.info(`The transmission is COMPRESSED by '${opts.method}'. Threshold: ${ threshold != null ? opts.threshold : \"none\"}`);\n\t\t},\n\n\t\ttransporterSend(next) {\n\t\t\treturn (topic, data, meta) => {\n\t\t\t\tif (threshold != null && data.length < threshold) {\n\t\t\t\t\tlogger.debug(`Packet '${topic}' is small and not compressed. Size: ${data.length}`);\n\t\t\t\t\treturn next(topic, Buffer.concat([Buffer.from([0x00]), data]), meta);\n\t\t\t\t}\n\t\t\t\treturn compress(data)\n\t\t\t\t\t.then(res => {\n\t\t\t\t\t\tlogger.debug(`Packet '${topic}' compressed. Saving: ${Number((1 - (res.length / data.length)) * 100).toFixed(0)}%`, data.length, res.length);\n\t\t\t\t\t\treturn next(topic, Buffer.concat([Buffer.from([0x01]), res]), meta);\n\t\t\t\t\t});\n\t\t\t};\n\t\t},\n\n\t\ttransporterReceive(next) {\n\t\t\treturn (cmd, data, s) => {\n\t\t\t\tconst isCompressed = data.readInt8(0);\n\t\t\t\tif (isCompressed == 0) {\n\t\t\t\t\tlogger.debug(`Packet '${cmd}' is small and not compressed. Size: ${data.length}`);\n\t\t\t\t\treturn next(cmd, data.slice(1), s);\n\t\t\t\t} else {\n\t\t\t\t\treturn decompress(data.slice(1))\n\t\t\t\t\t\t.then(res => {\n\t\t\t\t\t\t\tlogger.debug(`Packet '${cmd}' decompressed. Saving: ${Number((1 - (data.length / res.length)) * 100).toFixed(0)}%`, res.length, data.length);\n\t\t\t\t\t\t\treturn next(cmd, res, s);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n};\n"],"names":["require$$0","require$$1","require$$2"],"mappings":";;;;;;AAQA,MAAM,EAAE,YAAY,EAAE,GAAGA,CAAiB,CAAC;AAC3C,MAAM,EAAE,eAAe,EAAE,GAAGC,OAAsB,CAAC;AACtB;AAC7B,MAAM,EAAE,SAAS,EAAE,GAAGC,IAAe,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;eACc,GAAG,SAAS,qBAAqB,CAAC,IAAI,EAAE;AACtD,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;AACpE;AACA,CAAC,IAAI,QAAQ,EAAE,UAAU,CAAC;AAC1B,CAAC,MAAM,SAAS,GAAG,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACnD;AACA,CAAC,OAAO,IAAI,CAAC,MAAM;AACnB,EAAE,KAAK,SAAS;AAChB,GAAG,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACtC,GAAG,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACxC,GAAG,MAAM;AACT,EAAE,KAAK,YAAY;AACnB,GAAG,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACzC,GAAG,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC3C,GAAG,MAAM;AACT,EAAE,KAAK,MAAM;AACb,GAAG,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnC,GAAG,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACvC,GAAG,MAAM;AACT,EAAE;AACF;AACA,GAAG,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;AAChE,EAAE;AACF;AACA,CAAC,IAAI,MAAM,CAAC;AACZ;AACA,CAAC,OAAO;AACR,EAAE,IAAI,EAAE,aAAa;AACrB;AACA,EAAE,OAAO,CAAC,MAAM,EAAE;AAClB,GAAG,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;AAC5C;AACA,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,mCAAmC,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,SAAS,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AACjI,GAAG;AACH;AACA,EAAE,eAAe,CAAC,IAAI,EAAE;AACxB,GAAG,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,KAAK;AACjC,IAAI,IAAI,SAAS,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,SAAS,EAAE;AACtD,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,KAAK,CAAC,qCAAqC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACzF,KAAK,OAAO,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AAC1E,KAAK;AACL,IAAI,OAAO,QAAQ,CAAC,IAAI,CAAC;AACzB,MAAM,IAAI,CAAC,GAAG,IAAI;AAClB,MAAM,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,KAAK,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;AACnJ,MAAM,OAAO,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AAC1E,MAAM,CAAC,CAAC;AACR,IAAI,CAAC;AACL,GAAG;AACH;AACA,EAAE,kBAAkB,CAAC,IAAI,EAAE;AAC3B,GAAG,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,KAAK;AAC5B,IAAI,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC1C,IAAI,IAAI,YAAY,IAAI,CAAC,EAAE;AAC3B,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,qCAAqC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACvF,KAAK,OAAO,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACxC,KAAK,MAAM;AACX,KAAK,OAAO,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACrC,OAAO,IAAI,CAAC,GAAG,IAAI;AACnB,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,wBAAwB,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AACpJ,OAAO,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AAChC,OAAO,CAAC,CAAC;AACT,KAAK;AACL,IAAI,CAAC;AACL,GAAG;AACH,EAAE,CAAC;AACH;;;;"}