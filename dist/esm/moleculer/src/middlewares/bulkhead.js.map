{"version":3,"file":"bulkhead.js","sources":["../../../../../src/moleculer/src/middlewares/bulkhead.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2018 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst { QueueIsFullError } = require(\"../errors\");\nconst { METRIC }\t= require(\"../metrics\");\n\nmodule.exports = function bulkheadMiddleware(broker) {\n\n\tfunction wrapActionBulkheadMiddleware(handler, action) {\n\t\tconst service = action.service;\n\n\t\tconst opts = Object.assign({}, this.options.bulkhead || {}, action.bulkhead || {});\n\t\tif (opts.enabled) {\n\t\t\tconst queue = [];\n\t\t\tlet currentInFlight = 0;\n\n\t\t\t// Call the next request from the queue\n\t\t\tconst callNext = function callNext() {\n\t\t\t/* istanbul ignore next */\n\t\t\t\tif (queue.length == 0) return;\n\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tif (currentInFlight >= opts.concurrency) return;\n\n\t\t\t\tconst item = queue.shift();\n\n\t\t\t\tcurrentInFlight++;\n\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_REQUEST_BULKHEAD_INFLIGHT, currentInFlight, { action: action.name, service: service.fullName });\n\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE, queue.length, { action: action.name, service: service.fullName });\n\n\t\t\t\thandler(item.ctx)\n\t\t\t\t\t.then(res => {\n\t\t\t\t\t\tcurrentInFlight--;\n\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_REQUEST_BULKHEAD_INFLIGHT, currentInFlight, { action: action.name, service: service.fullName });\n\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE, queue.length, { action: action.name, service: service.fullName });\n\t\t\t\t\t\titem.resolve(res);\n\t\t\t\t\t\tcallNext();\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\tcurrentInFlight--;\n\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_REQUEST_BULKHEAD_INFLIGHT, currentInFlight, { action: action.name, service: service.fullName });\n\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE, queue.length, { action: action.name, service: service.fullName });\n\t\t\t\t\t\titem.reject(err);\n\t\t\t\t\t\tcallNext();\n\t\t\t\t\t});\n\t\t\t};\n\n\t\t\treturn function bulkheadMiddleware(ctx) {\n\t\t\t// Call handler without waiting\n\t\t\t\tif (currentInFlight < opts.concurrency) {\n\t\t\t\t\tcurrentInFlight++;\n\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_REQUEST_BULKHEAD_INFLIGHT, currentInFlight, { action: action.name, service: service.fullName });\n\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE, queue.length, { action: action.name, service: service.fullName });\n\t\t\t\t\treturn handler(ctx)\n\t\t\t\t\t\t.then(res => {\n\t\t\t\t\t\t\tcurrentInFlight--;\n\t\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_REQUEST_BULKHEAD_INFLIGHT, currentInFlight, { action: action.name, service: service.fullName });\n\t\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE, queue.length, { action: action.name, service: service.fullName });\n\t\t\t\t\t\t\tcallNext();\n\t\t\t\t\t\t\treturn res;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\tcurrentInFlight--;\n\t\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_REQUEST_BULKHEAD_INFLIGHT, currentInFlight, { action: action.name, service: service.fullName });\n\t\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE, queue.length, { action: action.name, service: service.fullName });\n\t\t\t\t\t\t\tcallNext();\n\t\t\t\t\t\t\treturn broker.Promise.reject(err);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Check whether the queue is full\n\t\t\t\tif (opts.maxQueueSize && queue.length >= opts.maxQueueSize) {\n\t\t\t\t\treturn broker.Promise.reject(new QueueIsFullError({ action: ctx.action.name, nodeID: ctx.nodeID }));\n\t\t\t\t}\n\n\t\t\t\t// Store the request in the queue\n\t\t\t\tconst p = new Promise((resolve, reject) => queue.push({ resolve, reject, ctx }));\n\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE, queue.length, { action: action.name, service: service.fullName });\n\n\t\t\t\treturn p;\n\n\t\t\t}.bind(this);\n\t\t}\n\n\t\treturn handler;\n\t}\n\n\tfunction wrapEventBulkheadMiddleware(handler, event) {\n\t\tconst service = event.service;\n\n\t\tconst opts = Object.assign({}, this.options.bulkhead || {}, event.bulkhead || {});\n\t\tif (opts.enabled) {\n\t\t\tconst queue = [];\n\t\t\tlet currentInFlight = 0;\n\n\t\t\t// Call the next request from the queue\n\t\t\tconst callNext = function callNext() {\n\t\t\t/* istanbul ignore next */\n\t\t\t\tif (queue.length == 0) return;\n\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tif (currentInFlight >= opts.concurrency) return;\n\n\t\t\t\tconst item = queue.shift();\n\n\t\t\t\tcurrentInFlight++;\n\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_EVENT_BULKHEAD_INFLIGHT, currentInFlight, { event: event.name, service: service.fullName });\n\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE, queue.length, { event: event.name, service: service.fullName });\n\n\t\t\t\thandler(item.ctx)\n\t\t\t\t\t.then(res => {\n\t\t\t\t\t\tcurrentInFlight--;\n\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_EVENT_BULKHEAD_INFLIGHT, currentInFlight, { event: event.name, service: service.fullName });\n\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE, queue.length, { event: event.name, service: service.fullName });\n\t\t\t\t\t\titem.resolve(res);\n\t\t\t\t\t\tcallNext();\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\tcurrentInFlight--;\n\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_EVENT_BULKHEAD_INFLIGHT, currentInFlight, { event: event.name, service: service.fullName });\n\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE, queue.length, { event: event.name, service: service.fullName });\n\t\t\t\t\t\titem.reject(err);\n\t\t\t\t\t\tcallNext();\n\t\t\t\t\t});\n\t\t\t};\n\n\t\t\treturn function bulkheadMiddleware(ctx) {\n\t\t\t\t// Call handler without waiting\n\t\t\t\tif (currentInFlight < opts.concurrency) {\n\t\t\t\t\tcurrentInFlight++;\n\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_EVENT_BULKHEAD_INFLIGHT, currentInFlight, { event: event.name, service: service.fullName });\n\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE, queue.length, { event: event.name, service: service.fullName });\n\t\t\t\t\treturn handler(ctx)\n\t\t\t\t\t\t.then(res => {\n\t\t\t\t\t\t\tcurrentInFlight--;\n\t\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_EVENT_BULKHEAD_INFLIGHT, currentInFlight, { event: event.name, service: service.fullName });\n\t\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE, queue.length, { event: event.name, service: service.fullName });\n\t\t\t\t\t\t\tcallNext();\n\t\t\t\t\t\t\treturn res;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\tcurrentInFlight--;\n\t\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_EVENT_BULKHEAD_INFLIGHT, currentInFlight, { event: event.name, service: service.fullName });\n\t\t\t\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE, queue.length, { event: event.name, service: service.fullName });\n\t\t\t\t\t\t\tcallNext();\n\t\t\t\t\t\t\treturn broker.Promise.reject(err);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Check whether the queue is full\n\t\t\t\tif (opts.maxQueueSize && queue.length >= opts.maxQueueSize) {\n\t\t\t\t\treturn broker.Promise.reject(new QueueIsFullError({ event: ctx.eventName, service: service.fullName, nodeID: ctx.nodeID }));\n\t\t\t\t}\n\n\t\t\t\t// Store the request in the queue\n\t\t\t\tconst p = new Promise((resolve, reject) => queue.push({ resolve, reject, ctx }));\n\t\t\t\tbroker.metrics.set(METRIC.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE, queue.length, { event: event.name, service: service.fullName });\n\n\t\t\t\treturn p;\n\n\t\t\t}.bind(this);\n\t\t}\n\n\t\treturn handler;\n\t}\n\n\n\treturn {\n\t\tname: \"Bulkhead\",\n\n\t\tcreated() {\n\t\t\tif (broker.isMetricsEnabled()) {\n\t\t\t\tbroker.metrics.register({ name: METRIC.MOLECULER_REQUEST_BULKHEAD_INFLIGHT, type: METRIC.TYPE_GAUGE, labelNames: [\"action\", \"service\"] });\n\t\t\t\tbroker.metrics.register({ name: METRIC.MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE, type: METRIC.TYPE_GAUGE, labelNames: [\"action\", \"service\"] });\n\n\t\t\t\tbroker.metrics.register({ name: METRIC.MOLECULER_EVENT_BULKHEAD_INFLIGHT, type: METRIC.TYPE_GAUGE, labelNames: [\"event\", \"service\"] });\n\t\t\t\tbroker.metrics.register({ name: METRIC.MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE, type: METRIC.TYPE_GAUGE, labelNames: [\"event\", \"service\"] });\n\t\t\t}\n\t\t},\n\n\t\tlocalAction: wrapActionBulkheadMiddleware,\n\t\tlocalEvent: wrapEventBulkheadMiddleware\n\t};\n};\n"],"names":["QueueIsFullError","require$$0","METRIC","require$$1","broker","name","[object Object]","isMetricsEnabled","metrics","register","MOLECULER_REQUEST_BULKHEAD_INFLIGHT","type","TYPE_GAUGE","labelNames","MOLECULER_REQUEST_BULKHEAD_QUEUE_SIZE","MOLECULER_EVENT_BULKHEAD_INFLIGHT","MOLECULER_EVENT_BULKHEAD_QUEUE_SIZE","localAction","handler","action","service","opts","Object","assign","this","options","bulkhead","enabled","queue","currentInFlight","callNext","length","concurrency","item","shift","set","fullName","ctx","then","res","resolve","catch","err","reject","Promise","maxQueueSize","nodeID","p","push","bind","localEvent","event","eventName"],"mappings":"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"}