{"version":3,"file":"circuit-breaker.js","sources":["../../../../../src/moleculer/src/middlewares/circuit-breaker.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst C \t\t\t= require(\"../constants\");\nconst { METRIC }\t= require(\"../metrics\");\n\nmodule.exports = function circuitBreakerMiddleware(broker) {\n\n\tlet windowTimer;\n\tconst store = new Map();\n\tlet logger;\n\n\t/**\n\t * Create timer to clear endpoint store\n\t *\n\t * @param {Number} windowTime\n\t */\n\tfunction createWindowTimer(windowTime) {\n\t\tif (!windowTimer) {\n\t\t\twindowTimer = setInterval(() => resetStore(), (windowTime || 60) * 1000);\n\t\t\twindowTimer.unref();\n\t\t}\n\t}\n\n\t/**\n\t * Clear endpoint state store\n\t */\n\tfunction resetStore() {\n\t\tif (!logger) return;\n\n\t\tlogger.debug(\"Reset circuit-breaker endpoint states...\");\n\t\tstore.forEach((item, key) => {\n\t\t\tif (item.count == 0) {\n\t\t\t\tlogger.debug(`Remove '${key}' endpoint state because it is not used`);\n\t\t\t\tstore.delete(key);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`Clean '${key}' endpoint state.`);\n\t\t\titem.count = 0;\n\t\t\titem.failures = 0;\n\t\t});\n\t}\n\n\t/**\n\t * Get Endpoint state from store. If not exists, create it.\n\t *\n\t * @param {Endpoint} ep\n\t * @param {Service} service\n\t * @param {Object} opts\n\t * @returns {Object}\n\t */\n\tfunction getEpState(ep, service, opts) {\n\t\tlet item = store.get(ep.name);\n\t\tif (!item) {\n\t\t\titem = {\n\t\t\t\tep,\n\t\t\t\tservice,\n\t\t\t\topts,\n\t\t\t\tcount: 0,\n\t\t\t\tfailures: 0,\n\t\t\t\tstate: C.CIRCUIT_CLOSE,\n\t\t\t\tcbTimer: null\n\t\t\t};\n\t\t\tstore.set(ep.name, item);\n\t\t}\n\t\treturn item;\n\t}\n\n\t/**\n\t * Increment failure counter\n\t *\n\t * @param {Object} item\n\t * @param {Error} err\n\t * @param {Context} ctx\n\t */\n\tfunction failure(item, err, ctx) {\n\t\titem.count++;\n\t\titem.failures++;\n\n\t\tcheckThreshold(item, ctx);\n\t}\n\n\t/**\n\t * Increment request counter and switch CB to CLOSE if it is on HALF_OPEN_WAIT.\n\t *\n\t * @param {Object} item\n\t * @param {Context} ctx\n\t */\n\tfunction success(item, ctx) {\n\t\titem.count++;\n\n\t\tif (item.state === C.CIRCUIT_HALF_OPEN_WAIT)\n\t\t\tcircuitClose(item, ctx);\n\t\telse\n\t\t\tcheckThreshold(item, ctx);\n\t}\n\n\t/**\n\t * Check circuit-breaker failure threshold of Endpoint\n\t *\n\t * @param {Object} item\n\t * @param {Context} ctx\n\t */\n\tfunction checkThreshold(item, ctx) {\n\t\tif (item.count >= item.opts.minRequestCount) {\n\t\t\tconst rate = item.failures / item.count;\n\t\t\tif (rate >= item.opts.threshold)\n\t\t\t\ttrip(item, ctx);\n\t\t}\n\t}\n\n\t/**\n\t * Trip the circuit-breaker, change the status to open\n\t *\n\t * @param {Object} item\n\t * @param {Context} ctx\n\t */\n\tfunction trip(item, ctx) {\n\t\tif (item.state == C.CIRCUIT_OPEN) return;\n\n\t\titem.state = C.CIRCUIT_OPEN;\n\t\titem.ep.state = false;\n\n\t\tif (item.cbTimer) {\n\t\t\tclearTimeout(item.cbTimer);\n\t\t\titem.cbTimer = null;\n\t\t}\n\n\t\titem.cbTimer = setTimeout(() => halfOpen(item, ctx), item.opts.halfOpenTime);\n\t\titem.cbTimer.unref();\n\n\t\tconst action = item.ep.action;\n\t\tconst service = item.service.fullName;\n\n\t\tconst rate = item.count > 0 ? item.failures / item.count : 0;\n\t\tlogger.debug(`Circuit breaker has been opened on '${item.ep.name}' endpoint.`, { nodeID: item.ep.id, service, action: action.name, failures: item.failures, count: item.count, rate });\n\t\tbroker.broadcast(\"$circuit-breaker.opened\", { nodeID: item.ep.id, service, action: action.name, failures: item.failures, count: item.count, rate });\n\n\t\tbroker.metrics.set(METRIC.MOLECULER_CIRCUIT_BREAKER_OPENED_ACTIVE, 1, { affectedNodeID: item.ep.id, service, action: action.name });\n\t\tbroker.metrics.increment(METRIC.MOLECULER_CIRCUIT_BREAKER_OPENED_TOTAL, { affectedNodeID: item.ep.id, service, action: action.name });\n\t}\n\n\t/**\n\t * Change circuit-breaker status to half-open\n\t *\n\t * @param {Object} item\n\t * @param {Context} ctx\n\t */\n\tfunction halfOpen(item) {\n\t\titem.state = C.CIRCUIT_HALF_OPEN;\n\t\titem.ep.state = true;\n\n\t\tconst action = item.ep.action;\n\t\tconst service = item.service.fullName;\n\n\t\tlogger.debug(`Circuit breaker has been half-opened on '${item.ep.name}' endpoint.`, { nodeID: item.ep.id, service, action: action.name });\n\n\t\tbroker.broadcast(\"$circuit-breaker.half-opened\", { nodeID: item.ep.id, service, action: action.name });\n\n\t\tbroker.metrics.set(METRIC.MOLECULER_CIRCUIT_BREAKER_OPENED_ACTIVE, 0, { affectedNodeID: item.ep.id, service, action: action.name });\n\t\tbroker.metrics.set(METRIC.MOLECULER_CIRCUIT_BREAKER_HALF_OPENED_ACTIVE, 1, { affectedNodeID: item.ep.id, service, action: action.name });\n\n\t\tif (item.cbTimer) {\n\t\t\tclearTimeout(item.cbTimer);\n\t\t\titem.cbTimer = null;\n\t\t}\n\t}\n\n\t/**\n\t * Change circuit-breaker status to half-open waiting. First request is invoked after half-open.\n\t *\n\t * @param {Object} item\n\t * @param {Context} ctx\n\t*/\n\tfunction halfOpenWait(item, ctx) {\n\t\titem.state = C.CIRCUIT_HALF_OPEN_WAIT;\n\t\titem.ep.state = false;\n\n\t\t// Anti-stick protection\n\t\titem.cbTimer = setTimeout(() => halfOpen(item, ctx), item.opts.halfOpenTime);\n\t\titem.cbTimer.unref();\n\t}\n\n\t/**\n\t * Change circuit-breaker status to close\n\t *\n\t * @param {Object} item\n\t * @param {Context} ctx\n\t */\n\tfunction circuitClose(item) {\n\t\titem.state = C.CIRCUIT_CLOSE;\n\t\titem.ep.state = true;\n\t\titem.failures = 0;\n\t\titem.count = 0;\n\n\t\tconst action = item.ep.action;\n\t\tconst service = item.service.fullName;\n\n\t\tlogger.debug(`Circuit breaker has been closed on '${item.ep.name}' endpoint.`, { nodeID: item.ep.id, service, action: action.name });\n\n\t\tbroker.broadcast(\"$circuit-breaker.closed\", { nodeID: item.ep.id, service, action: action.name });\n\n\t\tbroker.metrics.set(METRIC.MOLECULER_CIRCUIT_BREAKER_OPENED_ACTIVE, 0, { affectedNodeID: item.ep.id, service, action: action.name });\n\t\tbroker.metrics.set(METRIC.MOLECULER_CIRCUIT_BREAKER_HALF_OPENED_ACTIVE, 0, { affectedNodeID: item.ep.id, service, action: action.name });\n\n\t\tif (item.cbTimer) {\n\t\t\tclearTimeout(item.cbTimer);\n\t\t\titem.cbTimer = null;\n\t\t}\n\t}\n\n\t/**\n\t * Middleware wrapper function\n\t *\n\t * @param {Function} handler\n\t * @param {Action} action\n\t * @returns {Function}\n\t */\n\tfunction wrapCBMiddleware(handler, action) {\n\t\tconst service = action.service;\n\t\t// Merge action option and broker options\n\t\tconst opts = Object.assign({}, this.options.circuitBreaker || {}, action.circuitBreaker || {});\n\t\tif (opts.enabled) {\n\t\t\treturn function circuitBreakerMiddleware(ctx) {\n\t\t\t\t// Get endpoint state item\n\t\t\t\tconst ep = ctx.endpoint;\n\t\t\t\tconst item = getEpState(ep, service, opts);\n\n\t\t\t\t// Handle half-open state in circuit breaker\n\t\t\t\tif (item.state == C.CIRCUIT_HALF_OPEN) {\n\t\t\t\t\thalfOpenWait(item, ctx);\n\t\t\t\t}\n\n\t\t\t\t// Call the handler\n\t\t\t\treturn handler(ctx).then(res => {\n\t\t\t\t\tconst item = getEpState(ep, service, opts);\n\t\t\t\t\tsuccess(item, ctx);\n\n\t\t\t\t\treturn res;\n\t\t\t\t}).catch(err => {\n\t\t\t\t\tif (opts.check && opts.check(err)) {\n\t\t\t\t\t\t// Failure if error is created locally (not came from a 3rd node error)\n\t\t\t\t\t\tif (item && (!err.nodeID || err.nodeID == ctx.nodeID)) {\n\t\t\t\t\t\t\tconst item = getEpState(ep, service, opts);\n\t\t\t\t\t\t\tfailure(item, err, ctx);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.Promise.reject(err);\n\t\t\t\t});\n\t\t\t}.bind(this);\n\t\t}\n\n\t\treturn handler;\n\t}\n\n\n\treturn {\n\t\tname: \"CircuitBreaker\",\n\n\t\tcreated(broker) {\n\t\t\tlogger = broker.getLogger(\"circuit-breaker\");\n\n\t\t\t// Expose the internal state store.\n\t\t\tbroker.CircuitBreakerStore = store;\n\n\t\t\tconst opts = broker.options.circuitBreaker;\n\t\t\tif (opts.enabled) {\n\t\t\t\tcreateWindowTimer(opts.windowTime);\n\n\t\t\t\tif (broker.isMetricsEnabled()) {\n\t\t\t\t\tbroker.metrics.register({ name: METRIC.MOLECULER_CIRCUIT_BREAKER_OPENED_ACTIVE, type: METRIC.TYPE_GAUGE, labelNames: [\"affectedNodeID\", \"service\", \"action\"], description: \"Number of active opened circuit-breakers\" });\n\t\t\t\t\tbroker.metrics.register({ name: METRIC.MOLECULER_CIRCUIT_BREAKER_OPENED_TOTAL, type: METRIC.TYPE_COUNTER, labelNames: [\"affectedNodeID\", \"service\", \"action\"], description: \"Number of opened circuit-breakers\" });\n\t\t\t\t\tbroker.metrics.register({ name: METRIC.MOLECULER_CIRCUIT_BREAKER_HALF_OPENED_ACTIVE, type: METRIC.TYPE_GAUGE, labelNames: [\"affectedNodeID\", \"service\", \"action\"], description: \"Number of active half-opened circuit-breakers\" });\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tlocalAction: wrapCBMiddleware,\n\t\tremoteAction: wrapCBMiddleware,\n\n\t\tstopped() {\n\t\t\tif (windowTimer) {\n\t\t\t\tclearInterval(windowTimer);\n\t\t\t}\n\n\t\t\tdelete broker.CircuitBreakerStore;\n\t\t}\n\t};\n};\n"],"names":["METRIC","require$$0","broker","windowTimer","store","Map","logger","createWindowTimer","windowTime","setInterval","debug","forEach","item","key","count","delete","failures","resetStore","unref","getEpState","ep","service","opts","get","name","state","C","CIRCUIT_CLOSE","cbTimer","set","success","ctx","CIRCUIT_HALF_OPEN_WAIT","action","fullName","nodeID","id","broadcast","metrics","MOLECULER_CIRCUIT_BREAKER_OPENED_ACTIVE","affectedNodeID","MOLECULER_CIRCUIT_BREAKER_HALF_OPENED_ACTIVE","clearTimeout","circuitClose","checkThreshold","minRequestCount","threshold","CIRCUIT_OPEN","setTimeout","halfOpen","halfOpenTime","rate","increment","MOLECULER_CIRCUIT_BREAKER_OPENED_TOTAL","trip","CIRCUIT_HALF_OPEN","wrapCBMiddleware","handler","Object","assign","this","options","circuitBreaker","enabled","endpoint","halfOpenWait","then","res","catch","err","check","failure","Promise","reject","bind","[object Object]","getLogger","CircuitBreakerStore","isMetricsEnabled","register","type","TYPE_GAUGE","labelNames","description","TYPE_COUNTER","localAction","remoteAction","clearInterval"],"mappings":"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"}