import t from"../../../process.js";import e from"../errors.js";import o from"../metrics/index.js";const{RequestTimeoutError:i}=e,{METRIC:r}=o;export default function(e){function o(o,n){const s=n.timeout,m=n.name,u=n.service?n.service.fullName:null;return function(n){null==n.options.timeout&&(n.options.timeout=null!=s?s:e.options.requestTimeout),n.options.timeout>0&&!n.startHrTime&&(n.startHrTime=t.hrtime());const c=o(n);return n.options.timeout>0&&c.timeout?c.timeout(n.options.timeout).catch((t=>{if(t instanceof e.Promise.TimeoutError){const o=n.nodeID;this.logger.warn(`Request '${m}' is timed out.`,{requestID:n.requestID,nodeID:o,timeout:n.options.timeout}),t=new i({action:m,nodeID:o}),e.metrics.increment(r.MOLECULER_REQUEST_TIMEOUT_TOTAL,{service:u,action:m})}throw t})):c}.bind(this)}return{name:"Timeout",created(t){t.isMetricsEnabled()&&t.metrics.register({name:r.MOLECULER_REQUEST_TIMEOUT_TOTAL,type:r.TYPE_COUNTER,labelNames:["service","action"],description:"Number of timed out requests",rate:!0})},localAction:o,remoteAction:o}}
//# sourceMappingURL=timeout.js.map
