import t from"../metrics/index.js";const{METRIC:e}=t;export default function(t){function r(r,s){const n=s.name,i=s.service?s.service.fullName:null,a=Object.assign({},this.options.retryPolicy,s.retryPolicy||{});return a.enabled?function(c){const o="number"==typeof c.options.retries?c.options.retries:a.retries;return null==c._retryAttempts&&(c._retryAttempts=0),r(c).catch((r=>{if(c.nodeID!=t.nodeID&&c.endpoint.local)return Promise.reject(r);if(a.check(r)&&(t.metrics.increment(e.MOLECULER_REQUEST_RETRY_ATTEMPTS_TOTAL,{service:i,action:s.name}),c._retryAttempts<o)){c._retryAttempts++,c.span&&(c.span.setError(r),c.span.addTags({retryAttempts:c._retryAttempts}),c.finishSpan(c.span));const e=Math.min(a.delay*Math.pow(a.factor,c._retryAttempts-1),a.maxDelay);return t.logger.warn(`Retry to call '${n}' action after ${e} ms...`,{requestID:c.requestID,attempts:c._retryAttempts}),t.Promise.delay(e).then((()=>{const e=c.copy();return e._retryAttempts=c._retryAttempts,"private"==s.visibility?c.service.actions[s.rawName](c.params,{ctx:e}):t.call(n,c.params,{ctx:e})}))}return Promise.reject(r)}))}.bind(this):r}return{name:"Retry",created(){t.isMetricsEnabled()&&t.metrics.register({name:e.MOLECULER_REQUEST_RETRY_ATTEMPTS_TOTAL,type:e.TYPE_COUNTER,labelNames:["service","action"],description:"Number of retries",rate:!0})},localAction:r,remoteAction:r}}
//# sourceMappingURL=retry.js.map
