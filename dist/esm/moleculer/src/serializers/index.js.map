{"version":3,"file":"index.js","sources":["../../../../../src/moleculer/src/serializers/index.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2018 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst { isObject, isString } = require(\"../utils\");\nconst { BrokerOptionsError } = require(\"../errors\");\n\nconst Serializers = {\n\tBase: require(\"./base\"),\n\tJSON: require(\"./json\"),\n\tAvro: require(\"./avro\"),\n\tMsgPack: require(\"./msgpack\"),\n\tProtoBuf: require(\"./protobuf\"),\n\tThrift: require(\"./thrift\"),\n\tNotepack: require(\"./notepack\")\n};\n\nfunction getByName(name) {\n\t/* istanbul ignore next */\n\tif (!name)\n\t\treturn null;\n\n\tlet n = Object.keys(Serializers).find(n => n.toLowerCase() == name.toLowerCase());\n\tif (n)\n\t\treturn Serializers[n];\n}\n\n/**\n * Resolve serializer by name\n *\n * @param {object|string} opt\n * @returns {Serializer}\n * @memberof ServiceBroker\n */\nfunction resolve(opt) {\n\tif (opt instanceof Serializers.Base) {\n\t\treturn opt;\n\t} else if (isString(opt)) {\n\t\tlet SerializerClass = getByName(opt);\n\t\tif (SerializerClass)\n\t\t\treturn new SerializerClass();\n\t\telse\n\t\t\tthrow new BrokerOptionsError(`Invalid serializer type '${opt}'.`, { type: opt });\n\n\t} else if (isObject(opt)) {\n\t\tlet SerializerClass = getByName(opt.type || \"JSON\");\n\t\tif (SerializerClass)\n\t\t\treturn new SerializerClass(opt.options);\n\t\telse\n\t\t\tthrow new BrokerOptionsError(`Invalid serializer type '${opt.type}'.`, { type: opt.type });\n\t}\n\n\treturn new Serializers.JSON();\n}\n\nfunction register(name, value) {\n\tSerializers[name] = value;\n}\n\nmodule.exports = Object.assign(Serializers, { resolve, register });\n"],"names":["isObject","isString","require$$0","BrokerOptionsError","require$$1","Serializers","Base","require$$2","JSON","require$$3","Avro","require$$4","MsgPack","require$$5","ProtoBuf","require$$6","Thrift","require$$7","Notepack","require$$8","getByName","name","n","Object","keys","find","toLowerCase","assign","resolve","opt","SerializerClass","type","options","register","value"],"mappings":"4IAQA,MAAMA,SAAEA,EAAQC,SAAEA,GAAaC,GACzBC,mBAAEA,GAAuBC,EAEzBC,EAAc,CACnBC,KAAMC,EACNC,KAAMC,EACNC,KAAMC,EACNC,QAASC,EACTC,SAAUC,EACVC,OAAQC,EACRC,SAAUC,GAGX,SAASC,EAAUC,GAElB,IAAKA,EACJ,OAAO,KAER,IAAIC,EAAIC,OAAOC,KAAKnB,GAAaoB,MAAKH,GAAKA,EAAEI,eAAiBL,EAAKK,gBACnE,OAAIJ,EACIjB,EAAYiB,QADpB,QAoCgBC,OAAOI,OAAOtB,EAAa,CAAEuB,QAzB9C,SAAiBC,GAChB,GAAIA,aAAexB,EAAYC,KAC9B,OAAOuB,EACD,GAAI5B,EAAS4B,GAAM,CACzB,IAAIC,EAAkBV,EAAUS,GAChC,GAAIC,EACH,OAAO,IAAIA,EAEX,MAAM,IAAI3B,EAAmB,4BAA4B0B,MAAS,CAAEE,KAAMF,IAErE,GAAI7B,EAAS6B,GAAM,CACzB,IAAIC,EAAkBV,EAAUS,EAAIE,MAAQ,QAC5C,GAAID,EACH,OAAO,IAAIA,EAAgBD,EAAIG,SAE/B,MAAM,IAAI7B,EAAmB,4BAA4B0B,EAAIE,SAAU,CAAEA,KAAMF,EAAIE,OAGrF,OAAO,IAAI1B,EAAYG,MAO+ByB,SAJvD,SAAkBZ,EAAMa,GACvB7B,EAAYgB,GAAQa"}