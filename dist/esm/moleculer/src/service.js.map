{"version":3,"file":"service.js","sources":["../../../../src/moleculer/src/service.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2020 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst _ \t\t\t\t\t\t= require(\"lodash\");\nconst functionArguments \t\t= require(\"fn-args\");\nconst { ServiceSchemaError, MoleculerError } \t= require(\"./errors\");\nconst { isObject, isFunction, flatten }\t= require(\"./utils\");\n\n/**\n * Wrap a handler Function to an object with a `handler` property.\n *\n * @param {Function|Object} o\n * @returns {Object}\n */\nfunction wrapToHander(o) {\n\treturn isFunction(o) ? { handler: o } : o;\n}\n\n/**\n * Wrap any value to an array.\n * @param {any} o\n * @returns {Array}\n */\nfunction wrapToArray(o) {\n\treturn Array.isArray(o) ? o : [o];\n}\n\nfunction isNewSignature(args) {\n\treturn args.length > 0 && [\"ctx\", \"context\"].indexOf(args[0].toLowerCase()) !== -1;\n}\n\n\n/**\n * Service class\n *\n * @class Service\n */\nclass Service {\n\n\t/**\n\t * Creates an instance of Service by schema.\n\t *\n\t * @param {ServiceBroker} \tbroker\tbroker of service\n\t * @param {Object} \t\t\tschema\tschema of service\n\t *\n\t * @memberof Service\n\t */\n\tconstructor(broker, schema) {\n\t\tif (!isObject(broker))\n\t\t\tthrow new ServiceSchemaError(\"Must set a ServiceBroker instance!\");\n\n\t\tthis.broker = broker;\n\n\t\tif (broker)\n\t\t\tthis.Promise = broker.Promise;\n\n\t\tif (schema)\n\t\t\tthis.parseServiceSchema(schema);\n\t}\n\n\t/**\n\t * Parse Service schema & register as local service\n\t *\n\t * @param {Object} schema of Service\n\t */\n\tparseServiceSchema(schema) {\n\t\tif (!isObject(schema))\n\t\t\tthrow new ServiceSchemaError(\"The service schema can't be null. Maybe is it not a service schema?\");\n\n\t\tthis.originalSchema = _.cloneDeep(schema);\n\n\t\tif (schema.mixins) {\n\t\t\tschema = Service.applyMixins(schema);\n\t\t}\n\n\t\tif (isFunction(schema.merged)) {\n\t\t\tschema.merged.call(this, schema);\n\t\t} else if (Array.isArray(schema.merged)) {\n\t\t\tschema.merged.forEach(fn => fn.call(this, schema));\n\t\t}\n\n\t\tthis.broker.callMiddlewareHookSync(\"serviceCreating\", [this, schema]);\n\n\t\tif (!schema.name) {\n\t\t\t/* eslint-disable-next-line */\n\t\t\tconsole.error(\"Service name can't be empty! Maybe it is not a valid Service schema. Maybe is it not a service schema?\", { schema });\n\t\t\tthrow new ServiceSchemaError(\"Service name can't be empty! Maybe it is not a valid Service schema. Maybe is it not a service schema?\", { schema });\n\t\t}\n\n\t\tthis.name = schema.name;\n\t\tthis.version = schema.version;\n\t\tthis.settings = schema.settings || {};\n\t\tthis.metadata = schema.metadata || {};\n\t\tthis.schema = schema;\n\n\t\tthis.fullName = Service.getVersionedFullName(this.name, this.settings.$noVersionPrefix !== true ? this.version : undefined);\n\n\t\tthis.logger = this.broker.getLogger(this.fullName, {\n\t\t\tsvc: this.name,\n\t\t\tver: this.version\n\t\t});\n\n\t\tthis.actions = {}; // external access to actions\n\t\tthis.events = {}; // external access to event handlers.\n\n\t\t// Service item for Registry\n\t\tconst serviceSpecification = {\n\t\t\tname: this.name,\n\t\t\tversion: this.version,\n\t\t\tfullName: this.fullName,\n\t\t\tsettings: this._getPublicSettings(this.settings),\n\t\t\tmetadata: this.metadata,\n\t\t\tactions: {},\n\t\t\tevents: {}\n\t\t};\n\n\t\t// Register methods\n\t\tif (isObject(schema.methods)) {\n\n\t\t\t_.forIn(schema.methods, (method, name) => {\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tif ([\"name\", \"version\", \"settings\", \"metadata\", \"dependencies\", \"schema\", \"broker\", \"actions\", \"logger\", \"created\", \"started\", \"stopped\", \"_start\", \"_stop\", \"_init\"].indexOf(name) != -1) {\n\t\t\t\t\tthrow new ServiceSchemaError(`Invalid method name '${name}' in '${this.name}' service!`);\n\t\t\t\t}\n\n\t\t\t\tthis._createMethod(method, name);\n\t\t\t});\n\t\t}\n\n\t\t// Register actions\n\t\tif (isObject(schema.actions)) {\n\t\t\t_.forIn(schema.actions, (action, name) => {\n\t\t\t\tif (action === false)\n\t\t\t\t\treturn;\n\n\t\t\t\tlet innerAction = this._createAction(action, name);\n\n\t\t\t\tserviceSpecification.actions[innerAction.name] = innerAction;\n\n\t\t\t\tconst wrappedHandler = this.broker.middlewares.wrapHandler(\"localAction\", innerAction.handler, innerAction);\n\n\t\t\t\t// Expose to be callable as `this.actions.find({ ...params })`\n\t\t\t\tconst ep = this.broker.registry.createPrivateActionEndpoint(innerAction);\n\t\t\t\tthis.actions[name] = (params, opts) => {\n\t\t\t\t\tlet ctx;\n\t\t\t\t\tif (opts && opts.ctx) {\n\t\t\t\t\t\t// Reused context (in case of retry)\n\t\t\t\t\t\tctx = opts.ctx;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx = this.broker.ContextFactory.create(this.broker, ep, params, opts || {});\n\t\t\t\t\t}\n\t\t\t\t\treturn wrappedHandler(ctx);\n\t\t\t\t};\n\n\t\t\t});\n\t\t}\n\n\t\t// Event subscriptions\n\t\tif (isObject(schema.events)) {\n\t\t\t_.forIn(schema.events, (event, name) => {\n\t\t\t\tconst innerEvent = this._createEvent(event, name);\n\t\t\t\tserviceSpecification.events[innerEvent.name] = innerEvent;\n\n\t\t\t\t// Expose to be callable as `this.events[''](params, opts);\n\t\t\t\tthis.events[innerEvent.name] = (params, opts) => {\n\t\t\t\t\tlet ctx;\n\t\t\t\t\tif (opts && opts.ctx) {\n\t\t\t\t\t\t// Reused context (in case of retry)\n\t\t\t\t\t\tctx = opts.ctx;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst ep = {\n\t\t\t\t\t\t\tid: this.broker.nodeID,\n\t\t\t\t\t\t\tevent: innerEvent\n\t\t\t\t\t\t};\n\t\t\t\t\t\tctx = this.broker.ContextFactory.create(this.broker, ep, params, opts || {});\n\t\t\t\t\t}\n\t\t\t\t\tctx.eventName = name;\n\t\t\t\t\tctx.eventType = \"emit\";\n\t\t\t\t\tctx.eventGroups = [innerEvent.group || this.name];\n\n\t\t\t\t\treturn innerEvent.handler(ctx);\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\tthis._serviceSpecification = serviceSpecification;\n\n\t\t// Initialize\n\t\tthis._init();\n\t}\n\n\t/**\n\t * Return a service settings without protected properties.\n\t *\n\t * @param {Object?} settings\n\t */\n\t_getPublicSettings(settings) {\n\t\tif (settings && Array.isArray(settings.$secureSettings)) {\n\t\t\treturn _.omit(settings, [].concat(settings.$secureSettings, [\"$secureSettings\"]));\n\t\t}\n\n\t\treturn settings;\n\t}\n\n\t/**\n\t * Initialize service. It called `created` handler in schema\n\t *\n\t * @private\n\t * @memberof Service\n\t */\n\t_init() {\n\t\tthis.logger.debug(`Service '${this.fullName}' is creating...`);\n\t\tif (isFunction(this.schema.created)) {\n\t\t\tthis.schema.created.call(this);\n\t\t} else if (Array.isArray(this.schema.created)) {\n\t\t\tthis.schema.created.forEach(fn => fn.call(this));\n\t\t}\n\n\t\tthis.broker.addLocalService(this);\n\n\t\tthis.broker.callMiddlewareHookSync(\"serviceCreated\", [this]);\n\n\t\tthis.logger.debug(`Service '${this.fullName}' created.`);\n\t}\n\n\t/**\n\t * Start service\n\t *\n\t * @returns {Promise}\n\t * @private\n\t * @memberof Service\n\t */\n\t_start() {\n\t\tthis.logger.debug(`Service '${this.fullName}' is starting...`);\n\t\treturn this.Promise.resolve()\n\t\t\t.then(() => {\n\t\t\t\treturn this.broker.callMiddlewareHook(\"serviceStarting\", [this]);\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// Wait for dependent services\n\t\t\t\tif (this.schema.dependencies)\n\t\t\t\t\treturn this.waitForServices(this.schema.dependencies, this.settings.$dependencyTimeout || 0, this.settings.$dependencyInterval || this.broker.options.dependencyInterval);\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tif (isFunction(this.schema.started))\n\t\t\t\t\treturn this.Promise.method(this.schema.started).call(this);\n\n\t\t\t\tif (Array.isArray(this.schema.started)) {\n\t\t\t\t\treturn this.schema.started\n\t\t\t\t\t\t.map(fn => this.Promise.method(fn.bind(this)))\n\t\t\t\t\t\t.reduce((p, fn) => p.then(() => fn()), this.Promise.resolve());\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// Register service\n\t\t\t\tthis.broker.registerLocalService(this._serviceSpecification);\n\t\t\t\treturn null;\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\treturn this.broker.callMiddlewareHook(\"serviceStarted\", [this]);\n\t\t\t})\n\t\t\t.then(() => this.logger.info(`Service '${this.fullName}' started.`));\n\t}\n\n\t/**\n\t * Stop service\n\t *\n\t * @returns {Promise}\n\t * @private\n\t * @memberof Service\n\t */\n\t_stop() {\n\t\tthis.logger.debug(`Service '${this.fullName}' is stopping...`);\n\t\treturn this.Promise.resolve()\n\t\t\t.then(() => {\n\t\t\t\treturn this.broker.callMiddlewareHook(\"serviceStopping\", [this], { reverse: true });\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tif (isFunction(this.schema.stopped))\n\t\t\t\t\treturn this.Promise.method(this.schema.stopped).call(this);\n\n\t\t\t\tif (Array.isArray(this.schema.stopped)) {\n\t\t\t\t\tconst arr = Array.from(this.schema.stopped).reverse();\n\t\t\t\t\treturn arr\n\t\t\t\t\t\t.map(fn => this.Promise.method(fn.bind(this)))\n\t\t\t\t\t\t.reduce((p, fn) => p.then(() => fn()), this.Promise.resolve());\n\t\t\t\t}\n\n\t\t\t\treturn this.Promise.resolve();\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\treturn this.broker.callMiddlewareHook(\"serviceStopped\", [this], { reverse: true });\n\t\t\t})\n\t\t\t.then(() => this.logger.info(`Service '${this.fullName}' stopped.`));\n\t}\n\n\t/**\n\t * Create an external action handler for broker (internal command!)\n\t *\n\t * @param {Object|Function} actionDef\n\t * @param {String} name\n\t * @returns {Object}\n\t *\n\t * @private\n\t * @memberof Service\n\t */\n\t_createAction(actionDef, name) {\n\t\tlet action;\n\t\tif (isFunction(actionDef)) {\n\t\t\t// Wrap to an object\n\t\t\taction = {\n\t\t\t\thandler: actionDef\n\t\t\t};\n\t\t} else if (isObject(actionDef)) {\n\t\t\taction = _.cloneDeep(actionDef);\n\t\t} else {\n\t\t\tthrow new ServiceSchemaError(`Invalid action definition in '${name}' action in '${this.fullName}' service!`);\n\t\t}\n\n\t\tlet handler = action.handler;\n\t\tif (!isFunction(handler)) {\n\t\t\tthrow new ServiceSchemaError(`Missing action handler on '${name}' action in '${this.fullName}' service!`);\n\t\t}\n\n\t\taction.rawName = action.name || name;\n\t\tif (this.settings.$noServiceNamePrefix !== true)\n\t\t\taction.name = this.fullName + \".\" + action.rawName;\n\t\telse\n\t\t\taction.name = action.rawName;\n\n\t\tif (action.cache === undefined && this.settings.$cache !== undefined) {\n\t\t\taction.cache = this.settings.$cache;\n\t\t}\n\n\t\taction.service = this;\n\t\taction.handler = this.Promise.method(handler.bind(this));\n\n\t\treturn action;\n\t}\n\n\t/**\n\t * Create an internal service method.\n\t *\n\t * @param {Object|Function} methodDef\n\t * @param {String} name\n\t * @returns {Object}\n\t */\n\t_createMethod(methodDef, name) {\n\t\tlet method;\n\t\tif (isFunction(methodDef)) {\n\t\t\t// Wrap to an object\n\t\t\tmethod = {\n\t\t\t\thandler: methodDef\n\t\t\t};\n\t\t} else if (isObject(methodDef)) {\n\t\t\tmethod = methodDef;\n\t\t} else {\n\t\t\tthrow new ServiceSchemaError(`Invalid method definition in '${name}' method in '${this.fullName}' service!`);\n\t\t}\n\n\t\tif (!isFunction(method.handler)) {\n\t\t\tthrow new ServiceSchemaError(`Missing method handler on '${name}' method in '${this.fullName}' service!`);\n\t\t}\n\n\t\tmethod.name = name;\n\t\tmethod.service = this;\n\t\tmethod.handler = method.handler.bind(this);\n\n\t\tthis[name] = this.broker.middlewares.wrapHandler(\"localMethod\", method.handler, method);\n\n\t\treturn method;\n\t}\n\n\t/**\n\t * Create an event subscription for broker\n\t *\n\t * @param {Object|Function} eventDef\n\t * @param {String} name\n\t * @returns {Object}\n\t *\n\t * @private\n\t * @memberof Service\n\t */\n\t_createEvent(eventDef, name) {\n\t\tlet event;\n\t\tif (isFunction(eventDef) || Array.isArray(eventDef)) {\n\t\t\tevent = {\n\t\t\t\thandler: eventDef\n\t\t\t};\n\t\t} else if (isObject(eventDef)) {\n\t\t\tevent = _.cloneDeep(eventDef);\n\t\t} else {\n\t\t\tthrow new ServiceSchemaError(`Invalid event definition in '${name}' event in '${this.fullName}' service!`);\n\t\t}\n\n\t\tif (!isFunction(event.handler) && !Array.isArray(event.handler)) {\n\t\t\tthrow new ServiceSchemaError(`Missing event handler on '${name}' event in '${this.fullName}' service!`);\n\t\t}\n\n\t\t// Detect new or legacy parameter list of event handler\n\t\t// Legacy: handler(payload, sender, eventName)\n\t\t// New: handler(ctx)\n\t\tlet handler;\n\t\tif (isFunction(event.handler)) {\n\t\t\tconst args = functionArguments(event.handler);\n\t\t\thandler = this.Promise.method(event.handler);\n\t\t\thandler.__newSignature = event.context === true || isNewSignature(args);\n\t\t} else if (Array.isArray(event.handler)) {\n\t\t\thandler = event.handler.map(h => {\n\t\t\t\tconst args = functionArguments(h);\n\t\t\t\th = this.Promise.method(h);\n\t\t\t\th.__newSignature = event.context === true || isNewSignature(args);\n\t\t\t\treturn h;\n\t\t\t});\n\t\t}\n\n\t\tif (!event.name)\n\t\t\tevent.name = name;\n\n\t\tevent.service = this;\n\t\tconst self = this;\n\t\tif (isFunction(handler)) {\n\t\t\t// Call single handler\n\t\t\tevent.handler = function(ctx) {\n\t\t\t\treturn handler.apply(self, handler.__newSignature ? [ctx] : [ctx.params, ctx.nodeID, ctx.eventName, ctx]);\n\t\t\t};\n\t\t} else if (Array.isArray(handler)) {\n\t\t\t// Call multiple handler\n\t\t\tevent.handler = function(ctx) {\n\t\t\t\treturn self.Promise.all(handler.map(fn => fn.apply(self, fn.__newSignature ? [ctx] : [ctx.params, ctx.nodeID, ctx.eventName, ctx])));\n\t\t\t};\n\t\t}\n\n\t\treturn event;\n\t}\n\n\t/**\n\t * Call a local event handler. Useful for unit tests.\n\t *\n\t * @param {String} eventName\n\t * @param {any?} params\n\t * @param {Object?} opts\n\t */\n\temitLocalEventHandler(eventName, params, opts) {\n\t\tif (!this.events[eventName])\n\t\t\treturn Promise.reject(new MoleculerError(`No '${eventName}' registered local event handler`, 500, \"NOT_FOUND_EVENT\", { eventName }));\n\n\t\treturn this.events[eventName](params, opts);\n\t}\n\n\t/**\n\t * Getter of current Context.\n\t * @returns {Context?}\n\t *\n\t * @memberof Service\n\t *\n\tget currentContext() {\n\t\treturn this.broker.getCurrentContext();\n\t}*/\n\n\t/**\n\t * Setter of current Context\n\t *\n\t * @memberof Service\n\t *\n\tset currentContext(ctx) {\n\t\tthis.broker.setCurrentContext(ctx);\n\t}*/\n\n\t/**\n\t * Wait for other services\n\t *\n\t * @param {String|Array<String>} serviceNames\n\t * @param {Number} timeout Timeout in milliseconds\n\t * @param {Number} interval Check interval in milliseconds\n\t * @returns {Promise}\n\t * @memberof Service\n\t */\n\twaitForServices(serviceNames, timeout, interval) {\n\t\treturn this.broker.waitForServices(serviceNames, timeout, interval, this.logger);\n\t}\n\n\t/**\n\t * Apply `mixins` list in schema. Merge the schema with mixins schemas. Returns with the mixed schema\n\t *\n\t * @static\n\t * @param {Schema} schema\n\t * @returns {Schema}\n\t *\n\t * @memberof Service\n\t */\n\tstatic applyMixins(schema) {\n\t\tif (schema.mixins) {\n\t\t\tconst mixins = Array.isArray(schema.mixins) ? schema.mixins : [schema.mixins];\n\t\t\tif (mixins.length > 0) {\n\t\t\t\tconst mixedSchema = Array.from(mixins).reverse().reduce((s, mixin) => {\n\t\t\t\t\tif (mixin.mixins)\n\t\t\t\t\t\tmixin = Service.applyMixins(mixin);\n\n\t\t\t\t\treturn s ? Service.mergeSchemas(s, mixin) : mixin;\n\t\t\t\t}, null);\n\n\t\t\t\treturn Service.mergeSchemas(mixedSchema, schema);\n\t\t\t}\n\t\t}\n\n\t\t/* istanbul ignore next */\n\t\treturn schema;\n\t}\n\n\t/**\n\t * Merge two Service schema\n\t *\n\t * @static\n\t * @param {Object} mixinSchema\t\tMixin schema\n\t * @param {Object} svcSchema \t\tService schema\n\t * @returns {Object} Mixed schema\n\t *\n\t * @memberof Service\n\t */\n\tstatic mergeSchemas(mixinSchema, svcSchema) {\n\t\tconst res = _.cloneDeep(mixinSchema);\n\t\tconst mods = _.cloneDeep(svcSchema);\n\n\t\tObject.keys(mods).forEach(key => {\n\t\t\tif ([\"name\", \"version\"].indexOf(key) !== -1 && mods[key] !== undefined) {\n\t\t\t\t// Simple overwrite\n\t\t\t\tres[key] = mods[key];\n\t\t\t} else if (key == \"settings\") {\n\t\t\t\t// Merge with defaultsDeep\n\t\t\t\tres[key] = Service.mergeSchemaSettings(mods[key], res[key]);\n\n\t\t\t} else if (key == \"metadata\") {\n\t\t\t\t// Merge with defaultsDeep\n\t\t\t\tres[key] = Service.mergeSchemaMetadata(mods[key], res[key]);\n\n\t\t\t} else if (key == \"hooks\") {\n\t\t\t\t// Merge & concat\n\t\t\t\tres[key] = Service.mergeSchemaHooks(mods[key], res[key] || {});\n\n\t\t\t} else if (key == \"actions\") {\n\t\t\t\t// Merge with defaultsDeep\n\t\t\t\tres[key] = Service.mergeSchemaActions(mods[key], res[key] || {});\n\n\t\t\t} else if (key == \"methods\") {\n\t\t\t\t// Overwrite\n\t\t\t\tres[key] = Service.mergeSchemaMethods(mods[key], res[key]);\n\n\t\t\t} else if (key == \"events\") {\n\t\t\t\t// Merge & concat by groups\n\t\t\t\tres[key] = Service.mergeSchemaEvents(mods[key], res[key] || {});\n\n\t\t\t} else if ([\"merged\", \"created\", \"started\", \"stopped\"].indexOf(key) !== -1) {\n\t\t\t\t// Concat lifecycle event handlers\n\t\t\t\tres[key] = Service.mergeSchemaLifecycleHandlers(mods[key], res[key]);\n\n\t\t\t} else if (key == \"mixins\") {\n\t\t\t\t// Concat mixins\n\t\t\t\tres[key] = Service.mergeSchemaUniqArray(mods[key], res[key]);\n\n\t\t\t} else if (key == \"dependencies\") {\n\t\t\t\t// Concat mixins\n\t\t\t\tres[key] = Service.mergeSchemaUniqArray(mods[key], res[key]);\n\n\t\t\t} else {\n\t\t\t\tconst customFnName = \"mergeSchema\" + key.replace(/./, key[0].toUpperCase()); // capitalize first letter\n\t\t\t\tif (isFunction(Service[customFnName])) {\n\t\t\t\t\tres[key] = Service[customFnName](mods[key], res[key]);\n\t\t\t\t} else {\n\t\t\t\t\tres[key] = Service.mergeSchemaUnknown(mods[key], res[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn res;\n\t}\n\n\t/**\n\t * Merge `settings` property in schema\n\t *\n\t * @static\n\t * @param {Object} src Source schema property\n\t * @param {Object} target Target schema property\n\t *\n\t * @returns {Object} Merged schema\n\t */\n\tstatic mergeSchemaSettings(src, target) {\n\t\tif ((target && target.$secureSettings) || (src && src.$secureSettings)) {\n\t\t\tconst srcSS = src && src.$secureSettings ? src.$secureSettings : [];\n\t\t\tconst targetSS = target && target.$secureSettings ? target.$secureSettings : [];\n\t\t\tif (!target) target = {};\n\n\t\t\ttarget.$secureSettings = _.uniq([].concat(srcSS, targetSS));\n\t\t}\n\n\t\treturn _.defaultsDeep(src, target);\n\t}\n\n\t/**\n\t * Merge `metadata` property in schema\n\t *\n\t * @static\n\t * @param {Object} src Source schema property\n\t * @param {Object} target Target schema property\n\t *\n\t * @returns {Object} Merged schema\n\t */\n\tstatic mergeSchemaMetadata(src, target) {\n\t\treturn _.defaultsDeep(src, target);\n\t}\n\n\t/**\n\t * Merge `mixins` property in schema\n\t *\n\t * @static\n\t * @param {Object} src Source schema property\n\t * @param {Object} target Target schema property\n\t *\n\t * @returns {Object} Merged schema\n\t */\n\tstatic mergeSchemaUniqArray(src, target) {\n\t\treturn _.uniqWith(_.compact(flatten([src, target])), _.isEqual);\n\t}\n\n\t/**\n\t * Merge `dependencies` property in schema\n\t *\n\t * @static\n\t * @param {Object} src Source schema property\n\t * @param {Object} target Target schema property\n\t *\n\t * @returns {Object} Merged schema\n\t */\n\tstatic mergeSchemaDependencies(src, target) {\n\t\treturn Service.mergeSchemaUniqArray(src, target);\n\t}\n\n\t/**\n\t * Merge `hooks` property in schema\n\t *\n\t * @static\n\t * @param {Object} src Source schema property\n\t * @param {Object} target Target schema property\n\t *\n\t * @returns {Object} Merged schema\n\t */\n\tstatic mergeSchemaHooks(src, target) {\n\t\tObject.keys(src).forEach(k => {\n\t\t\tif (target[k] == null)\n\t\t\t\ttarget[k] = {};\n\n\t\t\tObject.keys(src[k]).forEach(k2 => {\n\t\t\t\tconst modHook = wrapToArray(src[k][k2]);\n\t\t\t\tconst resHook = wrapToArray(target[k][k2]);\n\n\t\t\t\ttarget[k][k2] = _.compact(flatten(k == \"before\" ? [resHook, modHook] : [modHook, resHook]));\n\t\t\t});\n\t\t});\n\n\t\treturn target;\n\t}\n\n\t/**\n\t * Merge `actions` property in schema\n\t *\n\t * @static\n\t * @param {Object} src Source schema property (real schema)\n\t * @param {Object} target Target schema property (mixin schema)\n\t *\n\t * @returns {Object} Merged schema\n\t */\n\tstatic mergeSchemaActions(src, target) {\n\t\tObject.keys(src).forEach(k => {\n\t\t\tif (src[k] === false && target[k]) {\n\t\t\t\tdelete target[k];\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst srcAction = wrapToHander(src[k]);\n\t\t\tconst targetAction = wrapToHander(target[k]);\n\n\t\t\tif (srcAction && srcAction.hooks && targetAction && targetAction.hooks) {\n\t\t\t\tObject.keys(srcAction.hooks).forEach(k => {\n\t\t\t\t\tconst modHook = wrapToArray(srcAction.hooks[k]);\n\t\t\t\t\tconst resHook = wrapToArray(targetAction.hooks[k]);\n\n\t\t\t\t\tsrcAction.hooks[k] = _.compact(flatten(k == \"before\" ? [resHook, modHook] : [modHook, resHook]));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\ttarget[k] = _.defaultsDeep(srcAction, targetAction);\n\t\t});\n\n\t\treturn target;\n\t}\n\n\t/**\n\t * Merge `methods` property in schema\n\t *\n\t * @static\n\t * @param {Object} src Source schema property\n\t * @param {Object} target Target schema property\n\t *\n\t * @returns {Object} Merged schema\n\t */\n\tstatic mergeSchemaMethods(src, target) {\n\t\treturn Object.assign(target || {}, src || {});\n\t}\n\n\t/**\n\t * Merge `events` property in schema\n\t *\n\t * @static\n\t * @param {Object} src Source schema property\n\t * @param {Object} target Target schema property\n\t *\n\t * @returns {Object} Merged schema\n\t */\n\tstatic mergeSchemaEvents(src, target) {\n\t\tObject.keys(src).forEach(k => {\n\t\t\tconst modEvent = wrapToHander(src[k]);\n\t\t\tconst resEvent = wrapToHander(target[k]);\n\n\t\t\tlet handler = _.compact(flatten([resEvent ? resEvent.handler : null, modEvent ? modEvent.handler : null]));\n\t\t\tif (handler.length == 1) handler = handler[0];\n\n\t\t\ttarget[k] = _.defaultsDeep(modEvent, resEvent);\n\t\t\ttarget[k].handler = handler;\n\t\t});\n\n\t\treturn target;\n\t}\n\n\t/**\n\t * Merge `started`, `stopped`, `created` event handler properties in schema\n\t *\n\t * @static\n\t * @param {Object} src Source schema property\n\t * @param {Object} target Target schema property\n\t *\n\t * @returns {Object} Merged schema\n\t */\n\tstatic mergeSchemaLifecycleHandlers(src, target) {\n\t\treturn _.compact(flatten([target, src]));\n\t}\n\n\t/**\n\t * Merge unknown properties in schema\n\t *\n\t * @static\n\t * @param {Object} src Source schema property\n\t * @param {Object} target Target schema property\n\t *\n\t * @returns {Object} Merged schema\n\t */\n\tstatic mergeSchemaUnknown(src, target) {\n\t\tif (src !== undefined)\n\t\t\treturn src;\n\n\t\treturn target;\n\t}\n\n\t/**\n\t * Return a versioned full service name.\n\t * @param {String} name\n\t * @param {String|Number?} version\n\t */\n\tstatic getVersionedFullName(name, version) {\n\t\tif (version != null)\n\t\t\treturn (typeof(version) == \"number\" ? \"v\" + version : version) + \".\" + name;\n\n\t\treturn name;\n\t}\n\n}\n\nmodule.exports = Service;\n"],"names":["ServiceSchemaError","MoleculerError","require$$0","isObject","isFunction","flatten","require$$1","wrapToHander","o","handler","wrapToArray","Array","isArray","isNewSignature","args","length","indexOf","toLowerCase","Service","[object Object]","broker","schema","this","Promise","parseServiceSchema","originalSchema","_","cloneDeep","mixins","applyMixins","merged","call","forEach","fn","callMiddlewareHookSync","name","console","error","version","settings","metadata","fullName","getVersionedFullName","$noVersionPrefix","undefined","logger","getLogger","svc","ver","actions","events","serviceSpecification","_getPublicSettings","methods","forIn","method","_createMethod","action","innerAction","_createAction","wrappedHandler","middlewares","wrapHandler","ep","registry","createPrivateActionEndpoint","params","opts","ctx","ContextFactory","create","event","innerEvent","_createEvent","id","nodeID","eventName","eventType","eventGroups","group","_serviceSpecification","_init","$secureSettings","omit","concat","debug","created","addLocalService","resolve","then","callMiddlewareHook","dependencies","waitForServices","$dependencyTimeout","$dependencyInterval","options","dependencyInterval","started","map","bind","reduce","p","registerLocalService","info","reverse","stopped","from","actionDef","rawName","$noServiceNamePrefix","cache","$cache","service","methodDef","eventDef","functionArguments","__newSignature","context","h","self","apply","all","reject","serviceNames","timeout","interval","mixedSchema","s","mixin","mergeSchemas","mixinSchema","svcSchema","res","mods","Object","keys","key","mergeSchemaSettings","mergeSchemaMetadata","mergeSchemaHooks","mergeSchemaActions","mergeSchemaMethods","mergeSchemaEvents","mergeSchemaLifecycleHandlers","mergeSchemaUniqArray","customFnName","replace","toUpperCase","mergeSchemaUnknown","src","target","srcSS","targetSS","uniq","defaultsDeep","uniqWith","compact","isEqual","k","k2","modHook","resHook","srcAction","targetAction","hooks","assign","modEvent","resEvent"],"mappings":"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"}