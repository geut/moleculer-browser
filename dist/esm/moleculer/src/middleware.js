import e from"lodash";import r from"./errors.js";import s from"./utils.js";import t from"./middlewares/index.js";const{BrokerOptionsError:i}=r,{isObject:o,isFunction:h,isString:d}=s;var l=class{constructor(e){this.broker=e,this.list=[],this.registeredHooks={}}add(r){if(r){if(d(r)){const s=e.get(t,r);if(!s)throw new i(`Invalid built-in middleware type '${r}'.`,{type:r});r=s}if(h(r)&&(r=r.call(this.broker,this.broker)),!o(r))throw new i(`Invalid middleware type '${typeof r}'. Accepted only Object of Function.`,{type:typeof r});Object.keys(r).forEach((e=>{h(r[e])&&(Array.isArray(this.registeredHooks[e])?this.registeredHooks[e].push(r[e]):this.registeredHooks[e]=[r[e]])})),this.list.push(r)}}wrapHandler(e,r,s){return this.registeredHooks[e]&&this.registeredHooks[e].length&&(r=this.registeredHooks[e].reduce(((e,r)=>r.call(this.broker,e,s)),r)),r}callHandlers(e,r,s={}){if(this.registeredHooks[e]&&this.registeredHooks[e].length){return(s.reverse?Array.from(this.registeredHooks[e]).reverse():this.registeredHooks[e]).reduce(((e,s)=>e.then((()=>s.apply(this.broker,r)))),this.broker.Promise.resolve())}return this.broker.Promise.resolve()}callSyncHandlers(e,r,s={}){if(this.registeredHooks[e]&&this.registeredHooks[e].length){return(s.reverse?Array.from(this.registeredHooks[e]).reverse():this.registeredHooks[e]).map((e=>e.apply(this.broker,r)))}}count(){return this.list.length}wrapMethod(e,r,s=this.broker,t={}){if(this.registeredHooks[e]&&this.registeredHooks[e].length){r=(t.reverse?Array.from(this.registeredHooks[e]).reverse():this.registeredHooks[e]).reduce(((e,r)=>r.call(s,e)),r.bind(s))}return r}};export default l;
//# sourceMappingURL=middleware.js.map
