{"version":3,"file":"cpu-usage.js","sources":["../../../../src/moleculer/src/cpu-usage.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2018 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\n/**\n * CPU usage measure.\n *\n * Based on: https://github.com/icebob/cpu\n */\nconst os = require(\"os\");\n\n/* istanbul ignore next */\nmodule.exports = function getCpuUsage(sampleTime = 100) {\n\treturn new Promise((resolve, reject) => {\n\t\ttry {\n\t\t\tconst first = os.cpus().map(cpu => cpu.times);\n\t\t\tsetTimeout(() => {\n\t\t\t\ttry {\n\t\t\t\t\tconst second = os.cpus().map(cpu => cpu.times);\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst third = os.cpus().map(cpu => cpu.times);\n\n\t\t\t\t\t\t\tconst usages = [];\n\t\t\t\t\t\t\tfor (let i = 0; i < first.length; i++) {\n\t\t\t\t\t\t\t\tconst first_idle = first[i].idle;\n\t\t\t\t\t\t\t\tconst first_total = first[i].idle + first[i].user + first[i].nice + first[i].sys + first[i].irq;\n\t\t\t\t\t\t\t\tconst second_idle = second[i].idle;\n\t\t\t\t\t\t\t\tconst second_total = second[i].idle + second[i].user + second[i].nice + second[i].sys + second[i].irq;\n\t\t\t\t\t\t\t\tconst third_idle = third[i].idle;\n\t\t\t\t\t\t\t\tconst third_total = third[i].idle + third[i].user + third[i].nice + third[i].sys + third[i].irq;\n\t\t\t\t\t\t\t\tconst first_usage = 1 - (second_idle - first_idle) / (second_total - first_total);\n\t\t\t\t\t\t\t\tconst second_usage = 1 - (third_idle - second_idle) / (third_total - second_total);\n\t\t\t\t\t\t\t\tconst per_usage = (first_usage + second_usage) / 2 * 100;\n\t\t\t\t\t\t\t\tusages.push(per_usage);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\tavg: usages.reduce((a, b) => a + b, 0) / usages.length,\n\t\t\t\t\t\t\t\tusages\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, sampleTime);\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t}, sampleTime);\n\t\t} catch (err) {\n\t\t\treject(err);\n\t\t}\n\t});\n};\n"],"names":["sampleTime","Promise","resolve","reject","first","os","cpus","map","cpu","times","setTimeout","second","third","usages","i","length","first_idle","idle","first_total","user","nice","sys","irq","second_idle","second_total","third_idle","third_total","per_usage","push","avg","reduce","a","b","err"],"mappings":"4FAgBiB,SAAqBA,EAAa,KAClD,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC5B,IACC,MAAMC,EAAQC,EAAGC,OAAOC,KAAIC,GAAOA,EAAIC,QACvCC,GAAW,KACV,IACC,MAAMC,EAASN,EAAGC,OAAOC,KAAIC,GAAOA,EAAIC,QACxCC,GAAW,KACV,IACC,MAAME,EAAQP,EAAGC,OAAOC,KAAIC,GAAOA,EAAIC,QAEjCI,EAAS,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAMW,OAAQD,IAAK,CACtC,MAAME,EAAaZ,EAAMU,GAAGG,KACtBC,EAAcd,EAAMU,GAAGG,KAAOb,EAAMU,GAAGK,KAAOf,EAAMU,GAAGM,KAAOhB,EAAMU,GAAGO,IAAMjB,EAAMU,GAAGQ,IACtFC,EAAcZ,EAAOG,GAAGG,KACxBO,EAAeb,EAAOG,GAAGG,KAAON,EAAOG,GAAGK,KAAOR,EAAOG,GAAGM,KAAOT,EAAOG,GAAGO,IAAMV,EAAOG,GAAGQ,IAC5FG,EAAab,EAAME,GAAGG,KACtBS,EAAcd,EAAME,GAAGG,KAAOL,EAAME,GAAGK,KAAOP,EAAME,GAAGM,KAAOR,EAAME,GAAGO,IAAMT,EAAME,GAAGQ,IAGtFK,GAFc,GAAKJ,EAAcP,IAAeQ,EAAeN,IAChD,GAAKO,EAAaF,IAAgBG,EAAcF,KACpB,EAAI,IACrDX,EAAOe,KAAKD,GAGbzB,EAAQ,CACP2B,IAAKhB,EAAOiB,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,GAAKnB,EAAOE,OAChDF,OAAAA,IAEA,MAAOoB,GACR9B,EAAO8B,MAENjC,GACF,MAAOiC,GACR9B,EAAO8B,MAENjC,GACF,MAAOiC,GACR9B,EAAO8B"}