{"version":3,"file":"health.js","sources":["../../../../src/moleculer/src/health.js"],"sourcesContent":["/*\n * moleculer\n * Copyright (c) 2019 MoleculerJS (https://github.com/moleculerjs/moleculer)\n * MIT Licensed\n */\n\n\"use strict\";\n\nconst os = require(\"os\");\nconst { getIpList } = require(\"./utils\");\nconst MOLECULER_VERSION = require(\"../package.json\").version;\n\nconst getClientInfo = () => {\n\treturn {\n\t\ttype: \"nodejs\",\n\t\tversion: MOLECULER_VERSION,\n\t\tlangVersion: process.version\n\t};\n};\n\nconst getCpuInfo = () => {\n\tconst cpus = os.cpus();\n\tconst load = os.loadavg();\n\tconst cpu = {\n\t\tload1: load[0],\n\t\tload5: load[1],\n\t\tload15: load[2],\n\t\tcores: Array.isArray(cpus) ? os.cpus().length : null,\n\t};\n\tcpu.utilization = Math.min(Math.floor(load[0] * 100 / cpu.cores), 100);\n\n\treturn cpu;\n};\n\nconst getMemoryInfo = () => {\n\tconst mem = {\n\t\tfree: os.freemem(),\n\t\ttotal: os.totalmem()\n\t};\n\tmem.percent = (mem.free * 100 / mem.total);\n\n\treturn mem;\n};\n\nconst getUserInfo = () => {\n\ttry {\n\t\treturn os.userInfo();\n\t} catch (e) {\n\t\treturn {};\n\t}\n};\n\nconst getOsInfo = () => {\n\treturn {\n\t\tuptime: os.uptime(),\n\t\ttype: os.type(),\n\t\trelease: os.release(),\n\t\thostname: os.hostname(),\n\t\tarch: os.arch(),\n\t\tplatform: os.platform(),\n\t\tuser: getUserInfo()\n\t};\n};\n\nconst getProcessInfo = () => {\n\treturn {\n\t\tpid: process.pid,\n\t\tmemory: process.memoryUsage(),\n\t\tuptime: process.uptime(),\n\t\targv: process.argv\n\t};\n};\n\nconst getNetworkInterfacesInfo = () => {\n\treturn {\n\t\tip:  getIpList()\n\t};\n};\n\nconst getDateTimeInfo = () => {\n\treturn {\n\t\tnow: Date.now(),\n\t\tiso: new Date().toISOString(),\n\t\tutc: new Date().toUTCString()\n\t};\n};\n\nconst getHealthStatus = (/*broker*/) => {\n\treturn {\n\t\tcpu: getCpuInfo(),\n\t\tmem: getMemoryInfo(),\n\t\tos: getOsInfo(),\n\t\tprocess: getProcessInfo(),\n\t\tclient: getClientInfo(),\n\t\tnet: getNetworkInterfacesInfo(),\n\t\ttime: getDateTimeInfo()\n\t};\n};\n\nmodule.exports = {\n\tgetHealthStatus,\n\tgetCpuInfo,\n\tgetMemoryInfo,\n\tgetOsInfo,\n\tgetProcessInfo,\n\tgetClientInfo,\n\tgetNetworkInterfacesInfo,\n\tgetDateTimeInfo\n};\n"],"names":["getIpList","require$$0","MOLECULER_VERSION","require$$1","version","getClientInfo","type","langVersion","process","getCpuInfo","cpus","os","load","loadavg","cpu","load1","load5","load15","cores","Array","isArray","length","utilization","Math","min","floor","getMemoryInfo","mem","free","freemem","total","totalmem","percent","getUserInfo","userInfo","e","getOsInfo","uptime","release","hostname","arch","platform","user","getProcessInfo","pid","memory","memoryUsage","argv","getNetworkInterfacesInfo","ip","getDateTimeInfo","now","Date","iso","toISOString","utc","toUTCString","getHealthStatus","client","net","time"],"mappings":"0HASA,MAAMA,UAAEA,GAAcC,EAChBC,EAAoBC,EAA2BC,QAE/CC,EAAgB,KACd,CACNC,eACAF,QAASF,EACTK,YAAaC,EAAQJ,UAIjBK,EAAa,KAClB,MAAMC,EAAOC,EAAGD,OACVE,EAAOD,EAAGE,UACVC,EAAM,CACXC,MAAOH,EAAK,GACZI,MAAOJ,EAAK,GACZK,OAAQL,EAAK,GACbM,MAAOC,MAAMC,QAAQV,GAAQC,EAAGD,OAAOW,OAAS,MAIjD,OAFAP,EAAIQ,YAAcC,KAAKC,IAAID,KAAKE,MAAgB,IAAVb,EAAK,GAAWE,EAAII,OAAQ,KAE3DJ,GAGFY,EAAgB,KACrB,MAAMC,EAAM,CACXC,KAAMjB,EAAGkB,UACTC,MAAOnB,EAAGoB,YAIX,OAFAJ,EAAIK,QAAsB,IAAXL,EAAIC,KAAaD,EAAIG,MAE7BH,GAGFM,EAAc,KACnB,IACC,OAAOtB,EAAGuB,WACT,MAAOC,GACR,MAAO,KAIHC,EAAY,KACV,CACNC,OAAQ1B,EAAG0B,SACX/B,KAAMK,EAAGL,OACTgC,QAAS3B,EAAG2B,UACZC,SAAU5B,EAAG4B,WACbC,KAAM7B,EAAG6B,OACTC,SAAU9B,EAAG8B,WACbC,KAAMT,MAIFU,EAAiB,KACf,CACNC,IAAKpC,EAAQoC,IACbC,OAAQrC,EAAQsC,cAChBT,OAAQ7B,EAAQ6B,SAChBU,KAAMvC,EAAQuC,OAIVC,EAA2B,KACzB,CACNC,GAAKjD,MAIDkD,EAAkB,KAChB,CACNC,IAAKC,KAAKD,MACVE,KAAK,IAAID,MAAOE,cAChBC,KAAK,IAAIH,MAAOI,sBAgBD,CAChBC,gBAbuB,KAChB,CACN3C,IAAKL,IACLkB,IAAKD,IACLf,GAAIyB,IACJ5B,QAASmC,IACTe,OAAQrD,IACRsD,IAAKX,IACLY,KAAMV,MAMPzC,WAAAA,EACAiB,cAAAA,EACAU,UAAAA,EACAO,eAAAA,EACAtC,cAAAA,EACA2C,yBAAAA,EACAE,gBAAAA"}